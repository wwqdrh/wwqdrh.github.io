{"pageProps":{"post":{"mdxSource":"<h1>简介</h1>\n<p>介绍go-zero之前先说明什么是微服务、为什么要用微服务、微服务有哪些缺点</p>\n<p>微服务是比代码更高粒度设计模式思想的体现，将功能高度相关的集中在一起是高内聚的体现，通过服务的拆分来降低系统之间的耦合度是低耦合的体现</p>\n<p>不仅是代码的可维护、可测试、可扩展重要，应用层面的这些特性同样重要</p>\n<p>至于高内聚低耦合、服务分层有什么优点，写过代码的应该都清楚就不赘述</p>\n<p>另外，两个要点</p>\n<p>1、不要因为代码规模太小而拒绝良好的设计，设计与代码规模无关，只与应用是否可维护、可扩展有关\n2、不要为了拆成微服务而拆，没有良好的服务划分，拆出来只会加大服务之间的混乱程度</p>\n<h1>微服务需要解决的问题</h1>\n<h2>服务注册与发现</h2>\n<p>主要就是让服务之间知道某个服务在某个地址，以及做负载均衡等</p>\n<h2>日志收集</h2>\n<p>各个服务拆分之后日志保存会很分散，一个个的去服务上查看日志显然不合适，需要有日志上报集中查看的功能</p>\n<h2>链路追踪</h2>\n<p>多个服务之间的调用链条需要有可视化的查看机制</p>\n<h2>服务监控</h2>\n<p>及时查看服务是否运行正常</p>\n<h2>分布式事务</h2>\n<p>涉及到数据修改，为了保证数据一致性，避免其中某个服务出错而数据无法回滚到正确的版本</p>\n<h2>服务治理</h2>\n<p>自适应降级能非常智能的保护服务自身，根据服务自身的系统负载动态判断是否需要降级。保护自身不被调用方压垮</p>\n<p>限流，防止突发流量压垮系统</p>\n<p>熔断，发起服务调用的时候，如果被调用方返回的错误率超过一定的阈值，那么后续的请求将不会真正发起请求，而是在调用方直接返回错误</p>\n<h1>go-zero如何解决这些问题的</h1>\n<p>在讲go-zero如何解决上述微服务要点之前，先说说go-zero有什么优点</p>\n<h2>代码自动生成</h2>\n<p>包括rpc、api、model三部分，其中rpc、api是gateway层，rpc是基于zrpc(grpc的封装)框架的服务之间调用服务。api是给外部用户使用的</p>\n<p>model层是模型层+缓存服务的自动生成(但是有个问题，现在只能生成mysql的，但是问题不大，数据层的代码本身就有很多逻辑要自己写，这部分可以照旧使用原来的技术栈)</p>\n<ul>\n<li><code>goctl api go -dir . -api user.api</code></li>\n<li><code>goctl rpc protoc --go_out=. --go-grpc_out=. --zrpc_out=. user.proto</code></li>\n<li><code>goctl model mysql ddl -c -dir . -src user.sql</code></li>\n</ul>\n<p><em>api文件格式</em></p>\n<pre><code class=\"hljs language-go\">type (\n    <span class=\"hljs-comment\">// 用户登录</span>\n    <span class=\"hljs-title class_\">LoginRequest</span> {\n        <span class=\"hljs-title class_\">Mobile</span>   string <span class=\"hljs-string\">`json:&quot;mobile&quot;`</span>\n        <span class=\"hljs-title class_\">Password</span> string <span class=\"hljs-string\">`json:&quot;password&quot;`</span>\n    }\n    <span class=\"hljs-title class_\">LoginResponse</span> {\n        <span class=\"hljs-title class_\">AccessToken</span>  string <span class=\"hljs-string\">`json:&quot;accessToken&quot;`</span>\n        <span class=\"hljs-title class_\">AccessExpire</span> int64  <span class=\"hljs-string\">`json:&quot;accessExpire&quot;`</span>\n    }\n    <span class=\"hljs-comment\">// 用户登录</span>\n\n    <span class=\"hljs-comment\">// 用户注册</span>\n    <span class=\"hljs-title class_\">RegisterRequest</span> {\n        <span class=\"hljs-title class_\">Name</span>     string <span class=\"hljs-string\">`json:&quot;name&quot;`</span>\n        <span class=\"hljs-title class_\">Gender</span>   int64  <span class=\"hljs-string\">`json:&quot;gender&quot;`</span>\n        <span class=\"hljs-title class_\">Mobile</span>   string <span class=\"hljs-string\">`json:&quot;mobile&quot;`</span>\n        <span class=\"hljs-title class_\">Password</span> string <span class=\"hljs-string\">`json:&quot;password&quot;`</span>\n    }\n    <span class=\"hljs-title class_\">RegisterResponse</span> {\n        <span class=\"hljs-title class_\">Id</span>     int64  <span class=\"hljs-string\">`json:&quot;id&quot;`</span>\n        <span class=\"hljs-title class_\">Name</span>   string <span class=\"hljs-string\">`json:&quot;name&quot;`</span>\n        <span class=\"hljs-title class_\">Gender</span> int64  <span class=\"hljs-string\">`json:&quot;gender&quot;`</span>\n        <span class=\"hljs-title class_\">Mobile</span> string <span class=\"hljs-string\">`json:&quot;mobile&quot;`</span>\n    }\n    <span class=\"hljs-comment\">// 用户注册</span>\n\n    <span class=\"hljs-comment\">// 用户信息</span>\n    <span class=\"hljs-title class_\">UserInfoResponse</span> {\n        <span class=\"hljs-title class_\">Id</span>     int64  <span class=\"hljs-string\">`json:&quot;id&quot;`</span>\n        <span class=\"hljs-title class_\">Name</span>   string <span class=\"hljs-string\">`json:&quot;name&quot;`</span>\n        <span class=\"hljs-title class_\">Gender</span> int64  <span class=\"hljs-string\">`json:&quot;gender&quot;`</span>\n        <span class=\"hljs-title class_\">Mobile</span> string <span class=\"hljs-string\">`json:&quot;mobile&quot;`</span>\n    }\n    <span class=\"hljs-comment\">// 用户信息</span>\n)\n\nservice <span class=\"hljs-title class_\">User</span> {\n    @handler <span class=\"hljs-title class_\">Login</span>\n    post /api/user/login (<span class=\"hljs-title class_\">LoginRequest</span>) returns (<span class=\"hljs-title class_\">LoginResponse</span>)\n    \n    @handler <span class=\"hljs-title class_\">Register</span>\n    post /api/user/register (<span class=\"hljs-title class_\">RegisterRequest</span>) returns (<span class=\"hljs-title class_\">RegisterResponse</span>)\n}\n\n@<span class=\"hljs-title function_\">server</span>(\n    <span class=\"hljs-attr\">jwt</span>: <span class=\"hljs-title class_\">Auth</span>\n)\nservice <span class=\"hljs-title class_\">User</span> {\n    @handler <span class=\"hljs-title class_\">UserInfo</span>\n    post /api/user/userinfo () returns (<span class=\"hljs-title class_\">UserInfoResponse</span>)\n}\n</code></pre><h2>容器文件自动生成</h2>\n<p>创建Dockerfile, <code>goctl docker -go hello.go</code></p>\n<p>docker build -t .... 创建镜像</p>\n<h2>k8s服务文件自动生成</h2>\n<p><code>goctl kube deploy -name redis -namespace adhoc -image redis:6-alpine -o redis.yaml -port 6379</code></p>\n<p>这条命令的含义就是在adhoc命名空间中创建Deployment类型的资源，名字叫做redis，使用的镜像为<code>redis:6-alpine</code>, containerPort为6379</p>\n<p>接下来是go-zero中如何解决上文所说的问题</p>\n<h2>服务注册与发现</h2>\n<p>部署etcd(这里为了简单仅部署单节点)</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">pull</span> <span class=\"hljs-string\">bitnami/etcd:3.5.3</span>\n\n<span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">-d</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">2379</span><span class=\"hljs-string\">:2379</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">2380</span><span class=\"hljs-string\">:2380</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">-e</span> <span class=\"hljs-string\">ETCD_ROOT_PASSWORD=123456</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">--name</span> <span class=\"hljs-string\">etcd3</span> <span class=\"hljs-string\">bitnami/etcd:3.5.3</span>\n</code></pre><p>go-zero中配置(配置文件也是由上文的goctl自动生成的，执行一遍就知道了)</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">//</span> <span class=\"hljs-string\">注册者</span>\n<span class=\"hljs-attr\">Etcd:</span>\n  <span class=\"hljs-attr\">Hosts:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2379</span>\n  <span class=\"hljs-attr\">Key:</span> <span class=\"hljs-string\">user.rpc</span>\n  <span class=\"hljs-attr\">User:</span> <span class=\"hljs-string\">root</span>\n  <span class=\"hljs-attr\">Pass:</span> <span class=\"hljs-string\">&quot;123456&quot;</span>\n</code></pre><p>其中Key就是该服务注册到etcd中的名字</p>\n<p>调用者,首先修改配置以及修改go中的结构体</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">UserRpc:</span>\n  <span class=\"hljs-attr\">Etcd:</span>\n    <span class=\"hljs-attr\">Hosts:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2379</span>\n    <span class=\"hljs-attr\">Key:</span> <span class=\"hljs-string\">user.rpc</span>\n    <span class=\"hljs-attr\">User:</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">Pass:</span> <span class=\"hljs-string\">&quot;123456&quot;</span>\n</code></pre><pre><code class=\"hljs language-go\"><span class=\"hljs-built_in\">type</span> Config struct {\n    ...\n    UserRpc zrpc.RpcClientConf\n}\n</code></pre><p>然后将服务初始化到上下文中</p>\n<pre><code class=\"hljs language-go\">type ServiceContext <span class=\"hljs-keyword\">struct</span> {\n    Config  config.Config\n    UserRpc user.User\n}\n\n<span class=\"hljs-function\">func <span class=\"hljs-title\">NewServiceContext</span><span class=\"hljs-params\">(c config.Config)</span> *ServiceContext </span>{\n    <span class=\"hljs-keyword\">return</span> &amp;ServiceContext{\n        Config:  c,\n        UserRpc: user.<span class=\"hljs-built_in\">NewUser</span>(zrpc.<span class=\"hljs-built_in\">MustNewClient</span>(c.UserRpc)),\n    }\n}\n</code></pre><p>之后就可以直接使用UserRpc进行rpc调用</p>\n<h2>日志收集</h2>\n<p>部署EFK架构，当然如果只是为了将日志集中起来方便查看，可以暂时需要elasticsearch+kibana</p>\n<p>部署fluentd</p>\n<pre><code class=\"hljs language-bash\">docker pull fluent/<span class=\"hljs-attr\">fluentd</span>:v1<span class=\"hljs-number\">.14</span>-debian\n\ndocker run -d -p <span class=\"hljs-number\">24224</span>:<span class=\"hljs-number\">24224</span> -v ${conf}:<span class=\"hljs-regexp\">/fluentd/</span>etc/fluent.<span class=\"hljs-property\">conf</span> fluent/<span class=\"hljs-attr\">fluentd</span>:v1<span class=\"hljs-number\">.14</span>-debian\n</code></pre><p>示例配置文件</p>\n<p>参考: <a href=\"https://docs.fluentd.org/configuration/config-file\">https://docs.fluentd.org/configuration/config-file</a></p>\n<pre><code class=\"hljs language-conf\"><span class=\"hljs-string\">&lt;source&gt;</span>\n  <span class=\"hljs-string\">@type</span>   <span class=\"hljs-string\">forward</span>\n<span class=\"hljs-string\">&lt;/source&gt;</span>\n<span class=\"hljs-string\">&lt;match</span> <span class=\"hljs-string\">*&gt;</span>\n  <span class=\"hljs-string\">@type</span>              <span class=\"hljs-string\">file</span>\n  <span class=\"hljs-string\">path</span>               <span class=\"hljs-string\">/fluentd/log/${tag}</span>\n  <span class=\"hljs-string\">append</span>             <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-string\">&lt;format&gt;</span>\n    <span class=\"hljs-string\">@type</span>            <span class=\"hljs-string\">single_value</span>\n    <span class=\"hljs-string\">message_key</span>      <span class=\"hljs-string\">log</span>\n  <span class=\"hljs-string\">&lt;/format&gt;</span>\n  <span class=\"hljs-string\">&lt;buffer</span> <span class=\"hljs-string\">tag,time&gt;</span>\n    <span class=\"hljs-string\">@type</span>             <span class=\"hljs-string\">file</span>\n    <span class=\"hljs-string\">timekey</span>           <span class=\"hljs-string\">1d</span>\n    <span class=\"hljs-string\">timekey_wait</span>      <span class=\"hljs-string\">10m</span>\n    <span class=\"hljs-string\">flush_mode</span>        <span class=\"hljs-string\">interval</span>\n    <span class=\"hljs-string\">flush_interval</span>    <span class=\"hljs-string\">30s</span>\n  <span class=\"hljs-string\">&lt;/buffer&gt;</span>\n<span class=\"hljs-string\">&lt;/match&gt;</span>\n</code></pre><p>将上传到flutend的操作封装进基础logger库的可选项以及包装成go-zero可使用的模式</p>\n<p>参考: github.com/wwqdrh/logger</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">import</span> (\n    mylogx <span class=\"hljs-string\">&quot;github.com/wwqdrh/logger/logx&quot;</span>\n    <span class=\"hljs-string\">&quot;github.com/zeromicro/go-zero/core/conf&quot;</span>\n    <span class=\"hljs-string\">&quot;github.com/zeromicro/go-zero/core/logx&quot;</span>\n)\n\nfunc <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\"></span>) {\n    l := logger.<span class=\"hljs-title class_\">NewLogger</span>(\n        logger.<span class=\"hljs-title class_\">WithLevel</span>(zapcore.<span class=\"hljs-property\">WarnLevel</span>),\n        logger.<span class=\"hljs-title class_\">WithLogPath</span>(<span class=\"hljs-string\">&quot;./logs/info.log&quot;</span>),\n        logger.<span class=\"hljs-title class_\">WithName</span>(<span class=\"hljs-string\">&quot;info&quot;</span>),\n        logger.<span class=\"hljs-title class_\">WithFluentd</span>(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">24224</span>),\n        logger.<span class=\"hljs-title class_\">WithConsole</span>(<span class=\"hljs-literal\">false</span>),\n    )\n\n    writer, _ := mylogx.<span class=\"hljs-title class_\">NewZeroWriter</span>(l)\n    logx.<span class=\"hljs-title class_\">Must</span>(err)\n    logx.<span class=\"hljs-title class_\">SetWriter</span>(writer)\n}\n</code></pre><p>之后使用logx.Infof就可以将日志上传至服务中, 所有的服务的日志就已经收集到了flutend容器中</p>\n<h2>链路追踪</h2>\n<p>go-zero已经封装了，仅需部署jaeger之后修改服务的配置项进行启用</p>\n<p>部署jaeger</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">pull</span> <span class=\"hljs-string\">jaegertracing/all-in-one:1.34</span>\n\n<span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">-d</span> <span class=\"hljs-string\">--name</span> <span class=\"hljs-string\">jaeger</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">-e</span> <span class=\"hljs-string\">COLLECTOR_ZIPKIN_HTTP_PORT=9411</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">5775</span><span class=\"hljs-string\">:5775/udp</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">6831</span><span class=\"hljs-string\">:6831/udp</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">6832</span><span class=\"hljs-string\">:6832/udp</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">5778</span><span class=\"hljs-string\">:5778</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">16686</span><span class=\"hljs-string\">:16686</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">14268</span><span class=\"hljs-string\">:14268</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">9411</span><span class=\"hljs-string\">:9411</span> <span class=\"hljs-string\">\\</span>\n<span class=\"hljs-string\">jaegertracing/all-in-one:1.34</span>\n</code></pre><p>修改配置</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">Telemetry:</span>\n  <span class=\"hljs-attr\">Name:</span> <span class=\"hljs-string\">user.api</span>\n  <span class=\"hljs-attr\">Endpoint:</span> <span class=\"hljs-string\">http://127.0.0.1:14268/api/traces</span>\n  <span class=\"hljs-attr\">Sampler:</span> <span class=\"hljs-number\">1.0</span>\n  <span class=\"hljs-attr\">Batcher:</span> <span class=\"hljs-string\">jaeger</span>\n</code></pre><p>效果</p>\n<img src=\"/images/blogs/jaeger-1.png\" />\n\n<img src=\"/images/blogs/jaeger-2.png\" />\n\n<h2>服务监控</h2>\n<p>go-zero已经集成</p>\n<p>部署prometheus</p>\n<pre><code class=\"hljs language-bash\">docker pull bitnami/<span class=\"hljs-attr\">prometheus</span>:<span class=\"hljs-number\">2.9</span><span class=\"hljs-number\">.2</span>\n\ndocker run --name prometheus \\\n-v ${<span class=\"hljs-variable constant_\">CURDIR</span>}<span class=\"hljs-string\">&quot;/env/prometheus/prometheus.yml&quot;</span>:<span class=\"hljs-regexp\">/opt/</span>bitnami/prometheus/data \\\n-p <span class=\"hljs-number\">9090</span>:<span class=\"hljs-number\">9090</span> \\\n    bitnami/<span class=\"hljs-attr\">prometheus</span>:<span class=\"hljs-number\">2.9</span><span class=\"hljs-number\">.2</span>\n</code></pre><p>进行配置</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">Prometheus:</span>\n  <span class=\"hljs-attr\">Host:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>\n  <span class=\"hljs-attr\">Port:</span> <span class=\"hljs-number\">9081</span>\n  <span class=\"hljs-attr\">Path:</span> <span class=\"hljs-string\">/metrics</span>\n</code></pre><p>修改prometheus监听的服务配置（上文的prometheus.yml）</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\"># my global config</span>\n<span class=\"hljs-attr\">global:</span>\n  <span class=\"hljs-attr\">scrape_interval:</span> <span class=\"hljs-string\">15s</span> <span class=\"hljs-comment\"># Set the scrape interval to every 15 seconds. Default is every 1 minute. </span>\n  <span class=\"hljs-attr\">evaluation_interval:</span> <span class=\"hljs-string\">15s</span> <span class=\"hljs-comment\"># Evaluate rules every 15 seconds. The default is every 1 minute.     </span>\n  <span class=\"hljs-comment\"># scrape_timeout is set to the global default (10s).</span>\n\n<span class=\"hljs-comment\"># Alertmanager configuration</span>\n<span class=\"hljs-attr\">alerting:</span>\n  <span class=\"hljs-attr\">alertmanagers:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">static_configs:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">targets:</span>\n          <span class=\"hljs-comment\"># - alertmanager:9093</span>\n\n<span class=\"hljs-comment\"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.  </span>\n<span class=\"hljs-attr\">rule_files:</span>\n  <span class=\"hljs-comment\"># - &quot;first_rules.yml&quot;</span>\n  <span class=\"hljs-comment\"># - &quot;second_rules.yml&quot;</span>\n\n<span class=\"hljs-comment\"># A scrape configuration containing exactly one endpoint to scrape:</span>\n<span class=\"hljs-comment\"># Here it&#x27;s Prometheus itself.</span>\n<span class=\"hljs-attr\">scrape_configs:</span>\n  <span class=\"hljs-comment\"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">&quot;prometheus&quot;</span>\n\n    <span class=\"hljs-comment\"># metrics_path defaults to &#x27;/metrics&#x27;</span>\n    <span class=\"hljs-comment\"># scheme defaults to &#x27;http&#x27;.</span>\n\n    <span class=\"hljs-attr\">static_configs:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">targets:</span> [<span class=\"hljs-string\">&quot;localhost:9090&quot;</span>]\n\n  <span class=\"hljs-comment\"># 我们自己的商城项目配置</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">job_name:</span> <span class=\"hljs-string\">&#x27;mall&#x27;</span>\n    <span class=\"hljs-attr\">static_configs:</span>\n      <span class=\"hljs-comment\"># 目标的采集地址</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">targets:</span> [<span class=\"hljs-string\">&#x27;192.168.110.113:9081&#x27;</span>]\n        <span class=\"hljs-attr\">labels:</span>\n          <span class=\"hljs-comment\"># 自定义标签</span>\n          <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">&#x27;user-api&#x27;</span>\n          <span class=\"hljs-attr\">env:</span> <span class=\"hljs-string\">&#x27;test&#x27;</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">targets:</span> [<span class=\"hljs-string\">&#x27;192.168.110.113:9091&#x27;</span>]\n        <span class=\"hljs-attr\">labels:</span>\n          <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">&#x27;user-rpc&#x27;</span>\n          <span class=\"hljs-attr\">env:</span> <span class=\"hljs-string\">&#x27;test&#x27;</span>\n</code></pre><p>效果</p>\n<img src=\"/images/blogs/prometheus-1.png\" />\n\n<h2>分布式事务</h2>\n<p>使用dtm</p>\n<p>比较大的部分，详细文档查看: <a href=\"https://go-zero.dev/cn/docs/eco/distributed-transaction\">https://go-zero.dev/cn/docs/eco/distributed-transaction</a></p>\n<h2>服务治理</h2>\n<p>熔断器使用文档: <a href=\"https://go-zero.dev/cn/docs/blog/governance/breaker-algorithms\">https://go-zero.dev/cn/docs/blog/governance/breaker-algorithms</a></p>\n<p>自适应降级文档: <a href=\"https://go-zero.dev/cn/docs/blog/governance/loadshedding\">https://go-zero.dev/cn/docs/blog/governance/loadshedding</a></p>\n<p>限流文档: <a href=\"https://go-zero.dev/cn/docs/blog/governance/periodlimit\">https://go-zero.dev/cn/docs/blog/governance/periodlimit</a></p>\n","frontMatter":{"readingTime":{"text":"11 min read","minutes":10.98,"time":658800,"words":2196},"slug":"go-zero微服务实践","fileName":"go-zero微服务实践.md","title":"go-zero微服务实践","date":"2022-06-20T00:00:00.000Z","tags":["实践","云原生"],"draft":false,"summary":"微服务简介以及go-zero如何落地"}},"prev":{"title":"tekton使用示例","date":"2022-06-06T00:00:00.000Z","tags":["中间件"],"draft":false,"summary":"缓存一致性的解决方法与思路","slug":"缓存一致性问题"},"next":{"title":"golang工程化纵览","date":"2022-07-03T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"golang工程化所用到的工具概览","slug":"golang工程化总览"}},"__N_SSG":true}