{"pageProps":{"post":{"mdxSource":"<h1>简介</h1>\n<ul>\n<li><a href=\"https://threejs.org/docs/index.html\">threejs文档</a></li>\n<li><a href=\"https://threejs.org/examples/\">threejs示例</a></li>\n</ul>\n<p>对于webar中，3D模型资源是很重要的一个组成部分。可以通过建模或者使用threejs搭建一些简单的3D场景</p>\n<blockquote>\n<p>一个人的能力始终是有边界的，所以对于复杂专业的建模软件的学习，暂时不进行展开，要么使用现成的3D模型进行学习使用，或者对于一些简单的3D场景，学习使用threejs来完成</p>\n</blockquote>\n<h2>安装</h2>\n<blockquote>\n<p>我这里采用vite构建工具，并且开发框架使用svelte对于一些小型的页面我比较喜欢使用svelte</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\">npm create vite@latest <span class=\"hljs-number\">3</span>d-assets -- --<span class=\"hljs-keyword\">template</span> svelte\n\ncd <span class=\"hljs-number\">3</span>d-assets\n\npnpm install --save three\n\npnpm run dev\n</code></pre><p>然后在入口js中添加核心资源, 注意由于这些是客户端资源，所以必须在onMount挂载后初始化</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable constant_\">THREE</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;three&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">OrbitControls</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;three/addons/controls/OrbitControls.js&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GLTFLoader</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;three/addons/loaders/GLTFLoader.js&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { onMount } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;svelte&quot;</span>;\n</code></pre><h1>开发示例</h1>\n<h2>主要对象</h2>\n<ul>\n<li>场景</li>\n<li>相机</li>\n<li>形状</li>\n<li>材质</li>\n</ul>\n<hr>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable constant_\">THREE</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;three&#x27;</span>;\n\n<span class=\"hljs-keyword\">let</span> threescene;\n\n  <span class=\"hljs-title function_\">onMount</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> scene = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">Scene</span>();\n    <span class=\"hljs-keyword\">const</span> camera = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">PerspectiveCamera</span>(\n      <span class=\"hljs-number\">75</span>,\n      <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerWidth</span> / <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span>,\n      <span class=\"hljs-number\">0.1</span>,\n      <span class=\"hljs-number\">1000</span>\n    );\n    <span class=\"hljs-keyword\">const</span> renderer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">WebGLRenderer</span>();\n    renderer.<span class=\"hljs-title function_\">setSize</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerWidth</span>, <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span>);\n    threescene.<span class=\"hljs-title function_\">appendChild</span>(renderer.<span class=\"hljs-property\">domElement</span>);\n  });\n</code></pre><h2>一个旋转的立方体</h2>\n<p><code>创建形状以及材质</code></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> geometry = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">BoxGeometry</span>( <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span> );\n<span class=\"hljs-keyword\">const</span> material = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">MeshBasicMaterial</span>( { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-number\">0x00ff00</span> } );\n<span class=\"hljs-keyword\">const</span> cube = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">Mesh</span>( geometry, material );\nscene.<span class=\"hljs-title function_\">add</span>( cube );\n\ncamera.<span class=\"hljs-property\">position</span>.<span class=\"hljs-property\">z</span> = <span class=\"hljs-number\">5</span>;\n</code></pre><p><code>渲染出结果</code></p>\n<p>当我们在animate的回调中不断改变cube这个正方体的rotation值，就会看上去像旋转一样</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">animate</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">requestAnimationFrame</span>( animate );\n\n    cube.<span class=\"hljs-property\">rotation</span>.<span class=\"hljs-property\">x</span> += <span class=\"hljs-number\">0.01</span>;\n    cube.<span class=\"hljs-property\">rotation</span>.<span class=\"hljs-property\">y</span> += <span class=\"hljs-number\">0.01</span>;\n\n    renderer.<span class=\"hljs-title function_\">render</span>( scene, camera );\n}\n<span class=\"hljs-title function_\">animate</span>();\n</code></pre><img src=\"/images/blogs/ar开发/threejs-cube.jpg\" />\n\n<h2>线</h2>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> material = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">LineBasicMaterial</span>({ <span class=\"hljs-attr\">color</span>: <span class=\"hljs-number\">0x0000ff</span> });\n<span class=\"hljs-keyword\">const</span> points = [];\npoints.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">Vector3</span>(-<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\npoints.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">Vector3</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>));\npoints.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">Vector3</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\n<span class=\"hljs-keyword\">const</span> geometry = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">BufferGeometry</span>().<span class=\"hljs-title function_\">setFromPoints</span>(points);\n<span class=\"hljs-keyword\">const</span> line = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">Line</span>(geometry, material);\n</code></pre><h2>3D文字</h2>\n<blockquote>\n<p>需要为three安装FontLoader以及TextGeometry两个扩展\n如果是使用npm安装的three那么就直接有了，不需要额外操作</p>\n</blockquote>\n<p>对于字体来说，需要将ttf格式转换成json文件才能导入使用, <a href=\"https://gero3.github.io/facetype.js/\">在线转化</a></p>\n<img src=\"/images/blogs/ar开发/threejs-text.jpg\" />\n\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable constant_\">THREE</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;three&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FontLoader</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;three/examples/jsm/loaders/FontLoader.js&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TextGeometry</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;three/examples/jsm/geometries/TextGeometry.js&quot;</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadFont</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> loader = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FontLoader</span>();\n    loader.<span class=\"hljs-title function_\">load</span>( <span class=\"hljs-string\">&#x27;fonts/&#x27;</span> + fontName + <span class=\"hljs-string\">&#x27;_&#x27;</span> + fontWeight + <span class=\"hljs-string\">&#x27;.typeface.json&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"> response </span>) {\n\n        font = response;\n\n        <span class=\"hljs-title function_\">refreshText</span>();\n\n    } );\n\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createText</span>(<span class=\"hljs-params\"></span>) {\n    textGeo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TextGeometry</span>( text, {\n        <span class=\"hljs-attr\">font</span>: font,\n        <span class=\"hljs-attr\">size</span>: size,\n        <span class=\"hljs-attr\">height</span>: height,\n        <span class=\"hljs-attr\">curveSegments</span>: curveSegments,\n        <span class=\"hljs-attr\">bevelThickness</span>: bevelThickness,\n        <span class=\"hljs-attr\">bevelSize</span>: bevelSize,\n        <span class=\"hljs-attr\">bevelEnabled</span>: bevelEnabled\n    } );\n\n    textGeo.<span class=\"hljs-title function_\">computeBoundingBox</span>();\n\n    <span class=\"hljs-keyword\">const</span> centerOffset = - <span class=\"hljs-number\">0.5</span> * ( textGeo.<span class=\"hljs-property\">boundingBox</span>.<span class=\"hljs-property\">max</span>.<span class=\"hljs-property\">x</span> - textGeo.<span class=\"hljs-property\">boundingBox</span>.<span class=\"hljs-property\">min</span>.<span class=\"hljs-property\">x</span> );\n\n    textMesh1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-variable constant_\">THREE</span>.<span class=\"hljs-title class_\">Mesh</span>( textGeo, materials );\n\n    textMesh1.<span class=\"hljs-property\">position</span>.<span class=\"hljs-property\">x</span> = centerOffset;\n    textMesh1.<span class=\"hljs-property\">position</span>.<span class=\"hljs-property\">y</span> = hover;\n    textMesh1.<span class=\"hljs-property\">position</span>.<span class=\"hljs-property\">z</span> = <span class=\"hljs-number\">0</span>;\n\n    textMesh1.<span class=\"hljs-property\">rotation</span>.<span class=\"hljs-property\">x</span> = <span class=\"hljs-number\">0</span>;\n    textMesh1.<span class=\"hljs-property\">rotation</span>.<span class=\"hljs-property\">y</span> = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-number\">2</span>;\n\n    group.<span class=\"hljs-title function_\">add</span>( textMesh1 );\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">refreshText</span>(<span class=\"hljs-params\"></span>) {\n    group.<span class=\"hljs-title function_\">remove</span>( textMesh1 );\n    <span class=\"hljs-keyword\">if</span> ( mirror ) group.<span class=\"hljs-title function_\">remove</span>( textMesh2 );\n\n    <span class=\"hljs-keyword\">if</span> ( ! text ) <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-title function_\">createText</span>();\n}\n</code></pre><h2>GUI</h2>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-variable constant_\">GUI</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;three/examples/jsm/libs/lil-gui.module.min.js&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> params = {\n    <span class=\"hljs-attr\">changeColor</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        pointLight.<span class=\"hljs-property\">color</span>.<span class=\"hljs-title function_\">setHSL</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>(), <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0.5</span>);\n    },\n    <span class=\"hljs-attr\">changeFont</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        fontIndex++;\n\n        fontName =\n            reverseFontMap[fontIndex % reverseFontMap.<span class=\"hljs-property\">length</span>];\n\n        <span class=\"hljs-title function_\">loadFont</span>();\n    },\n    <span class=\"hljs-attr\">changeWeight</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">if</span> (fontWeight === <span class=\"hljs-string\">&quot;bold&quot;</span>) {\n            fontWeight = <span class=\"hljs-string\">&quot;regular&quot;</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            fontWeight = <span class=\"hljs-string\">&quot;bold&quot;</span>;\n        }\n\n        <span class=\"hljs-title function_\">loadFont</span>();\n    },\n    <span class=\"hljs-attr\">changeBevel</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        bevelEnabled = !bevelEnabled;\n\n        <span class=\"hljs-title function_\">refreshText</span>();\n    },\n};\n\n<span class=\"hljs-comment\">//</span>\n\n<span class=\"hljs-keyword\">const</span> gui = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">GUI</span>();\n\ngui.<span class=\"hljs-title function_\">add</span>(params, <span class=\"hljs-string\">&quot;changeColor&quot;</span>).<span class=\"hljs-title function_\">name</span>(<span class=\"hljs-string\">&quot;change color&quot;</span>);\n<span class=\"hljs-comment\">// gui.add(params, &quot;changeFont&quot;).name(&quot;change font&quot;);</span>\n<span class=\"hljs-comment\">// gui.add(params, &quot;changeWeight&quot;).name(&quot;change weight&quot;);</span>\ngui.<span class=\"hljs-title function_\">add</span>(params, <span class=\"hljs-string\">&quot;changeBevel&quot;</span>).<span class=\"hljs-title function_\">name</span>(<span class=\"hljs-string\">&quot;change bevel&quot;</span>);\ngui.<span class=\"hljs-title function_\">open</span>();\n</code></pre><h2>3D模型</h2>\n<p>GLTF（Graphics Language Transmission Format）是一种标准的3D模型文件格式，它以JSON的形式存储3D模型信息，例如模型的层次结构、材质、动画、纹理等。</p>\n<p>模型中依赖的静态资源，比如图片，可以通过外部URI的方式来引入，也可以转成base64直接插入在GLTF文件中。\n它包含两种形式的后缀，分别是.gltf（JSON/ASCII）和.glb（Binary）。.gltf是以JSON的形式存储信息。.glb则是.gltf的扩展格式，它以二进制的形式存储信息，因此导出的模型体积也更小一些。如果我们不需要通过JSON对.gltf模型进行直接修改，建议使用.glb模型，它更小、加载更快。</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">GLTFLoader</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;GLTFLoader&#x27;</span>\n<span class=\"hljs-keyword\">const</span> loader = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GLTFLoader</span>()\nloader.<span class=\"hljs-title function_\">load</span>(<span class=\"hljs-string\">&#x27;path/to/gallery.glb&#x27;</span>,\n  <span class=\"hljs-function\"><span class=\"hljs-params\">gltf</span> =&gt;</span> {\n    scene.<span class=\"hljs-title function_\">add</span>(gltf.<span class=\"hljs-property\">scene</span>) <span class=\"hljs-comment\">// 添加到场景中</span>\n  } \n)\n</code></pre>","frontMatter":{"readingTime":{"text":"7 min read","minutes":6.765,"time":405900,"words":1353},"slug":"AR开发/threejs上手","fileName":"AR开发/threejs上手.md","title":"threejs上手","date":"2023-10-05T00:00:00.000Z","tags":["AR开发"],"draft":false,"summary":"3D模型"}},"prev":{"title":"gmp模型","date":"2023-03-01T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"gmp模型","slug":"gmp模型"},"next":{"title":"AR开发示例程序","date":"2023-10-05T00:00:00.000Z","tags":["AR开发"],"draft":false,"summary":"应用示例","slug":"AR开发/AR开发示例程序"}},"__N_SSG":true}