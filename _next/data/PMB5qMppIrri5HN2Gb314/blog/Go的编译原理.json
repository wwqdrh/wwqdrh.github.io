{"pageProps":{"post":{"mdxSource":"<h1>基础环境</h1>\n<p>GoRoot：Go的安装目录，go/pkg/tool/[platform]下面有些重要的有compile(编译器)、link（链接器）</p>\n<p>GoPath：寻找<code>.go</code>源码的路径</p>\n<p>go语言的源码分为三类：命令源码、库源码、测试源码</p>\n<ul>\n<li>命令源码文件：Go程序的入口，包含<code>func main()</code>函数，且第一行用<code>pacakge main</code>声明</li>\n<li>库源码文件：各种函数、接口等</li>\n<li>测试源码文件：以<code>_test.go</code>为后缀的文件</li>\n</ul>\n<h2>go111module</h2>\n<p>GO111MODULE 是个环境变量，可以在使用 Go 或者更改 Go 导入包的方式时候设置。</p>\n<p>要注意的是，这个变量在不同 Go 版本有不同的语义</p>\n<p><strong>没有包管理阶段</strong></p>\n<ul>\n<li>一开始go发布的时候是没有包管理的</li>\n<li>go get命令会根据路径，把相应的模块获取并保存在$GOPATH/src</li>\n<li>也没有版本的概念，master 就代表稳定的版本</li>\n</ul>\n<p><strong>Go 1.11-1.12 阶段</strong></p>\n<p>GO111MODULE = on ，即使项目在您的 GOPATH 中，仍将强制使用 Go 模块。仍然需要 go.mod 才能正常工作。</p>\n<p>GO111MODULE = off，强制 Go 表现出 GOPATH 方式，即使你的项目不在 GOPATH 目录里。</p>\n<p>GO111MODULE = auto 是默认模式。当项目路径在 GOPATH 目录外部时， 设置为 GO111MODULE = on 当项目路径位于 GOPATH 内部时，即使存在 go.mod, 设置为 GO111MODULE = off。</p>\n<p><strong>Go 1.13</strong></p>\n<ul>\n<li>当存在 go.mod 文件时或处于 GOPATH 外， 其行为均会等同于 GO111MODULE=on。相当于 Go 1.13 下你可以将所有的代码仓库均不存储在 GOPATH 下。</li>\n<li>当项目目录处于 GOPATH 内，且没有 go.mod 文件存在时其行为会等同于 GO111MODULE=off。</li>\n</ul>\n<h2>逃逸分析</h2>\n<p>逃逸分析是什么、逃逸分析有什么作用、逃逸分析是怎么完成的、如何确定是否发生逃逸、go中的堆栈与C中的是同一个概念吗</p>\n<blockquote>\n<p>在编译原理中，分析指针范围的方法就称为逃逸分析。一般来说当一个对象的指针被多个方法或线程引用时，称这个指针发生了逃逸</p>\n</blockquote>\n<p>堆和栈相比，堆适合不可预知大小的内存分配。但是为此付出的代价是分配速度较慢，而且会形成内存碎片，会增大GC的压力。栈内存分配则会非常快。栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”，分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块，之后要通过垃圾回收才能释放。</p>\n<p>Go语言的逃逸分析是编译器执行静态代码分析后，对内存管理进行的优化和简化，它可以决定一个变量是分配到堆还栈上。</p>\n<blockquote>\n<p><code>go build -gcflags &#39;-m -l&#39; main.go</code> 能够查看到整个的逃逸情况，另外加l是为了让函数不要内联</p>\n</blockquote>\n<ul>\n<li>如果函数外部没有引用，优先放在栈中</li>\n<li>如果函数外部存在引用，必定放在堆中</li>\n</ul>\n<p>将值传递给另外的函数使用时，如果是传递原始值(会完全复制，指针参数就有些值复制不到)或者另外一个函数直接将输入变成返回值，都不会进行逃逸。</p>\n<blockquote>\n<p>如果作用域变了，另外的函数要访问到这个变量，如果变量是在之前函数的栈中是访问不到的，所以只能逃逸到堆中分配</p>\n</blockquote>\n<pre><code class=\"hljs language-go\">type S struct {}\n\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">var</span> x S\n  y := &amp;x\n  _ = *<span class=\"hljs-title function_\">identity</span>(y)\n}\n\nfunc <span class=\"hljs-title function_\">identity</span>(z *S) *S {\n  <span class=\"hljs-keyword\">return</span> z\n}\n</code></pre><p>变量在输入或者输出中，逃逸分析的结果也是不一样的</p>\n<pre><code class=\"hljs language-Go\">type S <span class=\"hljs-keyword\">struct</span> {\n  M *<span class=\"hljs-type\">int</span>\n}\n\n<span class=\"hljs-function\">func <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  var i <span class=\"hljs-type\">int</span>\n\n  <span class=\"hljs-comment\">// 这里调用函数时，refStruct的S是定义在返回值里的，S所引用的i也还是在main函数的作用域里的</span>\n  <span class=\"hljs-built_in\">refStruct</span>(&amp;i)\n}\n\n<span class=\"hljs-function\">func <span class=\"hljs-title\">refStruct</span><span class=\"hljs-params\">(y *<span class=\"hljs-type\">int</span>)</span> <span class=\"hljs-params\">(z S)</span> </span>{\n  z.M = y\n  <span class=\"hljs-keyword\">return</span> z\n}\n</code></pre><p>如果是在输入参数中，解引用传给ref函数，那么作用域就是变了。</p>\n<pre><code class=\"hljs language-go\">type S struct {\n  M *int\n}\n\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">var</span> x S\n  <span class=\"hljs-keyword\">var</span> i int\n  <span class=\"hljs-title function_\">ref</span>(&amp;i, &amp;x)\n}\n\nfunc <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-params\">y *int, z *S</span>) {\n  z.<span class=\"hljs-property\">M</span> = y\n}\n</code></pre><p>对于接口，调用方法时，即使是标量同样也会发生逃逸</p>\n<pre><code class=\"hljs language-go\">type <span class=\"hljs-title class_\">Addifier</span> interface{ <span class=\"hljs-title class_\">Add</span>(a, b int32) int32 }\n\ntype <span class=\"hljs-title class_\">Adder</span> struct{ name string }\n<span class=\"hljs-comment\">//go:noinline</span>\nfunc (adder <span class=\"hljs-title class_\">Adder</span>) <span class=\"hljs-title class_\">Add</span>(a, b int32) int32 { <span class=\"hljs-keyword\">return</span> a + b }\n\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    adder := <span class=\"hljs-title class_\">Adder</span>{<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;myAdder&quot;</span>}\n    adder.<span class=\"hljs-title class_\">Add</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">32</span>)          <span class=\"hljs-comment\">// doesn&#x27;t escape</span>\n    <span class=\"hljs-title class_\">Addifier</span>(adder).<span class=\"hljs-title class_\">Add</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">32</span>) <span class=\"hljs-comment\">// escapes</span>\n}\n</code></pre><h1>go命令</h1>\n<p>#buildflags</p>\n<p><code>build, clean, get, install, list, run, test</code> 这些命令会共用一套</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>强制重新编译所有涉及到的包，包括标准库中的代码包，这会重写 /usr/local/go 目录下的 <code>.a</code> 文件</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>打印命令执行过程，不真正执行</td>\n</tr>\n<tr>\n<td>-p n</td>\n<td>指定编译过程中命令执行的并行数，n默认为CPU核数</td>\n</tr>\n<tr>\n<td>-race</td>\n<td>检测数据竞争问题</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>打印命令执行过程中所涉及到的代码包名称</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>打印命令执行过程中所涉及到的命令，并执行</td>\n</tr>\n<tr>\n<td>-work</td>\n<td>打印编译过程中的临时文件夹。通常情况下，编译完成后会被删除</td>\n</tr>\n</tbody></table>\n<p>#gcflags</p>\n<ul>\n<li><code>-N</code>：关闭编译器优化</li>\n<li><code>-l</code>：禁止函数内联</li>\n</ul>\n<h2>build命令</h2>\n<p>gobuild会忽略<code>*_test.go</code>文件。</p>\n<p><strong>参数</strong></p>\n<p><code>-o</code> 只能在编译单个包的时候出现，它指定输出的可执行文件的名字。</p>\n<p><code>-i</code> 会安装编译目标所依赖的包，安装是指生成与代码包相对应的 <code>.a</code> 文件，即静态库文件（后面要参与链接），并且放置到当前工作区的 pkg 目录下，且库文件的目录层级和源码层级一致。（使用这个参数后会在工作目录的pkg下生成相应的<code>.a</code>文件，这样在再次编译的时候不会重新编译这些文件，加快编译速度）</p>\n<p><strong>环境变量</strong></p>\n<p>GOOS：需要编译到的操作系统类型\nGOARCH：需要编译到的CPU架构</p>\n<h1>编译链接</h1>\n<blockquote>\n<p>vim中命令模式下<code>:%!xxd</code>能够以十六进制查看文件内容</p>\n</blockquote>\n<blockquote>\n<p>编译过程一般分为前端和后端，前端生成平台无关的中间代码，后端针对不同的平台生成不同的机器码</p>\n</blockquote>\n<p>编译过程就是对源文件进行词法分析、语法分析、语义分析、优化，最后生成汇编代码文件，以 <code>.s</code> 作为文件后缀。</p>\n<blockquote>\n<p>词法解析、语法解析、抽象语法树构建、类型检查、变量捕获、函数内联、逃逸分析、闭包重写、遍历函数、SSA生成、机器码生成-汇编器、机器码生成-链接、ELF文件解析</p>\n</blockquote>\n<h2>词法分析</h2>\n<p>将字符序列转换为标记（token）序列</p>\n<p>一种类似于有限状态机的算法。</p>\n<p>记号一般分为这几类：关键字、标识符、字面量（包含数字、字符串）、特殊符号（如加号、等号）。</p>\n<h2>语法分析</h2>\n<p>将token转为语法树</p>\n<img src=\"/images/blogs/ast.png\" />\n\n<h2>语义分析</h2>\n<blockquote>\n<p>确定类型，优化抽象语法树</p>\n</blockquote>\n<p>查看语法树各个节点分别代表什么，完善语法树，例如标注类型</p>\n<p>Go 语言编译器在这一阶段检查常量、类型、函数声明以及变量赋值语句的类型，然后检查哈希中键的类型。</p>\n<p>类型检查是 Go 语言编译的第二个阶段，在词法和语法分析之后我们得到了每个文件对应的抽象语法树，随后的类型检查会遍历抽象语法树中的节点，对每个节点的类型进行检验，找出其中存在的语法错误。</p>\n<p>在这个过程中也可能会对抽象语法树进行改写，这不仅能够去除一些不会被执行的代码对编译进行优化提高执行效率，而且也会修改 make、new 等关键字对应节点的操作类型。</p>\n<h2>中间代码生成</h2>\n<p>中间代码一般和目标机器以及运行时环境无关，它有几种常见的形式：三地址码、P-代码。</p>\n<p>Go 语言的中间代码表示形式为 SSA（Static Single-Assignment，静态单赋值），之所以称之为单赋值，是因为每个名字在 SSA 中仅被赋值一次。</p>\n<p>这一阶段会根据 CPU 的架构设置相应的用于生成中间代码的变量，例如编译器使用的指针和寄存器的大小、可用寄存器列表等。中间代码生成和机器码生成这两部分会共享相同的设置。</p>\n<p>中间代码的生成过程其实就是从 AST 抽象语法树到 SSA 中间代码的转换过程，在这期间会对语法树中的关键字在进行一次更新，更新后的语法树会经过多轮处理转变最后的 SSA 中间代码。</p>\n<h2>目标代码生成与优化</h2>\n<p>不同机器的机器字长、寄存器等等都不一样，意味着在不同机器上跑的机器码是不一样的。最后一步的目的就是要生成能在不同 CPU 架构上运行的代码。</p>\n<blockquote>\n<p>Go汇编器所用的指令，一部分与目标机器的指令 一一对应，而另外一部分则不是。概括来说，特定于机器的指令会以他们的本尊出现， 然而对于一些通用的操作，如内存的移动以及子程序的调用以及返回通常都做了抽象。细 节因架构不同而不一样</p>\n</blockquote>\n<h2>链接过程</h2>\n<blockquote>\n<p>最后链接生成的可执行文件是分段的：例如数据段、代码段、BSS段等</p>\n</blockquote>\n<p>编译过程是针对单个文件进行的，文件与文件之间不可避免地要引用定义在其他模块的全局变量或者函数，这些变量或函数的地址只有在此阶段才能确定。</p>\n<p>链接过程就是要把编译器生成的一个个目标文件链接成可执行文件。最终得到的文件是分成各种段的，比如数据段、代码段、BSS段等等，运行时会被装载到内存中。各个段具有不同的读写、执行属性，保护了程序的安全运行。</p>\n<h2>汇编代码</h2>\n<blockquote>\n<p>参考: <a href=\"https://go-internals-cn.gitbook.io/go-internals/chapter1_assembly_primer\">https://go-internals-cn.gitbook.io/go-internals/chapter1_assembly_primer</a></p>\n</blockquote>\n<p>Go 编译器不会生成任何 PUSH/POP 族的指令: 栈的增长和收缩是通过在栈指针寄存器 <code>SP</code> 上分别执行减法和加法指令来实现的</p>\n<blockquote>\n<p>SP伪寄存器是虚拟的栈指针，用于引用帧局部变量以及为函数调用准备的参数。 它指向局部栈帧的顶部，所以应用应该使用负的偏移且范围在<code>[-framesize, 0): x-8(SP), y-4(SP)</code>, 等等。\n例如: <code>&quot;&quot;.b+12(SP)</code> 和 <code>&quot;&quot;.a+8(SP)</code> 分别指向栈的低 12 字节和低 8 字节位置(另外，栈是向低地址方向增长的)</p>\n</blockquote>\n<p><code>0x0000</code>: 表示指令相对于当前函数的偏移量</p>\n<p><code>TEXT</code>: 程序代码在运行期会放在内存的 .text 段中)的一部分，并表明跟在这个声明后的是函数的函数体。 在链接期，<code>&quot;&quot;</code> 这个空字符会被替换为当前的包名: 也就是说，<code>&quot;&quot;.add</code> 在链接到二进制文件后会变成 <code>main.add</code></p>\n<p><code>(SB)</code>: 虚拟寄存器，保存了静态基地址(static-base) 指针，即我们程序地址空间的开始地址。 <code>&quot;&quot;.add(SB)</code> 表明我们的符号位于某个固定的相对地址空间起始处的偏移位置 (最终是由链接器计算得到的)</p>\n<p><code>NOSPLIT</code>: 向编译器表明_不应该_插入 <em>stack-split</em> 的用来检查栈需要扩张的前导指令。在我们 <code>add</code> 函数的这种情况下，编译器自己帮我们插入了这个标记: 它足够聪明地意识到，由于 <code>add</code> 没有任何局部变量且没有它自己的栈帧，所以一定不会超出当前的栈；因此每次调用函数时在这里执行栈检查就是完全浪费 CPU 循环了。</p>\n<p><code>$0-16</code>: 其中<code>$0</code>代表即将分配的栈帧大小，而<code>$16</code>指定了调用方传入的参数大小</p>\n<p><code>FUNCDATA、PCDATA</code>: 包含有被垃圾回收所使用的信息，这些指令是编译器加入的</p>\n<p><code>ADDL</code>: 进行实际的加法操作，例如<code>0x0008 ADDL CX, AX</code>, 将<code>AX</code> 和 <code>CX</code> 寄存器中的值进行相加，然后再保存进 <code>AX</code> 寄存器中</p>\n<p><code>MOVL</code>: 将值移动到新的地址中，例如<code>0x000a MOVL AX, &quot;&quot;.~r2+16(SP)</code></p>\n<p><code>RET</code>: 告诉 Go 汇编器插入一些指令, 从子过程中返回时所需要的指令。 一般情况下这样的指令会使在 <code>0(SP)</code> 寄存器中保存的函数返回地址被 pop 出栈，并跳回到该地址</p>\n<p><code>SUBQ</code>: 例如<code>0x000f SUBQ $24, SP</code>, 分配了24字节的栈帧</p>\n<p><code>MOVQ</code>: 例如<code>0x0013 MOVQ BP, 16(SP)</code>, 不接收参数</p>\n<p><code>LEAQ</code>: 例如<code>0x0018 LEAQ 16(SP), BP</code>, 无返回值。跟着栈的增长，<code>LEAQ</code> 指令计算出帧指针的新地址，并将其存储到 <code>BP</code> 寄存器中</p>\n<h3>示例</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">//go:noinline</span>\nfunc <span class=\"hljs-title function_\">add</span>(a, b int32) (int32, bool) { <span class=\"hljs-keyword\">return</span> a + b, <span class=\"hljs-literal\">true</span> }\n\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">32</span>) }\n</code></pre><pre><code class=\"hljs language-bash\"><span class=\"hljs-number\">0x0000</span> <span class=\"hljs-variable constant_\">TEXT</span> <span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-variable constant_\">SB</span>), <span class=\"hljs-variable constant_\">NOSPLIT</span>, $0-<span class=\"hljs-number\">16</span>\n\n<span class=\"hljs-number\">0x0000</span> <span class=\"hljs-variable constant_\">FUNCDATA</span> $0, gclocals·<span class=\"hljs-title function_\">f207267fbf96a0178e8758c6e3e0ce28</span>(<span class=\"hljs-variable constant_\">SB</span>)\n\n<span class=\"hljs-number\">0x0000</span> <span class=\"hljs-variable constant_\">FUNCDATA</span> $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(<span class=\"hljs-variable constant_\">SB</span>)\n\n<span class=\"hljs-number\">0x0000</span> <span class=\"hljs-variable constant_\">MOVL</span> <span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-property\">b</span>+<span class=\"hljs-number\">12</span>(<span class=\"hljs-variable constant_\">SP</span>), <span class=\"hljs-variable constant_\">AX</span>\n\n<span class=\"hljs-number\">0x0004</span> <span class=\"hljs-variable constant_\">MOVL</span> <span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-property\">a</span>+<span class=\"hljs-number\">8</span>(<span class=\"hljs-variable constant_\">SP</span>), <span class=\"hljs-variable constant_\">CX</span>\n\n<span class=\"hljs-number\">0x0008</span> <span class=\"hljs-variable constant_\">ADDL</span> <span class=\"hljs-variable constant_\">CX</span>, <span class=\"hljs-variable constant_\">AX</span>\n\n<span class=\"hljs-number\">0x000a</span> <span class=\"hljs-variable constant_\">MOVL</span> <span class=\"hljs-variable constant_\">AX</span>, <span class=\"hljs-string\">&quot;&quot;</span>.~r2+<span class=\"hljs-number\">16</span>(<span class=\"hljs-variable constant_\">SP</span>)\n\n<span class=\"hljs-number\">0x000e</span> <span class=\"hljs-variable constant_\">MOVB</span> $1, <span class=\"hljs-string\">&quot;&quot;</span>.~r3+<span class=\"hljs-number\">20</span>(<span class=\"hljs-variable constant_\">SP</span>)\n\n<span class=\"hljs-number\">0x0013</span> <span class=\"hljs-variable constant_\">RET</span>\n\n\n<span class=\"hljs-number\">0x0000</span> <span class=\"hljs-variable constant_\">TEXT</span> <span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-title function_\">main</span>(<span class=\"hljs-variable constant_\">SB</span>), $24-<span class=\"hljs-number\">0</span> ;; ...omitted stack-split prologue...\n\n<span class=\"hljs-number\">0x000f</span> <span class=\"hljs-variable constant_\">SUBQ</span> $24, <span class=\"hljs-variable constant_\">SP</span>\n\n<span class=\"hljs-number\">0x0013</span> <span class=\"hljs-variable constant_\">MOVQ</span> <span class=\"hljs-variable constant_\">BP</span>, <span class=\"hljs-number\">16</span>(<span class=\"hljs-variable constant_\">SP</span>)\n\n<span class=\"hljs-number\">0x0018</span> <span class=\"hljs-variable constant_\">LEAQ</span> <span class=\"hljs-number\">16</span>(<span class=\"hljs-variable constant_\">SP</span>), <span class=\"hljs-variable constant_\">BP</span>\n\n<span class=\"hljs-number\">0x001d</span> <span class=\"hljs-variable constant_\">FUNCDATA</span> $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(<span class=\"hljs-variable constant_\">SB</span>)\n\n<span class=\"hljs-number\">0x001d</span> <span class=\"hljs-variable constant_\">FUNCDATA</span> $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(<span class=\"hljs-variable constant_\">SB</span>)\n\n<span class=\"hljs-number\">0x001d</span> <span class=\"hljs-variable constant_\">MOVQ</span> $137438953482, <span class=\"hljs-variable constant_\">AX</span>\n\n<span class=\"hljs-number\">0x0027</span> <span class=\"hljs-variable constant_\">MOVQ</span> <span class=\"hljs-variable constant_\">AX</span>, (<span class=\"hljs-variable constant_\">SP</span>)\n\n<span class=\"hljs-number\">0x002b</span> <span class=\"hljs-variable constant_\">PCDATA</span> $0, $0\n\n<span class=\"hljs-number\">0x002b</span> <span class=\"hljs-variable constant_\">CALL</span> <span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-variable constant_\">SB</span>)\n\n<span class=\"hljs-number\">0x0030</span> <span class=\"hljs-variable constant_\">MOVQ</span> <span class=\"hljs-number\">16</span>(<span class=\"hljs-variable constant_\">SP</span>), <span class=\"hljs-variable constant_\">BP</span>\n\n<span class=\"hljs-number\">0x0035</span> <span class=\"hljs-variable constant_\">ADDQ</span> $24, <span class=\"hljs-variable constant_\">SP</span>\n\n<span class=\"hljs-number\">0x0039</span> <span class=\"hljs-variable constant_\">RET</span>\n\n;; ...omitted stack-split epilogue...\n</code></pre><pre><code class=\"hljs language-bash\">   |    +-------------------------+ &lt;-- <span class=\"hljs-number\">32</span>(SP)\n   |    |                         |\n G |    |                         |\n R |    |                         |\n O |    | main.main<span class=\"hljs-number\">&#x27;</span>s saved       |\n W |    |     frame-<span class=\"hljs-built_in\">pointer</span> (BP)  |\n S |    |-------------------------| &lt;-- <span class=\"hljs-number\">24</span>(SP)\n   |    |      [alignment]        |\n D |    | <span class=\"hljs-string\">&quot;&quot;</span>.~<span class=\"hljs-built_in\">r3</span> (<span class=\"hljs-type\">bool</span>) = <span class=\"hljs-number\">1</span>/<span class=\"hljs-literal\">true</span>  | &lt;-- <span class=\"hljs-number\">21</span>(SP)\n O |    |-------------------------| &lt;-- <span class=\"hljs-number\">20</span>(SP)\n W |    |                         |\n N |    | <span class=\"hljs-string\">&quot;&quot;</span>.~<span class=\"hljs-built_in\">r2</span> (int32) = <span class=\"hljs-number\">42</span>     |\n W |    |-------------------------| &lt;-- <span class=\"hljs-number\">16</span>(SP)\n A |    |                         |\n R |    | <span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-built_in\">b</span> (int32) = <span class=\"hljs-number\">32</span>       |\n D |    |-------------------------| &lt;-- <span class=\"hljs-number\">12</span>(SP)\n S |    |                         |\n   |    | <span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-built_in\">a</span> (int32) = <span class=\"hljs-number\">10</span>       |\n   |    |-------------------------| &lt;-- <span class=\"hljs-number\">8</span>(SP)\n   |    |                         |\n   |    |                         |\n   |    |                         |\n \\ | /  | <span class=\"hljs-keyword\">return</span> address to       |\n  \\|/   |     main.main + <span class=\"hljs-number\">0x30</span>    |\n   -    +-------------------------+ &lt;-- <span class=\"hljs-number\">0</span>(SP) (TOP OF STACK)\n\n(diagram made with https:<span class=\"hljs-comment\">//textik.com)</span>\n</code></pre><h3>调用栈</h3>\n<p>由于 Go 程序中的 goroutine 数目是不可确定的，并且实际场景可能会有百万级别的 goroutine，runtime 必须使用保守的思路来给 goroutine 分配空间以避免吃掉所有的可用内存。</p>\n<p>也由于此，每个新的 goroutine 会被 runtime 分配初始为 2KB 大小的栈空间(Go 的栈在底层实际上是分配在堆空间上的)。</p>\n<p>随着一个 goroutine 进行自己的工作，可能会超出最初分配的栈空间限制(就是栈溢出的意思)。 为了防止这种情况发生，runtime 确保 goroutine 在超出栈范围时，会创建一个相当于原来两倍大小的新栈，并将原来栈的上下文拷贝到新栈上。 这个过程被称为 <em>栈分裂</em>(stack-split)，这样使得 goroutine 栈能够动态调整大小。</p>\n<p><em>栈分裂</em></p>\n<blockquote>\n<p>这样就形成了一个反馈循环，使我们的栈在没有达到饥饿的 goroutine 要求之前不断地进行空间扩张。</p>\n</blockquote>\n<p>为了使栈分裂正常工作，编译器会在每一个函数的开头和结束位置插入指令来防止 goroutine 爆栈。 像我们本章早些看到的一样，为了避免不必要的开销，一定不会爆栈的函数会被标记上 <code>NOSPLIT</code> 来提示编译器不要在这些函数的开头和结束部分插入这些检查指令。</p>\n<pre><code class=\"hljs language-bash\">;; stack-split prologue <span class=\"hljs-comment\">// 会检查当前 goroutine 是否已经用完了所有的空间，然后如果确实用完了的话，会直接跳转到后部</span>\n\n...\n\n;; stack-split epilogue <span class=\"hljs-comment\">// 会触发栈增长(stack-growth)，然后再跳回到前部</span>\n</code></pre><h3>函数调用</h3>\n<p>函数调用会被翻译成直接跳转指令，目标是 <code>.text</code> 段的全局函数符号，参数和返回值会被存储在发起调用者的栈帧上。</p>\n<p>顶层函数的直接调用： 对顶层函数的直接调用会通过栈来传递所有参数，并期望返回值占据连续的栈位置。</p>\n<p>对方法的调用(无论 receiver 是值类型还是指针类型)和对函数的调用是相同的，唯一的区别是 receiver 会被当作第一个参数传入</p>\n<p>receiver 是值类型，且编译器能够通过静态分析推测出其值，这种情况下编译器认为不需要对值从它原来的位置(<code>28(SP)</code>)进行拷贝了: 相应的，只要简单的在栈上创建一个新的和 <code>Adder</code> 相等的值，把这个操作和传第二个参数的操作进行捆绑，还可以节省一条汇编指令。</p>\n<p>如果 receiver 在栈上，且 receiver 本身很小，这种情况只需要很少的汇编指令就可以将其值拷贝到栈顶然后再对 <code>&quot;&quot;.Adder.AddVal</code> 进行一次直接的方法调用</p>\n<p>receiver 逃逸到堆上的话，编译器需要用更聪明的过程来解决问题了: 先生成一个新方法(该方法 receiver 为指针类型，原始方法 receiver 为值类型)，然后用新方法包装原来的 <code>&quot;&quot;.Adder.AddVal</code>，然后将对原始方法<code>&quot;&quot;.Adder.AddVal</code>的调用替换为对新方法 <code>&quot;&quot;.(*Adder).AddVal</code> 的调用。 包装方法唯一的任务，就是保证 receiver 被正确的解引用，并将解引用后的值和其它参数以及返回值在原始方法和调用方法之间拷贝来拷贝去。</p>\n","frontMatter":{"readingTime":{"text":"25 min read","minutes":24.425,"time":1465500,"words":4885},"slug":"Go的编译原理","fileName":"Go的编译原理.md","title":"golang编译原理","date":"2022-10-10T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"golang编译原理"}},"prev":{"title":"golang命令工具","date":"2022-10-10T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"golang命令工具","slug":"go命令工具"},"next":{"title":"容器的操作指南","date":"2022-10-17T00:00:00.000Z","tags":["容器"],"draft":false,"summary":"容器的操作指南","slug":"容器操作指南"}},"__N_SSG":true}