{"pageProps":{"post":{"mdxSource":"<blockquote>\n<p>参考: <a href=\"https://hyper0x.github.io/go_command_tutorial/#/0.1\">https://hyper0x.github.io/go_command_tutorial/#/0.1</a></p>\n</blockquote>\n<h1>内置工具</h1>\n<h2>env</h2>\n<p>通用环境变量</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CGO_ENABLED</td>\n<td>指明cgo工具是否可用的标识。</td>\n</tr>\n<tr>\n<td>GOARCH</td>\n<td>程序构建环境的目标计算架构。</td>\n</tr>\n<tr>\n<td>GOBIN</td>\n<td>存放可执行文件的目录的绝对路径。</td>\n</tr>\n<tr>\n<td>GOCHAR</td>\n<td>程序构建环境的目标计算架构的单字符标识。</td>\n</tr>\n<tr>\n<td>GOEXE</td>\n<td>可执行文件的后缀。</td>\n</tr>\n<tr>\n<td>GOHOSTARCH</td>\n<td>程序运行环境的目标计算架构。</td>\n</tr>\n<tr>\n<td>GOOS</td>\n<td>程序构建环境的目标操作系统。</td>\n</tr>\n<tr>\n<td>GOHOSTOS</td>\n<td>程序运行环境的目标操作系统。</td>\n</tr>\n<tr>\n<td>GOPATH</td>\n<td>工作区目录的绝对路径。</td>\n</tr>\n<tr>\n<td>GORACE</td>\n<td>用于数据竞争检测的相关选项。</td>\n</tr>\n<tr>\n<td>GOROOT</td>\n<td>Go语言的安装目录的绝对路径。</td>\n</tr>\n<tr>\n<td>GOTOOLDIR</td>\n<td>Go工具目录的绝对路径。</td>\n</tr>\n<tr>\n<td>GODEBUG</td>\n<td>调试相关</td>\n</tr>\n<tr>\n<td>GOPROXY</td>\n<td>拉取代码相关</td>\n</tr>\n<tr>\n<td>GOINSECURE</td>\n<td>拉取代码相关，私有仓库，允许http</td>\n</tr>\n<tr>\n<td>GONOPROXY</td>\n<td>拉取代码相关，私有仓库，不使用代理</td>\n</tr>\n<tr>\n<td>GONOSUMDB</td>\n<td>拉取代码相关，私有仓库, 不做sumdb安全校验</td>\n</tr>\n<tr>\n<td>GOPRIVATE</td>\n<td>拉取代码相关，私有仓库,仓库地址</td>\n</tr>\n<tr>\n<td>GOSUMDB</td>\n<td>可以配置使用哪个校验服务器和公钥来做依赖包的校验</td>\n</tr>\n</tbody></table>\n<ul>\n<li>获取GC日志: <code>GODEBUG=gctrace=1 go run . | grep gc</code></li>\n<li>不使用缓存: <code>GOPROXY=https://goproxy.io,direct go get ...</code></li>\n</ul>\n<p>sumdb相关知识:  Go module checksum database。服务器地址为sum.golang.org，保证你的库没有被别人篡改过，否则会给安全提示</p>\n<p>如果设置了 GOSUMDB 为 “off” 或者使用 go get 的时候启用了 <code>-insecure</code> 参数，Go 不会去对下载的依赖包做安全校验</p>\n<p>如果你的代码仓库或者模块是私有的，那么它的校验值不应该出现在互联网的公有数据库里面，但是我们本地编译的时候默认所有的依赖下载都会去尝试做校验，这样不仅会校验失败，更会泄漏一些私有仓库的路径等信息，我们可以使用 <code>GONOSUMDB</code> 这个环境变量来设置不做校验的代码仓库， 它可以设置多个匹配路径</p>\n<h2>基础flags</h2>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-asmflags</td>\n<td>可以跟上<code>-D -I -s</code>等用于控制Go语言编译器编译汇编语言文件时的行为</td>\n</tr>\n<tr>\n<td>-buildmode</td>\n<td>指定编译模式，例如静态链接库<code>.a</code>, 动态链接库<code>.so</code>, 可执行文件<code>.exe</code>等</td>\n</tr>\n<tr>\n<td>-compiler</td>\n<td>指定编译器的名称，默认为gc(go自带的编辑器)</td>\n</tr>\n<tr>\n<td>-gccgoflags</td>\n<td>指定需要传递给gccgo编译器或链接器的标记的列表</td>\n</tr>\n<tr>\n<td>-gcflags</td>\n<td>传递给<code>go tool compile</code>的标记的列表</td>\n</tr>\n<tr>\n<td>-installsuffix</td>\n<td>设置输出目录</td>\n</tr>\n<tr>\n<td>-ldflags</td>\n<td>传递给<code>go tool link</code>的标记的列表</td>\n</tr>\n<tr>\n<td>-linkshared</td>\n<td>与<code>-buildmode=shared</code>一起使用</td>\n</tr>\n<tr>\n<td>-pkgdir</td>\n<td>指定目录，编译器只从这里加载归档文件<code>.a</code></td>\n</tr>\n<tr>\n<td>-tags</td>\n<td>指定实际编译期间使用的编译标签(约束)</td>\n</tr>\n<tr>\n<td>--toolexec</td>\n<td>自定义vet、asm等</td>\n</tr>\n</tbody></table>\n<h2>build</h2>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>强行对所有涉及到的代码包（包含标准库中的代码包）进行重新构建，即使它们已经是最新的了。</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>打印编译期间所用到的其它命令，但是并不真正执行它们。</td>\n</tr>\n<tr>\n<td>-p n</td>\n<td>指定编译过程中执行各任务的并行数量（确切地说应该是并发数量）。在默认情况下，该数量等于CPU的逻辑核数。但是在<code>darwin/arm</code>平台（即iPhone和iPad所用的平台）下，该数量默认是<code>1</code>。</td>\n</tr>\n<tr>\n<td>-race</td>\n<td>开启竞态条件的检测。不过此标记目前仅在<code>linux/amd64</code>、<code>freebsd/amd64</code>、<code>darwin/amd64</code>和<code>windows/amd64</code>平台下受到支持。</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>打印出那些被编译的代码包的名字。</td>\n</tr>\n<tr>\n<td>-work</td>\n<td>打印出编译时生成的临时工作目录的路径，并在编译结束时保留它。在默认情况下，编译结束时会删除该目录。</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>打印编译期间所用到的其它命令。注意它与<code>-n</code>标记的区别。</td>\n</tr>\n</tbody></table>\n<h3>条件编译</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">//go:build !windows</span>\n\n<span class=\"hljs-comment\">//go:build windows</span>\n</code></pre><p><code>go build -tags tag1 tag2</code></p>\n<h2>install</h2>\n<h2>get</h2>\n<p><code>go get</code>命令不仅可以从像Github这样著名的代码托管站点上下载代码包，还可以从任何命令支持的代码版本控制系统（英文为Version Control System，简称为VCS）检出代码包。任何代码托管站点都是通过某个或某些代码版本控制系统来提供代码上传下载服务的。所以，更严格地讲，<code>go get</code>命令所做的是从代码版本控制系统的远程仓库中检出/更新代码包并对其进行编译和安装。</p>\n<p><code>go get</code>命令可以接受所有可用于<code>go build</code>命令和<code>go install</code>命令的标记。这是因为<code>go get</code>命令的内部步骤中完全包含了编译和安装这两个动作。另外，<code>go get</code>命令还有一些特有的标记</p>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>让命令程序只执行下载动作，而不执行安装动作。</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>仅在使用<code>-u</code>标记时才有效。该标记会让命令程序忽略掉对已下载代码包的导入路径的检查。如果下载并安装的代码包所属的项目是你从别人那里Fork过来的，那么这样做就尤为重要了。</td>\n</tr>\n<tr>\n<td>-fix</td>\n<td>让命令程序在下载代码包后先执行修正动作，而后再进行编译和安装。</td>\n</tr>\n<tr>\n<td>-insecure</td>\n<td>允许命令程序使用非安全的scheme（如HTTP）去下载指定的代码包。如果你用的代码仓库（如公司内部的Gitlab）没有HTTPS支持，可以添加此标记。请在确定安全的情况下使用它。</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>让命令程序同时下载并安装指定的代码包中的测试源码文件中依赖的代码包。</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>让命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。</td>\n</tr>\n</tbody></table>\n<h2>clean</h2>\n<p>删除其他命令执行生成的文件</p>\n<h2>doc</h2>\n<p>打印go源码中的文档</p>\n<p>godoc内置的工具，支持http查看</p>\n<h2>run</h2>\n<h2>test</h2>\n<p><code>go test</code>命令的标记处理部分是庞大且繁杂的，以至于使Go语言的开发者们不得不把这一部分的逻辑从<code>go test</code>命令程序主体中分离出来并建立单独的源码文件。因为<code>go test</code>命令中包含了编译动作，所以它可以接受可用于<code>go build</code>命令的所有标记。另外，它还有很多特有的标记。这些标记的用于控制命令本身的动作，有的用于控制和设置测试的过程和环境，还有的用于生成更详细的测试结果和统计信息。</p>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>生成用于运行测试的可执行文件，但不执行它。这个可执行文件会被命名为“pkg.test”，其中的“pkg”即为被测试代码包的导入路径的最后一个元素的名称。</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>安装/重新安装运行测试所需的依赖包，但不编译和运行测试代码。</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>指定用于运行测试的可执行文件的名称。追加该标记不会影响测试代码的运行，除非同时追加了标记<code>-c</code>或<code>-i</code>。</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示测试用例的输出结果</td>\n</tr>\n<tr>\n<td>-cover</td>\n<td>查看代码覆盖率</td>\n</tr>\n<tr>\n<td>--race</td>\n<td>竞态检查</td>\n</tr>\n<tr>\n<td>-run</td>\n<td>指定运行的测试代码规则</td>\n</tr>\n<tr>\n<td>-bench</td>\n<td>执行Bench基准测试代码</td>\n</tr>\n<tr>\n<td>-example</td>\n<td>执行Example示例代码</td>\n</tr>\n</tbody></table>\n<h2>list</h2>\n<p>列出代码包信息</p>\n<h2>fmt</h2>\n<p>gofmt内置工具</p>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-cpuprofile</td>\n<td>把CPU概要写入指定文件。文件的路径应该作为此标记的值。</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>显示格式化前后的不同（如果有的话），而不是直接格式化那些代码。</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>报告目标源码文件中的所有错误。默认情况下，仅会显示前10个错误。</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>仅把那些不符合格式化规范的、需要被命令程序改写的源码文件的绝对路径打印到标准输出。而不是把改写后的全部内容都打印到标准输出。</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>添加形如<code>a[b:len(a)] -&gt; a[b:]</code>的重写规则。如果我们需要自定义某些额外的格式化规则，就需要用到它。规则字符串应该作为此标记的值。</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>简化文件中的代码。</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。</td>\n</tr>\n</tbody></table>\n<h2>fix</h2>\n<p>把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码</p>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-diff</td>\n<td>不将修正后的内容写入文件，而只打印修正前后的内容的对比信息到标准输出。</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>只对目标源码文件做有限的修正操作。该标记的值即为允许的修正操作的名称。多个名称之间用英文半角逗号分隔。</td>\n</tr>\n<tr>\n<td>-force</td>\n<td>使用此标记后，即使源码文件中的代码已经与Go语言的最新版本相匹配了，也会强行执行指定的修正操作。该标记的值就是需要强行执行的修正操作的名称，多个名称之间用英文半角逗号分隔。</td>\n</tr>\n</tbody></table>\n<h2>vet</h2>\n<p>检查Go语言源码中静态错误的简单工具</p>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-all</td>\n<td>进行全部检查。如果有其他检查标记被设置，则命令程序会将此值变为false。默认值为true。</td>\n</tr>\n<tr>\n<td>-asmdecl</td>\n<td>对汇编语言的源码文件进行检查。默认值为false。</td>\n</tr>\n<tr>\n<td>-assign</td>\n<td>检查赋值语句。默认值为false。</td>\n</tr>\n<tr>\n<td>-atomic</td>\n<td>检查代码中对代码包sync/atomic的使用是否正确。默认值为false。</td>\n</tr>\n<tr>\n<td>-buildtags</td>\n<td>检查编译标签的有效性。默认值为false。</td>\n</tr>\n<tr>\n<td>-composites</td>\n<td>检查复合结构实例的初始化代码。默认值为false。</td>\n</tr>\n<tr>\n<td>-compositeWhiteList</td>\n<td>是否使用复合结构检查的白名单。仅供测试使用。默认值为true。</td>\n</tr>\n<tr>\n<td>-methods</td>\n<td>检查那些拥有标准命名的方法的签名。默认值为false。</td>\n</tr>\n<tr>\n<td>-printf</td>\n<td>检查代码中对打印函数的使用是否正确。默认值为false。</td>\n</tr>\n<tr>\n<td>-printfuncs</td>\n<td>需要检查的代码中使用的打印函数的名称的列表，多个函数名称之间用英文半角逗号分隔。默认值为空字符串。</td>\n</tr>\n<tr>\n<td>-rangeloops</td>\n<td>检查代码中对在<code>range</code>语句块中迭代赋值的变量的使用是否正确。默认值为false。</td>\n</tr>\n<tr>\n<td>-structtags</td>\n<td>检查结构体类型的字段的标签的格式是否标准。默认值为false。</td>\n</tr>\n<tr>\n<td>-unreachable</td>\n<td>查找并报告不可到达的代码。默认值为false。</td>\n</tr>\n</tbody></table>\n<h2>generator</h2>\n<p>生成代码，例如在代码中加入如下注释</p>\n<p><code>//go:generator go-bindata -o=./router/asset.go -pkg=router ./bdlog/...</code></p>\n<p>go generator即可生成</p>\n<h2>tool compile</h2>\n<p>gcflags中标记&quot;all=-N -l&quot; 表示对所有包的编译应用 -N 和 -l。</p>\n<p>执行 go tool compile --help 可以看到 -N 和 -l 的作用:</p>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-N</td>\n<td>disable optimizations # 禁用优化</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>disable inlining # 禁用内联优化</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>打印汇编指令</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>打印优化结果，可以用于分析逃逸分析</td>\n</tr>\n</tbody></table>\n<p><code>go tool compile -N -l -S hello.go</code>: 编译为汇编</p>\n<p><code>//go:noinline</code></p>\n<blockquote>\n<p>Compiler Explorer在线工具可以在线编译查看</p>\n</blockquote>\n<h2>tool link</h2>\n<p>在构建 release 包时我们通常会加上 ldflags 参数：-ldflags &#39;-w -s&#39;。ldflags 给链接器传递参数，-w 将可执行文件体积缩小近 20 %。Delve 依赖于 DWARF 信息，因此如果想用 Delve 进行调试，就不能使用 -w 参数。</p>\n<p>用 go tool link --help 查看 -w 和 -s 作用。</p>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-s</td>\n<td>disable symbol table # 不使用符号表</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>disable DWARF generation # 不生成 DWARF 信息</td>\n</tr>\n</tbody></table>\n<h2>tool pprof</h2>\n<p>pprof性能分析</p>\n<table>\n<thead>\n<tr>\n<th>标记名称</th>\n<th>标记描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-cpuprofile</td>\n<td>指定CPU概要文件的保存路径。该路径可以是相对路径也可以是绝对路径，但其父路径必须已存在。</td>\n</tr>\n<tr>\n<td>-blockprofile</td>\n<td>指定程序阻塞概要文件的保存路径。该路径可以是相对路径也可以是绝对路径，但其父路径必须已存在。</td>\n</tr>\n<tr>\n<td>-blockprofilerate</td>\n<td>定义其值为n。此标记指定每发生n次Goroutine阻塞事件时，进行一次取样操作。</td>\n</tr>\n<tr>\n<td>-memprofile</td>\n<td>指定内存概要文件的保存路径。该路径可以是相对路径也可以是绝对路径，但其父路径必须已存在。</td>\n</tr>\n<tr>\n<td>-memprofilerate</td>\n<td>定义其值为n。此标记指定每分配n个字节的堆内存时，进行一次取样操作。</td>\n</tr>\n</tbody></table>\n<p>交互工具支持 gv、web、list....</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># 下载cpu profile，默认从当前开始收集30s的cpu使用情况，需要等待30s</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/profile</span>   <span class=\"hljs-comment\"># 30-second CPU profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/profile?seconds=120</span>     <span class=\"hljs-comment\"># wait 120s</span>\n\n<span class=\"hljs-comment\"># 下载heap profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/heap</span>      <span class=\"hljs-comment\"># heap profile</span>\n\n<span class=\"hljs-comment\"># 下载goroutine profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/goroutine</span> <span class=\"hljs-comment\"># goroutine profile</span>\n\n<span class=\"hljs-comment\"># 下载block profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/block</span>     <span class=\"hljs-comment\"># goroutine blocking profile</span>\n\n<span class=\"hljs-comment\"># 下载mutex profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/mutex</span>\n</code></pre><p>使用上面的命令下载了信息到本地之后就可以进入交互模式，查看运行信息，比较常用的命令是top、list、traces</p>\n<p>也可以使用curl将接口返回的信息保存在<code>.out</code>中，然后使用<code>go tool trace trace.out</code>进行分析</p>\n<p>或者可以在执行单元测试时指定输出<code>go test -cpuprofile cpu.prof -memprofile mem.prof -bench .</code>，然后对其进行分析。</p>\n<h3>top</h3>\n<p>按指标大小列出前10个函数，比如内存是按内存占用多少，CPU是按执行时间多少。</p>\n<ul>\n<li>flat: 本函数占用的内存量</li>\n<li>flat%: 本函数内存占使用中内存总量的百分比</li>\n<li>sum%: 前面每一行flat百分比的和</li>\n<li>cum: 子函数的占用量也会递归的计算出来</li>\n<li>cum%: 累计量占总量的百分比</li>\n</ul>\n<h3>list</h3>\n<p>查看某个函数的代码，以及该函数每行代码的指标信息，如果函数名不明确，会进行模糊匹配，比如<code>list main</code>会列出<code>main.main</code>和<code>runtime.main</code>。</p>\n<h3>traces</h3>\n<p>打印所有调用栈，以及调用栈的指标信息。</p>\n<h2>tool cgo</h2>\n<p>以使我们创建能够调用C语言代码的Go语言源码文件。这使得我们可以使用Go语言代码去封装一些C语言的代码库，并提供给Go语言代码或项目使用。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-cdefs</td>\n<td>false</td>\n<td>将改写后的源码内容以C定义模式打印到标准输出，而不生成相关的源码文件。</td>\n</tr>\n<tr>\n<td>-godefs</td>\n<td>false</td>\n<td>将改写后的源码内容以Go定义模式打印到标准输出，而不生成相关的源码文件。</td>\n</tr>\n<tr>\n<td>-objdir</td>\n<td>&quot;&quot;</td>\n<td>gcc编译的目标文件所在的路径。若未自定义则为当前目录下的_obj子目录。</td>\n</tr>\n<tr>\n<td>-dynimport</td>\n<td>&quot;&quot;</td>\n<td>如果值不为空字符串，则打印为其值所代表的文件生成的动态导入数据到标准输出。</td>\n</tr>\n<tr>\n<td>-dynlinker</td>\n<td>false</td>\n<td>记录在dynimport模式下的动态链接器信息。</td>\n</tr>\n<tr>\n<td>-dynout</td>\n<td>&quot;&quot;</td>\n<td>将-dynimport的输出（如果有的话）写入到其值所代表的文件中。</td>\n</tr>\n<tr>\n<td>-gccgo</td>\n<td>false</td>\n<td>生成可供gccgo编译器使用的文件。</td>\n</tr>\n<tr>\n<td>-gccgopkgpath</td>\n<td>&quot;&quot;</td>\n<td>对应于gccgo编译器的-fgo-pkgpath选项。</td>\n</tr>\n<tr>\n<td>-gccgoprefix</td>\n<td>&quot;&quot;</td>\n<td>对应于gccgo编译器的-fgo-prefix选项。</td>\n</tr>\n<tr>\n<td>-debug-define</td>\n<td>false</td>\n<td>打印相关的指令符#defines及其后续内容到标准输出。</td>\n</tr>\n<tr>\n<td>-debug-gcc</td>\n<td>false</td>\n<td>打印gcc调用信息到标准输出。</td>\n</tr>\n<tr>\n<td>-import_runtime_cgo</td>\n<td>true</td>\n<td>在生成的代码中加入语句“import runtime/cgo”。</td>\n</tr>\n<tr>\n<td>-import_syscall</td>\n<td>true</td>\n<td>在生成的代码中加入语句“import syscall”。</td>\n</tr>\n</tbody></table>\n<h2>tool dist</h2>\n<p><code>go tool dist list</code> 查看支持编译的<code>GOOS/GOARCH</code></p>\n<h2>tool trace</h2>\n<p>可以用来分析gc情况</p>\n<p><code>GODEBUG=gctrace=1 go run main.go | grep gc</code></p>\n<p><code>gc 1 @0.000s 2%: 0.009+0.23+0.004 ms clock, 0.11+0.083/0.019/0.14+0.049 ms cpu, 4-&gt;6-&gt;2 MB, 5 MB goal, 12 P</code></p>\n<p>golang将GC过程分为多个步骤，其中一些步骤（mark、sweep）是可以和任务goroutine并发执行的。目的是尽可能减少需要完全停止任务运行（stop the world）的时间。</p>\n<ul>\n<li>如果gcstoptheworld=1则标记（mark）阶段会完全停止任务运行</li>\n<li>如果gcstoptheworld=2则标记（mark）和清除（sweep）阶段都会完全停止任务运行。</li>\n<li>默认情况下，debug.gcstoptheworld=0。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gc 2</td>\n<td>第二个 GC 周期</td>\n</tr>\n<tr>\n<td>0.001</td>\n<td>程序开始后的 0.001 秒</td>\n</tr>\n<tr>\n<td>2%</td>\n<td>该 GC 周期中 CPU 的使用率</td>\n</tr>\n<tr>\n<td>0.018</td>\n<td>标记开始时， STW 所花费的时间（wall clock）</td>\n</tr>\n<tr>\n<td>1.1</td>\n<td>标记过程中，并发标记所花费的时间（wall clock）</td>\n</tr>\n<tr>\n<td>0.029</td>\n<td>标记终止时， STW 所花费的时间（wall clock）</td>\n</tr>\n<tr>\n<td>0.22</td>\n<td>标记开始时， STW 所花费的时间（cpu time）</td>\n</tr>\n<tr>\n<td>0.047</td>\n<td>标记过程中，标记辅助所花费的时间（cpu time）</td>\n</tr>\n<tr>\n<td>0.074</td>\n<td>标记过程中，并发标记所花费的时间（cpu time）</td>\n</tr>\n<tr>\n<td>0.048</td>\n<td>标记过程中，GC 空闲的时间（cpu time）</td>\n</tr>\n<tr>\n<td>0.34</td>\n<td>标记终止时， STW 所花费的时间（cpu time）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>标记开始时，堆的大小的实际值</td>\n</tr>\n<tr>\n<td>7</td>\n<td>标记结束时，堆的大小的实际值</td>\n</tr>\n<tr>\n<td>3</td>\n<td>标记结束时，标记为存活的对象大小</td>\n</tr>\n<tr>\n<td>5</td>\n<td>标记结束时，堆的大小的预测值</td>\n</tr>\n<tr>\n<td>12</td>\n<td>P 的数量</td>\n</tr>\n</tbody></table>\n<h1>远程调试</h1>\n<p>使用dlv启动编译好的程序，然后在本地的ide进行远程调试的配置</p>\n<p><code>go install github.com/go-delve/delve/cmd/dlv@latest</code></p>\n<p>如果远端没有go环境，没有安装dlv，可以在本地编译打包好后上传到远端服务器</p>\n<pre><code class=\"hljs language-bash\">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build  \nCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build\n</code></pre><p><code>go build -gcflags &quot;all=-N -l&quot; main.go</code>  , 添加-N, -l禁用优化与内联优化</p>\n<p>启用dlv到运行的进程，然后本地的ide进行配置后即可调试(原理是dlv利用编译好的程序中的DWARF信息，然后ide与dlv进行rpc通信，知道当前执行到哪个文件的哪一行，以及控制执行下一步等操作)</p>\n<pre><code class=\"hljs language-bash\">Dlv debug (当前位置)\n\nDlv <span class=\"hljs-built_in\">exec</span> [二进制文件名]\n\nDlv attach [pid]\n\ndebug, <span class=\"hljs-built_in\">exec</span>, attach 都支持从远程操控，只需为 dlv 命令加上下述参数：\n\n--listen=:<span class=\"hljs-number\">2345</span> --headless=true --api-version=<span class=\"hljs-number\">2</span> --accept-multiclient\n\n启动的参数有一个--accept-multiclient 的参数，删除掉就能退出了\n</code></pre><p>对于容器，在编译的时候把dlv加入到容器中，然后执行<code>dlv exec 二进制文件</code></p>\n<p>attach 1为什么不能执行暂时不知道, <code>ps -ef |grep 进程名字</code>, 发现并不一定是，有时候命令会传入额外参数，有可能变成其他的子进程id了, <code>ps -C 进程名字 -o pid | sed -n 2p</code>来查看pid)，不过需要在docker启动中添加<code>--privileged --security-opt=&quot;seccomp=unconfined&quot;</code>才能进行调试</p>\n<p>然后执行<code>docker exec -it 容器名称 sh -c &quot;./dlv attach \\$(ps -C 进程名称 -o pid | sed -n 2p) --listen=:2345 --headless=true --api-version=2 --accept-multiclient&quot;</code></p>\n<pre><code class=\"hljs language-go\">{\n    <span class=\"hljs-attr\">&quot;version&quot;:</span> <span class=\"hljs-string\">&quot;0.2.0&quot;</span>,\n    <span class=\"hljs-attr\">&quot;configurations&quot;:</span> [\n        {\n            <span class=\"hljs-attr\">&quot;name&quot;:</span> <span class=\"hljs-string\">&quot;container debug&quot;</span>,\n            <span class=\"hljs-attr\">&quot;type&quot;:</span> <span class=\"hljs-string\">&quot;go&quot;</span>,\n            <span class=\"hljs-attr\">&quot;request&quot;:</span> <span class=\"hljs-string\">&quot;attach&quot;</span>,\n            <span class=\"hljs-attr\">&quot;mode&quot;:</span> <span class=\"hljs-string\">&quot;remote&quot;</span>,\n            <span class=\"hljs-attr\">&quot;remotePath&quot;:</span> <span class=\"hljs-string\">&quot;/usr/src/code&quot;</span>, <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">must</span> <span class=\"hljs-string\">the</span> <span class=\"hljs-string\">container</span> <span class=\"hljs-string\">code</span> <span class=\"hljs-string\">path</span>\n            <span class=\"hljs-attr\">&quot;port&quot;:</span> <span class=\"hljs-number\">2345</span>,\n            <span class=\"hljs-attr\">&quot;host&quot;:</span> <span class=\"hljs-string\">&quot;127.0.0.1,\n        }\n    ]\n}</span>\n</code></pre><p>另外如果attacth端口，该程序除了不能禁用符号表和drawf表(即使用<code>-ldflags=&quot;-w -s&quot;</code>)以外，还必须是build之后</p>\n","frontMatter":{"readingTime":{"text":"28 min read","minutes":27.12,"time":1627200,"words":5424},"slug":"go命令工具","fileName":"go命令工具.md","title":"golang命令工具","date":"2022-10-10T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"golang命令工具"}},"prev":{"title":"golang编程中常见的问题","date":"2022-10-10T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"golang编程中常见的问题","slug":"常见编码问题"},"next":{"title":"golang编译原理","date":"2022-10-10T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"golang编译原理","slug":"Go的编译原理"}},"__N_SSG":true}