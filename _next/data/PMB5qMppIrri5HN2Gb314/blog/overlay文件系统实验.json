{"pageProps":{"post":{"mdxSource":"<h1>实验</h1>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># !/bin/bash</span>\n\nsudo umount ./merged\nrm -rf upper lower merged work\n\nmkdir upper lower merged work\necho <span class=\"hljs-string\">&quot;I&#x27;m from lower!&quot;</span> &gt; lower/in_lower.txt\necho <span class=\"hljs-string\">&quot;I&#x27;m from upper!&quot;</span> &gt; upper/in_upper.txt\n<span class=\"hljs-comment\"># `in_both` is in both directories</span>\necho <span class=\"hljs-string\">&quot;I&#x27;m from lower!&quot;</span> &gt; lower/in_both.txt\necho <span class=\"hljs-string\">&quot;I&#x27;m from upper!&quot;</span> &gt; upper/in_both.txt\n</code></pre><p>当前文件目录结构</p>\n<pre><code class=\"hljs language-bash\">├── lower\n│   ├── in_both.txt\n│   └── in_lower.txt\n├── merged\n├── upper\n│   ├── in_both.txt\n│   └── in_upper.txt\n└── work\n\n4 directories, 4 files\n</code></pre><p>使用overlay文件系统来挂载目录</p>\n<pre><code class=\"hljs language-bash\">sudo mount -t overlay overlay \\\n -o lowerdir=./lower,upperdir=./upper,workdir=./work \\\n ./merged\n</code></pre><p>OverlayFS 就是 UnionFS 的一种实现，最底下这一层里的文件是不会被修改的,upper目录是可读写的，最上面的&quot;merged&quot; ，它是挂载点（mount point）目录，也是用户看到的目录，用户的实际文件操作在这里进行。</p>\n<img src=\"/images/blogs/overlayfs.jpeg\" />\n\n<p><code>1、新建文件</code></p>\n<p>这个文件会出现在 upper/ 目录中</p>\n<pre><code class=\"hljs language-bash\">$touch merged/newfile.txt\n\n$tree\n├── lower\n│   ├── in_both.txt\n│   └── in_lower.txt\n├── merged\n│   ├── in_both.txt\n│   ├── in_lower.txt\n│   ├── in_upper.txt\n│   └── newfile.txt\n├── upper\n│   ├── in_both.txt\n│   ├── in_upper.txt\n│   └── newfile.txt\n└── work\n    └── work  [error opening <span class=\"hljs-built_in\">dir</span>]\n</code></pre><p><code>2、删除文件</code></p>\n<ul>\n<li>删除属于上层的文件，upper目录下的会消失</li>\n<li>删除属于下层的文件，下层目录的不会消失而是在上层新建一个特殊文件表示下层的已经消失了</li>\n</ul>\n<pre><code class=\"hljs language-bash\">$ rm merged/in_lower.txt\n\n$ tree\n├── lower\n│   ├── in_both.txt\n│   └── in_lower.txt\n├── merged\n│   ├── in_both.txt\n│   ├── in_upper.txt\n│   └── newfile.txt\n├── upper\n│   ├── in_both.txt\n│   ├── *in_lower.txt\n│   ├── in_upper.txt\n│   └── newfile.txt\n└── work\n    └── work  [error opening <span class=\"hljs-built_in\">dir</span>]\n\n$ ls -l upper/in_lower.txt\nc--------- <span class=\"hljs-number\">2</span> root root <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">11</span>月  <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">18</span> upper/in_lower.txt\n</code></pre><blockquote>\n<p>字符设备(以字符为单位进行传输，例如键盘，打印机)可以使用与普通文件相同的文件操作命令对字符设备文件进行操作，例如打开、关闭、读、写等。</p>\n</blockquote>\n<p><code>3、修改文件</code></p>\n<ul>\n<li>属于底层文件: 在upper新建然后修改</li>\n<li>属于上层文件: 在upper中进行修改</li>\n</ul>\n<pre><code class=\"hljs language-bash\">$ echo &#x27;modify&#x27; &gt;&gt; merged/in_lower.txt\n\n$ tree\n├── lower\n│   ├── in_both.txt\n│   └── in_lower.txt\n├── merged\n│   ├── in_both.txt\n│   ├── in_lower.txt\n│   ├── in_upper.txt\n│   └── newfile.txt\n├── upper\n│   ├── in_both.txt\n│   ├── in_lower.txt\n│   ├── in_upper.txt\n│   └── newfile.txt\n└── work\n    └── work  [error opening dir]\n\n$ cat lower/in_lower.txt\nI&#x27;m from lower!\n\n$ cat merged/in_lower.txt\nmodify\n</code></pre><p>4、验证docker使用的overlay文件系统</p>\n<pre><code class=\"hljs language-bash\">$ cat /proc/mounts | grep overlay\noverlay /var/lib/docker/overlay2/<span class=\"hljs-number\">4e6</span>...\n<span class=\"hljs-comment\"># 同样也有lowerdir，upperdir、workdir等配置</span>\n</code></pre><h1>overlay与overlay2的区别</h1>\n<p>overlay驱动只能工作在两层之上，每个镜像层在/var/lib/docker/overlay中用自己的目录来实现。</p>\n<p>overlay驱动只工作在一个lower OverlayFS层之上，因此需要硬链接来实现多层镜像，存在inode耗尽问题 </p>\n<pre><code class=\"hljs language-bash\">$ mount | grep overlay\n\noverlay on /<span class=\"hljs-keyword\">var</span>/lib/docker/overlay/ec444863a55a.../merged\ntype overlay (rw,relatime,lowerdir=<span class=\"hljs-regexp\">/var/</span>lib/docker/overlay/55f1e14c361b.../root,\nupperdir=<span class=\"hljs-regexp\">/var/</span>lib/docker/overlay/ec444863a55a.../upper,\nworkdir=<span class=\"hljs-regexp\">/var/</span>lib/docker/overlay/ec444863a55a.../work)\n</code></pre><p>overlay2驱动原生地支持多层lower OverlayFS镜像（最多128层）</p>\n<pre><code class=\"hljs language-bash\">$ mount | grep overlay\n\noverlay on /<span class=\"hljs-keyword\">var</span>/lib/docker/overlay2/9186877cdf386d0a3b016149cf30c208f326dca307529e646afce5b3f83f5304/merged\ntype overlay (rw,relatime,\nlowerdir=l/<span class=\"hljs-title class_\">DJA75GUWHWG</span>7<span class=\"hljs-attr\">EWICFYX54FIOVT</span>:l/<span class=\"hljs-attr\">B3WWEFKBG3PLLV737KZFIASSW7</span>:l/<span class=\"hljs-title class_\">JEYMODZYFCZFYSDABYXD5MF</span>6<span class=\"hljs-attr\">YO</span>:l/<span class=\"hljs-title class_\">UL2MW</span>33<span class=\"hljs-attr\">MSE3Q5VYIKBRN4ZAGQP</span>:l/<span class=\"hljs-title class_\">NFYKDW6APBCCUCTOUSYDH</span>4<span class=\"hljs-attr\">DXAT</span>:l/6Y5IM2XC7TSNIJZZFLJCS6I4I4,\nupperdir=9186877cdf386d0a3b016149cf30c208f326dca307529e646afce5b3f83f5304/diff,\nworkdir=9186877cdf386d0a3b016149cf30c208f326dca307529e646afce5b3f83f5304/work)\n</code></pre>","frontMatter":{"readingTime":{"text":"4 min read","minutes":3.715,"time":222900,"words":743},"slug":"overlay文件系统实验","fileName":"overlay文件系统实验.md","title":"overlay文件系统","date":"2022-11-01T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"overlay文件系统实践，探索容器原理"}},"prev":{"title":"手动建立容器网络实践","date":"2022-10-31T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"amespace-网络配置实践","slug":"从none网络实践容器的网络配置"},"next":{"title":"容器中磁盘容量限制实践","date":"2022-11-02T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"容器中磁盘容量限制实践","slug":"容器中磁盘容量限制"}},"__N_SSG":true}