{"pageProps":{"post":{"mdxSource":"<h1>集群角色</h1>\n<p>gRPC 是建立在 HTTP/2 版本之上，如果 HTTP 不是 HTTP/2 协议则必然无法提供 gRPC 支持。同时，每个 gRPC 调用请求的 Content-Type 类型会被标注为 &quot;application/grpc&quot; 类型。</p>\n<p>gRPC 服务一般用于集群内部通信，如果需要对外暴露服务一般会提供等价的 REST 接口。通过 REST 接口比较方便前端 JavaScript 和后端交互。开源社区中的 grpc-gateway 项目就实现了将 gRPC 服务转为 REST 服务的能力。</p>\n<pre><code class=\"hljs language-bash\">go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@latest\n\nprotoc -I/usr/local/include -I. \\\n    -I$GOPATH/src \\\n    -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\\n    --grpc-gateway_out=. --go_out=plugins=grpc:.\\\n    hello.proto\n</code></pre><p>通过在 Protobuf 文件中添加路由相关的元信息，通过自定义的代码插件生成路由相关的处理代码，最终将 REST 请求转给更后端的 gRPC 服务处理。</p>\n<pre><code class=\"hljs language-proto\">syntax = <span class=\"hljs-string\">&quot;proto3&quot;</span>;\n\npackage main;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;google/api/annotations.proto&quot;</span>;\n\nmessage StringMessage {\n  string value = <span class=\"hljs-number\">1</span>;\n}\n\nservice RestService {\n    <span class=\"hljs-function\">rpc <span class=\"hljs-title\">Get</span><span class=\"hljs-params\">(StringMessage)</span> <span class=\"hljs-title\">returns</span> <span class=\"hljs-params\">(StringMessage)</span> </span>{\n        <span class=\"hljs-built_in\">option</span> (google.api.http) = {\n            get: <span class=\"hljs-string\">&quot;/get/{value}&quot;</span>\n        };\n    }\n    <span class=\"hljs-function\">rpc <span class=\"hljs-title\">Post</span><span class=\"hljs-params\">(StringMessage)</span> <span class=\"hljs-title\">returns</span> <span class=\"hljs-params\">(StringMessage)</span> </span>{\n        <span class=\"hljs-built_in\">option</span> (google.api.http) = {\n            post: <span class=\"hljs-string\">&quot;/post&quot;</span>\n            body: <span class=\"hljs-string\">&quot;*&quot;</span>\n        };\n    }\n}\n</code></pre><p>生成好代码后使用如下</p>\n<pre><code class=\"hljs language-go\">func <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    ctx := context.<span class=\"hljs-title class_\">Background</span>()\n    ctx, cancel := context.<span class=\"hljs-title class_\">WithCancel</span>(ctx)\n    defer <span class=\"hljs-title function_\">cancel</span>()\n\n    mux := runtime.<span class=\"hljs-title class_\">NewServeMux</span>()\n\n    err := <span class=\"hljs-title class_\">RegisterRestServiceHandlerFromEndpoint</span>(\n        ctx, mux, <span class=\"hljs-string\">&quot;localhost:5000&quot;</span>,\n        []grpc.<span class=\"hljs-property\">DialOption</span>{grpc.<span class=\"hljs-title class_\">WithInsecure</span>()},\n    )\n    <span class=\"hljs-keyword\">if</span> err != nil {\n        log.<span class=\"hljs-title class_\">Fatal</span>(err)\n    }\n\n    http.<span class=\"hljs-title class_\">ListenAndServe</span>(<span class=\"hljs-string\">&quot;:8080&quot;</span>, mux)\n}\n</code></pre><p>另外，最新的 Nginx 对 gRPC 提供了深度支持。可以通过 Nginx 将后端多个 gRPC 服务聚合到一个 Nginx 服务。同时 Nginx 也提供了为同一种 gRPC 服务注册多个后端的功能，这样可以轻松实现 gRPC 负载均衡的支持。</p>\n<p>gRPC 构建在 HTTP/2 协议之上，因此我们可以将 gRPC 服务和普通的 Web 服务架设在同一个端口之上。</p>\n<p>因为 gRPC 服务已经实现了 ServeHTTP 方法，可以直接作为 Web 路由处理对象。如果将 gRPC 和 Web 服务放在一起，会导致 gRPC 和 Web 路径的冲突，在处理时我们需要区分两类服务。</p>\n<pre><code class=\"hljs language-go\">func <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    ...\n\n    http.<span class=\"hljs-title class_\">ListenAndServeTLS</span>(port, <span class=\"hljs-string\">&quot;server.crt&quot;</span>, <span class=\"hljs-string\">&quot;server.key&quot;</span>,\n        http.<span class=\"hljs-title class_\">HandlerFunc</span>(<span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\">w http.ResponseWriter, r *http.Request</span>) {\n            <span class=\"hljs-keyword\">if</span> r.<span class=\"hljs-property\">ProtoMajor</span> != <span class=\"hljs-number\">2</span> {\n                mux.<span class=\"hljs-title class_\">ServeHTTP</span>(w, r)\n                <span class=\"hljs-keyword\">return</span>\n            }\n            <span class=\"hljs-keyword\">if</span> strings.<span class=\"hljs-title class_\">Contains</span>(\n                r.<span class=\"hljs-property\">Header</span>.<span class=\"hljs-title class_\">Get</span>(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>), <span class=\"hljs-string\">&quot;application/grpc&quot;</span>,\n            ) {\n                grpcServer.<span class=\"hljs-title class_\">ServeHTTP</span>(w, r) <span class=\"hljs-comment\">// gRPC Server</span>\n                <span class=\"hljs-keyword\">return</span>\n            }\n\n            mux.<span class=\"hljs-title class_\">ServeHTTP</span>(w, r)\n            <span class=\"hljs-keyword\">return</span>\n        }),\n    )\n}\n</code></pre><p>对于没有启动 TLS 协议的服务则需要对 HTTP/2 特性做适当的调整</p>\n<pre><code class=\"hljs language-go\">func <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    mux := http.<span class=\"hljs-title class_\">NewServeMux</span>()\n\n    h2Handler := h2c.<span class=\"hljs-title class_\">NewHandler</span>(mux, &amp;http2.<span class=\"hljs-property\">Server</span>{})\n    server = &amp;http.<span class=\"hljs-property\">Server</span>{<span class=\"hljs-title class_\">Addr</span>: <span class=\"hljs-string\">&quot;:3999&quot;</span>, <span class=\"hljs-title class_\">Handler</span>: h2Handler}\n    server.<span class=\"hljs-title class_\">ListenAndServe</span>()\n}\n\n<span class=\"hljs-comment\">// or</span>\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    mux := http.<span class=\"hljs-title class_\">NewServeMux</span>()\n    mux.<span class=\"hljs-title class_\">HandleFunc</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\">w http.ResponseWriter, req *http.Request</span>) {\n        fmt.<span class=\"hljs-title class_\">Fprintln</span>(w, <span class=\"hljs-string\">&quot;hello&quot;</span>)\n    })\n\n    http.<span class=\"hljs-title class_\">ListenAndServeTLS</span>(port, <span class=\"hljs-string\">&quot;server.crt&quot;</span>, <span class=\"hljs-string\">&quot;server.key&quot;</span>,\n        http.<span class=\"hljs-title class_\">HandlerFunc</span>(<span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\">w http.ResponseWriter, r *http.Request</span>) {\n            mux.<span class=\"hljs-title class_\">ServeHTTP</span>(w, r)\n            <span class=\"hljs-keyword\">return</span>\n        }),\n    )\n}\n\n<span class=\"hljs-comment\">// or 单独启用</span>\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    creds, err := credentials.<span class=\"hljs-title class_\">NewServerTLSFromFile</span>(<span class=\"hljs-string\">&quot;server.crt&quot;</span>, <span class=\"hljs-string\">&quot;server.key&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> err != nil {\n        log.<span class=\"hljs-title class_\">Fatal</span>(err)\n    }\n\n    grpcServer := grpc.<span class=\"hljs-title class_\">NewServer</span>(grpc.<span class=\"hljs-title class_\">Creds</span>(creds))\n\n    ...\n}\n</code></pre><h1>核心功能</h1>\n<p>基于http2，因此提供了数据流功能、tls安全认证等</p>\n<p>HTTP2 是一个全双工的流式协议, 服务端也可以主动 ping 客户端, 且服务端还会有一些检测连接可用性和控制客户端 ping 包频率的配置。gRPC 就是采用 HTTP2 来作为其基础通信模式的，所以默认的 gRPC 客户端都是长连接。</p>\n<h2>数据流</h2>\n<img src=\"/images/blogs/grpc.png\" />\n\n<pre><code class=\"hljs language-proto\">service <span class=\"hljs-title class_\">HelloService</span> {\n    rpc <span class=\"hljs-title class_\">Hello</span> (<span class=\"hljs-title class_\">String</span>) returns (<span class=\"hljs-title class_\">String</span>);\n\n    rpc <span class=\"hljs-title class_\">Channel</span> (stream <span class=\"hljs-title class_\">String</span>) returns (stream <span class=\"hljs-title class_\">String</span>);\n}\n</code></pre><p><code>stream</code>就是开启消息流的关键字，生成代码的接口类型如下</p>\n<pre><code class=\"hljs language-go\">type name_ChannelServer interface {\n    <span class=\"hljs-title class_\">Send</span>(*<span class=\"hljs-title class_\">String</span>) error\n    <span class=\"hljs-title class_\">Recv</span>() (*<span class=\"hljs-title class_\">String</span>, error)\n    grpc.<span class=\"hljs-property\">ServerStream</span>\n}\n</code></pre><p>用户使用时就是通过这两个方法来传输数据</p>\n<p>由于数据流的特性，使得grpc可以用来实现发布订阅模式</p>\n<h2>证书</h2>\n<p>客户端在连接服务器中通过 grpc.WithInsecure() 选项跳过了对服务器证书的验证。没有启用证书的 gRPC 服务在和客户端进行的是明文通讯，信息面临被任何第三方监听的风险。为了保障 gRPC 通信不被第三方监听篡改或伪造，我们可以对服务器启动 TLS 加密特性。</p>\n<p>自签证书, 生成<code>server.key</code>, <code>server.crt</code>, <code>client.key</code>, <code>client.crt</code>四个文件(crt结尾的是证书文件，其中存放着公钥，key结尾则是私钥文件)</p>\n<pre><code class=\"hljs language-bash\">$ openssl genrsa -out server.<span class=\"hljs-property\">key</span> <span class=\"hljs-number\">2048</span>\n$ openssl req -<span class=\"hljs-keyword\">new</span> -x509 -days <span class=\"hljs-number\">3650</span> \\\n    -subj <span class=\"hljs-string\">&quot;/C=GB/L=China/O=grpc-server/CN=server.grpc.io&quot;</span> \\\n    -key server.<span class=\"hljs-property\">key</span> -out server.<span class=\"hljs-property\">crt</span>\n\n$ openssl genrsa -out client.<span class=\"hljs-property\">key</span> <span class=\"hljs-number\">2048</span>\n$ openssl req -<span class=\"hljs-keyword\">new</span> -x509 -days <span class=\"hljs-number\">3650</span> \\\n    -subj <span class=\"hljs-string\">&quot;/C=GB/L=China/O=grpc-client/CN=client.grpc.io&quot;</span> \\\n    -key client.<span class=\"hljs-property\">key</span> -out client.<span class=\"hljs-property\">crt</span>\n</code></pre><pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">// 服务端</span>\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    creds, err := credentials.<span class=\"hljs-title class_\">NewServerTLSFromFile</span>(<span class=\"hljs-string\">&quot;server.crt&quot;</span>, <span class=\"hljs-string\">&quot;server.key&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> err != nil {\n        log.<span class=\"hljs-title class_\">Fatal</span>(err)\n    }\n\n    server := grpc.<span class=\"hljs-title class_\">NewServer</span>(grpc.<span class=\"hljs-title class_\">Creds</span>(creds))\n    ...\n}\n\n<span class=\"hljs-comment\">// 客户端</span>\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    creds, err := credentials.<span class=\"hljs-title class_\">NewClientTLSFromFile</span>(\n        <span class=\"hljs-string\">&quot;server.crt&quot;</span>, <span class=\"hljs-string\">&quot;server.grpc.io&quot;</span>,\n    )\n    <span class=\"hljs-keyword\">if</span> err != nil {\n        log.<span class=\"hljs-title class_\">Fatal</span>(err)\n    }\n\n    conn, err := grpc.<span class=\"hljs-title class_\">Dial</span>(<span class=\"hljs-string\">&quot;localhost:5000&quot;</span>,\n        grpc.<span class=\"hljs-title class_\">WithTransportCredentials</span>(creds),\n    )\n    <span class=\"hljs-keyword\">if</span> err != nil {\n        log.<span class=\"hljs-title class_\">Fatal</span>(err)\n    }\n    defer conn.<span class=\"hljs-title class_\">Close</span>()\n\n    ...\n}\n</code></pre><p>第一个参数是服务器的证书文件，第二个参数是签发证书的服务器的名字。然后通过 grpc.WithTransportCredentials(creds) 将证书对象转为参数选项传人 grpc.Dial 函数。这种方式，需要提前将服务器的证书告知客户端，这样客户端在连接服务器时才能进行对服务器证书认证。</p>\n<p>为了避免传输过程中导致证书被篡改，需要使用安全可靠的根证书分别对服务器和客户端的证书进行签名。这样客户端或服务器在收到对方的证书后可以通过根证书进行验证证书的有效性(计算签名然后和根证书上的相互匹配)。</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># 根证书生成</span>\n<span class=\"hljs-string\">$</span> <span class=\"hljs-string\">openssl</span> <span class=\"hljs-string\">genrsa</span> <span class=\"hljs-string\">-out</span> <span class=\"hljs-string\">ca.key</span> <span class=\"hljs-number\">2048</span>\n<span class=\"hljs-string\">$</span> <span class=\"hljs-string\">openssl</span> <span class=\"hljs-string\">req</span> <span class=\"hljs-string\">-new</span> <span class=\"hljs-string\">-x509</span> <span class=\"hljs-string\">-days</span> <span class=\"hljs-number\">3650</span> <span class=\"hljs-string\">\\</span>\n    <span class=\"hljs-string\">-subj</span> <span class=\"hljs-string\">&quot;/C=GB/L=China/O=gobook/CN=github.com&quot;</span> <span class=\"hljs-string\">\\</span>\n    <span class=\"hljs-string\">-key</span> <span class=\"hljs-string\">ca.key</span> <span class=\"hljs-string\">-out</span> <span class=\"hljs-string\">ca.crt</span>\n\n<span class=\"hljs-comment\"># 服务端证书进行签名</span>\n<span class=\"hljs-string\">$</span> <span class=\"hljs-string\">openssl</span> <span class=\"hljs-string\">req</span> <span class=\"hljs-string\">-new</span> <span class=\"hljs-string\">\\</span>\n    <span class=\"hljs-string\">-subj</span> <span class=\"hljs-string\">&quot;/C=GB/L=China/O=server/CN=server.io&quot;</span> <span class=\"hljs-string\">\\</span>\n    <span class=\"hljs-string\">-key</span> <span class=\"hljs-string\">server.key</span> <span class=\"hljs-string\">\\</span>\n    <span class=\"hljs-string\">-out</span> <span class=\"hljs-string\">server.csr</span>\n<span class=\"hljs-string\">$</span> <span class=\"hljs-string\">openssl</span> <span class=\"hljs-string\">x509</span> <span class=\"hljs-string\">-req</span> <span class=\"hljs-string\">-sha256</span> <span class=\"hljs-string\">\\</span>\n    <span class=\"hljs-string\">-CA</span> <span class=\"hljs-string\">ca.crt</span> <span class=\"hljs-string\">-CAkey</span> <span class=\"hljs-string\">ca.key</span> <span class=\"hljs-string\">-CAcreateserial</span> <span class=\"hljs-string\">-days</span> <span class=\"hljs-number\">3650</span> <span class=\"hljs-string\">\\</span>\n    <span class=\"hljs-string\">-in</span> <span class=\"hljs-string\">server.csr</span> <span class=\"hljs-string\">\\</span>\n    <span class=\"hljs-string\">-out</span> <span class=\"hljs-string\">server.crt</span>\n</code></pre><p>签名的过程中引入了一个新的以. csr 为后缀名的文件，它表示证书签名请求文件。在证书签名完成之后可以删除. csr 文件。</p>\n<p>这样客户端就可以不再依赖服务器端证书文件，客户端通过引入一个 CA 根证书和服务器的名字来实现对服务器进行验证。客户端在连接服务器时会首先请求服务器的证书，然后使用 CA 根证书对收到的服务器端证书进行验证。</p>\n<blockquote>\n<p>双向认证同理</p>\n</blockquote>\n<pre><code class=\"hljs language-go\">func <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    certificate, err := tls.<span class=\"hljs-title class_\">LoadX509KeyPair</span>(<span class=\"hljs-string\">&quot;server.crt&quot;</span>, <span class=\"hljs-string\">&quot;server.key&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> err != nil {\n        log.<span class=\"hljs-title class_\">Fatal</span>(err)\n    }\n\n    certPool := x509.<span class=\"hljs-title class_\">NewCertPool</span>()\n    ca, err := ioutil.<span class=\"hljs-title class_\">ReadFile</span>(<span class=\"hljs-string\">&quot;ca.crt&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> err != nil {\n        log.<span class=\"hljs-title class_\">Fatal</span>(err)\n    }\n    <span class=\"hljs-keyword\">if</span> ok := certPool.<span class=\"hljs-title class_\">AppendCertsFromPEM</span>(ca); !ok {\n        log.<span class=\"hljs-title class_\">Fatal</span>(<span class=\"hljs-string\">&quot;failed to append certs&quot;</span>)\n    }\n\n    creds := credentials.<span class=\"hljs-title class_\">NewTLS</span>(&amp;tls.<span class=\"hljs-property\">Config</span>{\n        <span class=\"hljs-title class_\">Certificates</span>: []tls.<span class=\"hljs-property\">Certificate</span>{certificate},\n        <span class=\"hljs-title class_\">ClientAuth</span>:   tls.<span class=\"hljs-property\">RequireAndVerifyClientCert</span>, <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> this is optional!</span>\n        <span class=\"hljs-title class_\">ClientCAs</span>:    certPool,\n    })\n\n    server := grpc.<span class=\"hljs-title class_\">NewServer</span>(grpc.<span class=\"hljs-title class_\">Creds</span>(creds))\n    ...\n}\n</code></pre><h2>服务token</h2>\n<p>用于具体服务方法的认证</p>\n<p>示例</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-built_in\">type</span> Authentication struct {\n    User     string\n    Password string\n}\n\nfunc (a *Authentication) GetRequestMetadata(context.Context, ...string) (\n    <span class=\"hljs-built_in\">map</span>[string]string, error,\n) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">map</span>[string]string{<span class=\"hljs-string\">&quot;user&quot;</span>:a.User, <span class=\"hljs-string\">&quot;password&quot;</span>: a.Password}, nil\n}\nfunc (a *Authentication) RequireTransportSecurity() <span class=\"hljs-built_in\">bool</span> {\n    <span class=\"hljs-keyword\">return</span> false\n}\n\n\nfunc main() {\n    auth := Authentication{\n        User:    <span class=\"hljs-string\">&quot;gopher&quot;</span>,\n        Password: <span class=\"hljs-string\">&quot;password&quot;</span>,\n    }\n\n    conn, err := grpc.Dial(<span class=\"hljs-string\">&quot;localhost&quot;</span>+port, grpc.WithInsecure(), grpc.WithPerRPCCredentials(&amp;auth))\n    <span class=\"hljs-keyword\">if</span> err != nil {\n        log.Fatal(err)\n    }\n    defer conn.Close()\n\n    ...\n}\n</code></pre><p>然后在每个方法中使用</p>\n<pre><code class=\"hljs language-go\">type grpcServer struct {auth *<span class=\"hljs-title class_\">Authentication</span>}\n\nfunc (p *grpcServer) <span class=\"hljs-title class_\">SomeMethod</span>(\n    ctx context.<span class=\"hljs-property\">Context</span>, <span class=\"hljs-keyword\">in</span> *<span class=\"hljs-title class_\">HelloRequest</span>,\n) (*<span class=\"hljs-title class_\">HelloReply</span>, error) {\n    <span class=\"hljs-keyword\">if</span> err := p.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-title class_\">Auth</span>(ctx); err != nil {\n        <span class=\"hljs-keyword\">return</span> nil, err\n    }\n\n    <span class=\"hljs-keyword\">return</span> &amp;<span class=\"hljs-title class_\">HelloReply</span>{<span class=\"hljs-title class_\">Message</span>: <span class=\"hljs-string\">&quot;Hello&quot;</span> + <span class=\"hljs-keyword\">in</span>.<span class=\"hljs-property\">Name</span>}, nil\n}\n\nfunc (a *<span class=\"hljs-title class_\">Authentication</span>) <span class=\"hljs-title class_\">Auth</span>(ctx context.<span class=\"hljs-property\">Context</span>) error {\n    md, ok := metadata.<span class=\"hljs-title class_\">FromIncomingContext</span>(ctx)\n    <span class=\"hljs-keyword\">if</span> !ok {\n        <span class=\"hljs-keyword\">return</span> fmt.<span class=\"hljs-title class_\">Errorf</span>(<span class=\"hljs-string\">&quot;missing credentials&quot;</span>)\n    }\n\n    <span class=\"hljs-keyword\">var</span> appid string\n    <span class=\"hljs-keyword\">var</span> appkey string\n\n    <span class=\"hljs-keyword\">if</span> val, ok := md[<span class=\"hljs-string\">&quot;user&quot;</span>]; ok { appid = val[<span class=\"hljs-number\">0</span>] }\n    <span class=\"hljs-keyword\">if</span> val, ok := md[<span class=\"hljs-string\">&quot;password&quot;</span>]; ok { appkey = val[<span class=\"hljs-number\">0</span>] }\n\n    <span class=\"hljs-keyword\">if</span> appid != a.<span class=\"hljs-property\">User</span> || appkey != a.<span class=\"hljs-property\">Password</span> {\n        <span class=\"hljs-keyword\">return</span> grpc.<span class=\"hljs-title class_\">Errorf</span>(codes.<span class=\"hljs-property\">Unauthenticated</span>, <span class=\"hljs-string\">&quot;invalid token&quot;</span>)\n    }\n\n    <span class=\"hljs-keyword\">return</span> nil\n}\n</code></pre><h1>长连接</h1>\n<p>需要客户端和服务端保持持久的长连接，即无论服务端、客户端异常断开或重启，长连接都要具备重试保活（当然前提是两方重启都成功）的需求。</p>\n<p>在 gRPC 中，默认情况下对于已经建立的长连接，服务端异常重启之后，客户端一般会收到如下错误：</p>\n<blockquote>\n<p>rpc error: code = Unavailable desc = transport is closing</p>\n</blockquote>\n<p>主要处理方法是</p>\n<ul>\n<li>重试：在客户端调用失败时，选择以指数退避（Exponential Backoff ）来优雅进行重试</li>\n<li>增加 keepalive 的保活策略</li>\n<li>增加重连（auto reconnect）策略</li>\n</ul>\n<blockquote>\n<p><a href=\"https://github.com/grpc/grpc-go/blob/master/examples/features/keepalive/server/main.go\">服务端示例</a>\n<a href=\"https://github.com/grpc/grpc-go/blob/master/examples/features/keepalive/client/main.go\">客户端示例</a></p>\n</blockquote>\n<p>HTTP2 使用 GOAWAY 帧信号来控制连接关闭，GOAWAY 用于启动连接关闭或发出严重错误状态信号。\nGOAWAY 语义为允许端点正常停止接受新的流，同时仍然完成对先前建立的流的处理，当 client 收到这个包之后就会主动关闭连接。下次需要发送数据时，就会重新建立连接。GOAWAY 是实现 grpc.gracefulStop 机制的重要保证。</p>\n<p><code>gRPC 客户端提供 keepalive 配置</code></p>\n<ul>\n<li>Time：如果没有 activity， 则每隔 10s 发送一个 ping 包</li>\n<li>Timeout： 如果 ping ack 1s 之内未返回则认为连接已断开</li>\n<li>PermitWithoutStream：如果没有 active 的 stream， 是否允许发送 ping</li>\n</ul>\n<p><code>gRPC 服务端提供 keepalive 配置</code></p>\n<ul>\n<li>keepalive.EnforcementPolicy：<ul>\n<li>MinTime：如果客户端两次 ping 的间隔小于 5s，则关闭连接</li>\n<li>PermitWithoutStream： 即使没有 active stream, 也允许 ping</li>\n</ul>\n</li>\n<li>keepalive.ServerParameters：<ul>\n<li>MaxConnectionIdle：如果一个 client 空闲超过 15s, 发送一个 GOAWAY, 为了防止同一时间发送大量 GOAWAY, 会在 15s 时间间隔上下浮动 15*10%, 即 15+1.5 或者 15-1.5</li>\n<li>MaxConnectionAge：如果任意连接存活时间超过 30s, 发送一个 GOAWAY</li>\n<li>MaxConnectionAgeGrace：在强制关闭连接之间, 允许有 5s 的时间完成 pending 的 rpc 请求</li>\n<li>Time： 如果一个 client 空闲超过 5s, 则发送一个 ping 请求</li>\n<li>Timeout： 如果 ping 请求 1s 内未收到回复, 则认为该连接已断开</li>\n</ul>\n</li>\n</ul>\n<p>服务端处理客户端的 ping 包的 response 的逻辑在 handlePing 方法 中。\nhandlePing 方法会判断是否违反两条 policy, 如果违反则将 pingStrikes++, 当违反次数大于 maxPingStrikes(2) 时, 打印一条错误日志并且发送一个 goAway 包，断开这个连接</p>\n","frontMatter":{"readingTime":{"text":"14 min read","minutes":13.95,"time":837000,"words":2790},"slug":"grpc手册","fileName":"grpc手册.md","title":"grpc手册","date":"2022-08-13T00:00:00.000Z","tags":["中间件"],"draft":false,"summary":"grpc介绍以及使用"}},"prev":{"title":"Kubernetes生产化实践之路4","date":"2022-08-12T00:00:00.000Z","tags":["读书笔记"],"draft":false,"summary":"Kubernetes生产化实践之路-第8-9章","slug":"《Kubernetes生产化实践之路》读书笔记 - 4"},"next":{"title":"容器核心点","date":"2022-08-14T00:00:00.000Z","tags":["容器"],"draft":false,"summary":"容器使用与主机的区别","slug":"容器核心点概览"}},"__N_SSG":true}