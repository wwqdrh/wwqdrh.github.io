{"pageProps":{"post":{"mdxSource":"<h2>简介</h2>\n<p>基于声明式API的流水线, Tekton组件目录(Tekton Catalog)是一个社区驱动的Tekton组件的存储仓库, 任何用户可直接获取并基于此构建复杂流水线， 而无需开发</p>\n<ul>\n<li>自定义</li>\n<li>可重用</li>\n<li>可扩展性</li>\n<li>标准化</li>\n<li>规模化支持</li>\n</ul>\n<p>tekton可以完成CICD的所有工作，也可以接入argocd，让tekton专注于CI，CD则交给ArgoCD</p>\n<h3>安装</h3>\n<p>tekton的组件包括dashboard、tkn(cli)、trigger、interceptors</p>\n<pre><code class=\"hljs language-Shell\"><span class=\"hljs-meta\"># dashboard</span>\nkubectl apply --filename https:<span class=\"hljs-comment\">//github.com/tektoncd/dashboard/releases/latest/download/tekton-dashboard-release.yaml</span>\n\n<span class=\"hljs-meta\"># tkn</span>\n# 需要在github中下载release\nwget https:<span class=\"hljs-comment\">//github.com/tektoncd/cli/releases/download/v0.23.1/tkn_0.23.1_Linux_x86_64.tar.gz</span>\n\ntar -zxvf tkn_0<span class=\"hljs-number\">.23</span><span class=\"hljs-number\">.1</span>_Linux_x86_64.tar.gz\n\nmv … /usr/local/bin/tkn # 移动到指定的bin目录下\n\n<span class=\"hljs-meta\"># trigger</span>\nkubectl apply -f https:<span class=\"hljs-comment\">//storage.googleapis.com/tekton-releases/triggers/previous/v0.13.0/release.yaml </span>\n\nkubectl apply -f https:<span class=\"hljs-comment\">//storage.googleapis.com/tekton-releases/triggers/previous/v0.13.0/interceptors.yaml </span>\n</code></pre><p>配置用户角色</p>\n<pre><code class=\"hljs language-Shell\">kubectl apply -f <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//raw.githubusercontent.com/arthurk/tekton-triggers-example/master/01-rbac.yaml</span>\n</code></pre><h2>核心资源对象</h2>\n<h3>流水线</h3>\n<img src=\"/images/blogs/%E6%B5%81%E6%B0%B4%E7%BA%BF.png\" />\n\n<ul>\n<li>Task：Tekton中的最小单元，代表一个任务模板，包括多个步骤。每一个操作定义为Task中的一个step</li>\n<li>Pipeline：多个 Task 组成的有向无环图，定义了流水线的模板</li>\n<li>PipelineRun：Pipeline 真正执行时需要定义一个PipelineRun，作为流水线的实例，生成一条流水线记录</li>\n<li>TaskRun：Task 真正执行的实例，记录任务状态。一个TaskRun 会创建一个对应的 Pod，每个 step 对应 pod 中的一个 container</li>\n<li>PipelineResource（beta1版本后不再使用）：流水线执行过程中需要的资源信息</li>\n</ul>\n<h3>事件监听</h3>\n<img src=\"/images/blogs/%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91.png\" />\n\n<ul>\n<li>EventListener：监听器，提供http接口外部事件入口 ，以便于外部事件推送，比如配置Gitlab的Webhook。</li>\n<li>Trigger：指定当EventListener检测到事件发生时会发生什么，它会定义TriggerBinding、TriggerTemplate以及可选的Interceptor。</li>\n<li>TriggerTemplate：用于模板化资源，根据传入的参数实例化Tekton对象资源，比如TaskRun、PipelineRun等。</li>\n<li>TriggerBinding：用于捕获事件中的字段并将其存储为参数，然后会将参数传递给TriggerTemplate。</li>\n<li>ClusterTriggerBinding：和TriggerBinding相似，用于提取事件字段，不过它是集群级别的对象。</li>\n<li>Interceptor：拦截器，在TriggerBinding之前运行，用于负载过滤、验证、转换等处理，只有通过拦截器的数据才会传递给TriggerBinding。</li>\n</ul>\n<h2>使用示例</h2>\n<h3>纯tekton</h3>\n<p>可以编写task，直接使用taskrun运行；或者使用template编排多个task, 定义了pipeline之后再定义pipelinerun进行执行</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">---task</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">tekton.dev/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Task</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hello</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">tekton-test</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">steps:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hello</span>\n      <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">ubuntu</span>\n      <span class=\"hljs-attr\">command:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">echo</span>\n      <span class=\"hljs-attr\">args:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;Hello World!&quot;</span>\n\n\n<span class=\"hljs-string\">---taskrun</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">tekton.dev/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">TaskRun</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">tekton-test</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hello-task-run</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">taskRef:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hello</span>\n\n<span class=\"hljs-string\">---pipeline</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">tekton.dev/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Pipeline</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hello-goodbye</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">tekton-test</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">tasks:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hello</span>\n      <span class=\"hljs-attr\">taskRef:</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hello</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">goodbye</span>\n      <span class=\"hljs-attr\">runAfter:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hello</span>\n      <span class=\"hljs-attr\">taskRef:</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">goodbye</span>\n\n<span class=\"hljs-string\">----pipelinerun</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">tekton.dev/v1beta1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">PipelineRun</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hello-goodbye-run</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">tekton-test</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">pipelineRef:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hello-goodbye</span>\n</code></pre><h3>tekton+argocd</h3>\n<img src=\"/images/blogs/tekton%2Bargocd.png\" />\n\n<ul>\n<li>新建应用编排配置仓库</li>\n<li>argocd监控配置仓库</li>\n<li>使用tekton构建工作流</li>\n<li>构建镜像，推送至镜像仓库，修改配置仓库</li>\n<li>argocd监听到配置仓库更改，开始应用部署的流程</li>\n</ul>\n","frontMatter":{"readingTime":{"text":"5 min read","minutes":4.235,"time":254100,"words":847},"slug":"tekton使用示例","fileName":"tekton使用示例.md","title":"tekton使用示例","date":"2022-05-20T00:00:00.000Z","tags":["实践","云原生"],"draft":false,"summary":"tekton作为云原生中的cd工具，能够轻易的做到task复用，减少重复代码编写"}},"prev":{"title":"如何使用nginx实现灰度部署","date":"2022-03-31T00:00:00.000Z","tags":["实践","云原生"],"draft":false,"summary":"灰度部署","slug":"如何使用nginx实现灰度部署"},"next":{"title":"tekton使用示例","date":"2022-06-06T00:00:00.000Z","tags":["中间件"],"draft":false,"summary":"缓存一致性的解决方法与思路","slug":"缓存一致性问题"}},"__N_SSG":true}