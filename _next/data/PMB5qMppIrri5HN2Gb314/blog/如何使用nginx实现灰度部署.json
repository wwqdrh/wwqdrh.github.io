{"pageProps":{"post":{"mdxSource":"<h1>如何使用nginx实现灰度部署</h1>\n<br />\n\n<img src=\"/images/blogs/nginx简介.png\" />\n\n<h2>什么是灰度部署</h2>\n<br/>\n\n<p>在应用部署中，存在停机部署和不停机部署两种。不停机部署中分为蓝绿与灰度部署，蓝绿是非黑即白，蓝色为当前版本的实时流量，绿色是最新版本的环境，任何时候只有一套环境有实时流量。在这套环境里做最终的测试，只有当确认新版本完全没有问题之后，才会将流量切到新版本的代码环境中。</p>\n<p>灰度部署是将流量逐渐迁移到最新的代码中，1%、5%、10%、25%，在确认代码能够正常运行时再不断扩大。主旨就是用很少的流量验证某个版本是否正常。（金丝雀部署同理，不断试错，如果没有问题就加大流量，如果有问题可以及时告警，同时只是很少的流量会经过这里，即用最小的成本进行试错了）</p>\n<br/>\n\n<h2>实现灰度部署需要考虑的点</h2>\n<br/>\n\n<ol>\n<li>什么样的流量让其进入新版本(带权值的负载均衡、带特定标识的header、jwt解析后属于特定用户的流量)</li>\n<li>当接口错误时如何进行警告，通知开发人员进行修复，并自动降低进入新版本流量的权值</li>\n<li>当新流量权值变为100或者0时对应用自动进行切换，执行完全的回退或者推进</li>\n</ol>\n<br/>\n\n<h2>最小实践</h2>\n<br/>\n\n<p>针对上文指出需要注意的点，这里列出样例(只是提供一种思路，每一个步骤其实都可以自定义，自己控制流量何时伸展，何时收缩)</p>\n<ol>\n<li>如何定义路由: 部署新容器时，自动修改nginx的配置，配置权重，每隔一段时间进行检查没有异常则不断扩大权重直至完全切换</li>\n<li>如何定义接口产生异常: 修改nginx配置，每次检查时直接进行简单计数，新版本地址与发生500异常，如果大于0了直接进行版本回退</li>\n</ol>\n<br/>\n\n<img src=\"/images/blogs/不停机更新.png\" />\n\n<br/>\n\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-comment\">#!/bin/sh</span>\n\n<span class=\"hljs-comment\"># TODO 需要解析log日志判断是否需要动态伸缩容量</span>\n\n<span class=\"hljs-comment\"># 当前进程的pid 用于停止旧命令</span>\n<span class=\"hljs-string\">C_PID=$$</span>\n<span class=\"hljs-string\">C_DIR=$(</span>\n    <span class=\"hljs-string\">cd</span> <span class=\"hljs-string\">$(dirname</span> <span class=\"hljs-string\">$0)</span>\n    <span class=\"hljs-string\">pwd</span>\n<span class=\"hljs-string\">)</span>\n<span class=\"hljs-comment\"># flag文件目录 判断当前是否已经有脚本在执行了</span>\n<span class=\"hljs-string\">C_FLAG=$C_DIR&quot;/.deployed&quot;</span>\n<span class=\"hljs-string\">C_INGRESS_CONF=&quot;/etc/nginx/conf.d/ingres.conf&quot;</span> <span class=\"hljs-comment\"># nginx配置文件写入路径</span>\n<span class=\"hljs-string\">C_LOG_PATH=$C_DIR&quot;/access.log&quot;</span>\n\n<span class=\"hljs-comment\"># 初始值</span>\n<span class=\"hljs-string\">checktime=10</span>\n<span class=\"hljs-string\">weight1=90</span>\n<span class=\"hljs-string\">weight2=10</span>\n<span class=\"hljs-string\">step=10</span> <span class=\"hljs-comment\"># 步数</span>\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">weight_factory()</span> {\n    <span class=\"hljs-string\">wei=$1</span>\n    <span class=\"hljs-string\">if</span> [ <span class=\"hljs-string\">$wei</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-number\">0</span> ]<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">then</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;down&quot;</span>\n    <span class=\"hljs-string\">else</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;weight=$wei&quot;</span>\n    <span class=\"hljs-string\">fi</span>\n}\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">usage_factory()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(\n        cat &lt;&lt;-EOF\nUsage:\n    deploy: 执行部署\nEOF\n    )&quot;</span>\n}\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">ingress_ori_factory()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(\n        cat &lt;&lt;-EOF\nupstream nginx_gray_test {\n    server 127.0.0.1:8004 weight=100 fail_timeout=30;\n    server 127.0.0.1:8005 down fail_timeout=30;\n}\n\nserver {\n    listen       8080;\n    server_name  192.168.110.114;\n\n    location / {\n        proxy_set_header Host nginx_gray_test;\n        proxy_http_version 1.1;\n        proxy_pass http://nginx_gray_test;\n    }\n}\nEOF\n    )&quot;</span>\n}\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">ingress_factory()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(\n        cat &lt;&lt;-EOF\nlog_format  debug &#x27;\\$upstream_addr|\\$status|\\$upstream_response_time&#x27;;\n\nupstream nginx_gray_test {\n    server 127.0.0.1:8004 $(weight_factory $weight1) fail_timeout=30;\n    server 127.0.0.1:8005 $(weight_factory $weight2) fail_timeout=30;\n}\n\nserver {\n    listen       8080;\n    server_name  192.168.110.114;\n\n    # 指定access_log的存放路径、格式和缓存大小\n    access_log  $C_LOG_PATH debug;\n\n    location / {\n        proxy_set_header Host nginx_gray_test;\n        proxy_http_version 1.1;\n        proxy_pass http://nginx_gray_test;\n    }\n}\nEOF\n    )&quot;</span>\n}\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">deploy1_factory()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(\n        cat &lt;&lt;-EOF\ndocker pull 192.168.110.114:5000/library/deployecho:latest\ndocker rm -fv deployecho1\ndocker run -d --name=deployecho1 --restart=always \\\n    -p 127.0.0.1:8004:8080 \\\n    192.168.110.114:5000/library/deployecho:latest\nEOF\n    )&quot;</span>\n}\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">deploy1_exist()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(\n        cat &lt;&lt;-EOF\ndocker ps | grep deployecho1\nEOF\n    )&quot;</span>\n}\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">deploy1_remove()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(\n        cat &lt;&lt;-EOF\ndocker stop deployecho1\ndocker rm -fv deployecho1\nEOF\n    )&quot;</span>\n}\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">deploy2_factory()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(\n        cat &lt;&lt;-EOF\ndocker pull 192.168.110.114:5000/library/deployecho:latest\ndocker rm -fv deployecho2\ndocker run -d --name=deployecho2 --restart=always \\\n    -p 127.0.0.1:8005:8080 \\\n    192.168.110.114:5000/library/deployecho:latest\nEOF\n    )&quot;</span>\n}\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">deploy2_exist()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(\n        cat &lt;&lt;-EOF\ndocker ps | grep deployecho2\nEOF\n    )&quot;</span>\n}\n\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">deploy2_remove()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(\n        cat &lt;&lt;-EOF\ndocker rm -fv deployecho2\nEOF\n    )&quot;</span>\n}\n\n<span class=\"hljs-comment\"># 多行字符串，按照换行进行分割后执行</span>\n<span class=\"hljs-comment\"># TODO 无法实现多行字符串按照换行符分割</span>\n<span class=\"hljs-comment\"># 写入临时变量后执行</span>\n<span class=\"hljs-comment\"># 示例</span>\n<span class=\"hljs-comment\"># function deploe() {</span>\n<span class=\"hljs-comment\">#     echo &quot;$(</span>\n<span class=\"hljs-comment\">#         cat &lt;&lt;-EOF</span>\n<span class=\"hljs-comment\"># echo 1</span>\n<span class=\"hljs-comment\"># echo 2</span>\n<span class=\"hljs-comment\"># EOF</span>\n<span class=\"hljs-comment\">#     )&quot;</span>\n<span class=\"hljs-comment\"># }</span>\n<span class=\"hljs-comment\"># res=$(run_str_shell &quot;$(deploe)&quot;)</span>\n<span class=\"hljs-comment\"># echo &quot;$res&quot;</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">run_str_shell()</span> {\n    <span class=\"hljs-comment\"># fun_str=&quot;$1&quot;</span>\n    <span class=\"hljs-comment\"># array=(${fun_str//\\n/ })</span>\n    <span class=\"hljs-comment\"># for var in ${array[@]}; do</span>\n    <span class=\"hljs-comment\">#     echo $var</span>\n    <span class=\"hljs-comment\"># done</span>\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$1&quot;</span> <span class=\"hljs-string\">&gt;&gt;$C_DIR&quot;/tmp.sh&quot;</span>\n    <span class=\"hljs-string\">chmod</span> <span class=\"hljs-string\">+x</span> <span class=\"hljs-string\">$C_DIR&quot;/tmp.sh&quot;</span>\n    <span class=\"hljs-string\">sh</span> <span class=\"hljs-string\">-x</span> <span class=\"hljs-string\">$C_DIR&quot;/tmp.sh&quot;</span>\n    <span class=\"hljs-string\">status=$?</span> <span class=\"hljs-comment\"># 获取上一步执行完成的状态码</span>\n    <span class=\"hljs-string\">rm</span> <span class=\"hljs-string\">-f</span> <span class=\"hljs-string\">$C_DIR&quot;/tmp.sh&quot;</span>\n    <span class=\"hljs-comment\"># echo &quot;status: $status&quot;</span>\n}\n\n<span class=\"hljs-comment\"># 入口函数</span>\n<span class=\"hljs-comment\"># 需要检查当前脚本只能同时有一个在运行</span>\n<span class=\"hljs-comment\"># 1、gray 手动设置新旧节点的阈值</span>\n<span class=\"hljs-comment\"># 2、deploy 执行部署</span>\n<span class=\"hljs-comment\"># (1、只要新节点不出错立马切换</span>\n<span class=\"hljs-comment\"># (2、固定运行一段时间，时间越长，新节点错误日志越少，阈值调得越大</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">main()</span> {\n    <span class=\"hljs-comment\"># 需要注意的是如果执行kill -9 ，这个信号(强制终止)是不能被处理或忽略的，所以最好是使用15(简单终止)</span>\n    <span class=\"hljs-comment\"># 如果手动退出 将镜像回退</span>\n    <span class=\"hljs-string\">trap</span> <span class=\"hljs-string\">&quot;rm -f $C_FLAG; exit&quot;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">14</span> <span class=\"hljs-number\">15</span>\n\n    <span class=\"hljs-string\">case</span> <span class=\"hljs-string\">$1</span> <span class=\"hljs-string\">in</span>\n    <span class=\"hljs-string\">&quot;deploy&quot;</span><span class=\"hljs-string\">)</span>\n        <span class=\"hljs-string\">check_single</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-string\">&gt;$C_LOG_PATH</span>\n        <span class=\"hljs-string\">trap</span> <span class=\"hljs-string\">&quot;rollback; rm -f $C_FLAG $C_LOG_PATH; exit&quot;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-number\">14</span> <span class=\"hljs-number\">15</span>\n        <span class=\"hljs-string\">commond_deploy</span> <span class=\"hljs-string\">$2</span> <span class=\"hljs-string\">$3</span>\n        <span class=\"hljs-string\">;;</span>\n    <span class=\"hljs-string\">&quot;set&quot;</span><span class=\"hljs-string\">)</span>\n        <span class=\"hljs-string\">commond_set</span>\n        <span class=\"hljs-string\">;;</span>\n    <span class=\"hljs-string\">&quot;-h&quot;</span><span class=\"hljs-string\">)</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(usage_factory)&quot;</span>\n        <span class=\"hljs-string\">;;</span>\n    <span class=\"hljs-string\">*)</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;error&quot;</span>\n        <span class=\"hljs-string\">exit</span> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-string\">;;</span>\n    <span class=\"hljs-string\">esac</span>\n    <span class=\"hljs-string\">exit</span> <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-comment\"># 1、部署镜像启动新的应用实例</span>\n<span class=\"hljs-comment\"># 2、修改nginx的策略 并不断查看当前新应用的状态并动态修改权重</span>\n<span class=\"hljs-comment\"># 网关配置，</span>\n<span class=\"hljs-comment\"># 1、每隔一段时间检查，如果新节点依然存在，将流量转到新节点的阈值调大</span>\n<span class=\"hljs-comment\"># 2、每隔一段时间检查，如果新节点已经退出，将流量阈值设为0 流量回退到新节点</span>\n<span class=\"hljs-comment\"># 根据上面的nginx配置，判断新节点的端口占用是否导致了50x过多，当超过阈值就将其回退，当没有问题就随着时间不断扩大阈值</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 现有问题:</span>\n<span class=\"hljs-comment\"># 1、如何判断当前应用的健康状态？简单的凭借应用是否存在并不妥当，还需要判断各个接口的流量情况，</span>\n<span class=\"hljs-comment\">#   也就是说需要专门的判断各个接口的运行状态</span>\n<span class=\"hljs-comment\"># 2、是否需要提供手动设置权重的接口</span>\n<span class=\"hljs-comment\"># 3、如果多次发布以谁为准(直接更新替换新节点，因为旧节点是100%没有问题的)</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">commond_deploy()</span> {\n    <span class=\"hljs-comment\"># @args</span>\n    <span class=\"hljs-comment\"># 循环，不断获取应用的状态更新状态</span>\n    <span class=\"hljs-string\">run_str_shell</span> <span class=\"hljs-string\">&quot;$(deploy2_factory)&quot;</span>\n    <span class=\"hljs-string\">update_nginx</span> <span class=\"hljs-comment\"># 初始状态</span>\n\n    <span class=\"hljs-string\">for</span> <span class=\"hljs-string\">((i</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">;</span> <span class=\"hljs-string\">;</span> <span class=\"hljs-string\">i++));</span> <span class=\"hljs-string\">do</span>\n        <span class=\"hljs-string\">sleep</span> <span class=\"hljs-string\">$checktime</span> <span class=\"hljs-comment\"># 正式环境设为3m</span>\n        <span class=\"hljs-string\">status=$(check_status)</span>\n        <span class=\"hljs-comment\"># 检测当前状态是否正常，正常的话就进行扩充流量</span>\n        <span class=\"hljs-string\">if</span> [ <span class=\"hljs-string\">$status</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-number\">0</span> ]<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">then</span>\n            <span class=\"hljs-string\">grayupdate</span>\n        <span class=\"hljs-string\">elif</span> [ <span class=\"hljs-string\">$status</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-number\">1</span> ]<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">then</span>\n            <span class=\"hljs-string\">rollback</span>\n            <span class=\"hljs-string\">break</span>\n        <span class=\"hljs-string\">elif</span> [ <span class=\"hljs-string\">$status</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-number\">2</span> ]<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">then</span>\n            <span class=\"hljs-string\">switch</span>\n            <span class=\"hljs-string\">break</span>\n        <span class=\"hljs-string\">fi</span>\n    <span class=\"hljs-string\">done</span>\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;do here&quot;</span>\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-comment\"># 手动修改nginx的weight配置</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">commond_set()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-comment\"># 保证只有一个脚本实例在执行</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">check_single()</span> {\n    <span class=\"hljs-string\">if</span> [ <span class=\"hljs-string\">-s</span> <span class=\"hljs-string\">$C_FLAG</span> ]<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">then</span> <span class=\"hljs-comment\"># 存在文件且非空</span>\n        <span class=\"hljs-string\">old_pid=$(cat</span> <span class=\"hljs-string\">$C_FLAG)</span>\n        <span class=\"hljs-string\">kill</span> <span class=\"hljs-number\">-9</span> <span class=\"hljs-string\">$old_pid</span>\n    <span class=\"hljs-string\">fi</span>\n\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">$C_PID</span> <span class=\"hljs-string\">&gt;$C_FLAG</span>\n}\n\n<span class=\"hljs-comment\"># 判断当前的流量状况 0正常扩容 1新环境错误进行回退 2新环境无问题直接切换</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">check_status()</span> {\n    <span class=\"hljs-string\">res=$(run_str_shell</span> <span class=\"hljs-string\">&quot;$(deploy2_exist)&quot;</span><span class=\"hljs-string\">)</span>\n    <span class=\"hljs-string\">if</span> [ <span class=\"hljs-string\">-z</span> <span class=\"hljs-string\">&quot;$res&quot;</span> ]<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">then</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-string\">elif</span> [ <span class=\"hljs-string\">$(error_strategy)</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-number\">1</span> ]<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">then</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-string\">elif</span> [ <span class=\"hljs-string\">$weight2</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-number\">100</span> ]<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">then</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-string\">else</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-string\">fi</span>\n}\n\n<span class=\"hljs-comment\"># 判断新节点出错的依据</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">error_strategy()</span> {\n    <span class=\"hljs-string\">cnt=$(grep</span> <span class=\"hljs-string\">&quot;^127.0.0.1:8005|500&quot;</span> <span class=\"hljs-string\">-c</span> <span class=\"hljs-string\">$C_LOG_PATH)</span>\n    <span class=\"hljs-string\">if</span> [ <span class=\"hljs-string\">$cnt</span> <span class=\"hljs-string\">-gt</span> <span class=\"hljs-number\">0</span> ]<span class=\"hljs-string\">;</span> <span class=\"hljs-string\">then</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-string\">else</span>\n        <span class=\"hljs-string\">echo</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-string\">fi</span>\n}\n\n<span class=\"hljs-comment\"># 更新nginx配置</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">update_nginx()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(ingress_factory)&quot;</span> <span class=\"hljs-string\">&gt;$C_INGRESS_CONF</span>\n    <span class=\"hljs-string\">nginx</span> <span class=\"hljs-string\">-s</span> <span class=\"hljs-string\">reload</span>\n}\n\n<span class=\"hljs-comment\"># 回退nginx配置</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">single_nginx()</span> {\n    <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;$(ingress_ori_factory)&quot;</span> <span class=\"hljs-string\">&gt;$C_INGRESS_CONF</span>\n    <span class=\"hljs-string\">nginx</span> <span class=\"hljs-string\">-s</span> <span class=\"hljs-string\">reload</span>\n}\n\n<span class=\"hljs-comment\"># 灰度更新 渐渐扩大流量</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">grayupdate()</span> {\n    <span class=\"hljs-string\">weight1=$((weight1</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">step))</span>\n    <span class=\"hljs-string\">weight2=$((weight2</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-string\">step))</span>\n    <span class=\"hljs-string\">update_nginx</span>\n}\n\n<span class=\"hljs-comment\"># 将流量添加到新的节点中</span>\n<span class=\"hljs-comment\"># 1、根据新镜像创建容器1</span>\n<span class=\"hljs-comment\"># 2、weight1为100 weight2为0</span>\n<span class=\"hljs-comment\"># 3、删除新节点的容器</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">switch()</span> {\n    <span class=\"hljs-string\">res=$(run_str_shell</span> <span class=\"hljs-string\">&quot;$(deploy1_factory)&quot;</span><span class=\"hljs-string\">)</span>\n    <span class=\"hljs-string\">single_nginx</span>\n    <span class=\"hljs-string\">res=$(run_str_shell</span> <span class=\"hljs-string\">&quot;$(deploy2_remove)&quot;</span><span class=\"hljs-string\">)</span>\n}\n\n<span class=\"hljs-comment\"># 回退流量到原来的版本</span>\n<span class=\"hljs-comment\"># 1、将weight1全部为100 weight2为0</span>\n<span class=\"hljs-comment\"># 2、删除新节点的容器</span>\n<span class=\"hljs-string\">function</span> <span class=\"hljs-string\">rollback()</span> {\n    <span class=\"hljs-string\">single_nginx</span>\n    <span class=\"hljs-string\">res=$(run_str_shell</span> <span class=\"hljs-string\">&quot;$(deploy2_remove)&quot;</span><span class=\"hljs-string\">)</span>\n}\n\n<span class=\"hljs-string\">main</span> <span class=\"hljs-string\">$@</span>\n</code></pre>","frontMatter":{"readingTime":{"text":"12 min read","minutes":11.825,"time":709500,"words":2365},"slug":"如何使用nginx实现灰度部署","fileName":"如何使用nginx实现灰度部署.md","title":"如何使用nginx实现灰度部署","date":"2022-03-31T00:00:00.000Z","tags":["实践","云原生"],"draft":false,"summary":"灰度部署"}},"prev":{"title":"数据变更记录工具","date":"2022-03-15T00:00:00.000Z","tags":["实践","云原生"],"draft":false,"summary":"kubernetes环境搭建记录","slug":"一次k8s环境搭建记录"},"next":{"title":"tekton使用示例","date":"2022-05-20T00:00:00.000Z","tags":["实践","云原生"],"draft":false,"summary":"tekton作为云原生中的cd工具，能够轻易的做到task复用，减少重复代码编写","slug":"tekton使用示例"}},"__N_SSG":true}