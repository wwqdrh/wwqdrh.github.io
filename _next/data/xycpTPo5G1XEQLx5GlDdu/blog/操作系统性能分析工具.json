{"pageProps":{"post":{"mdxSource":"<h1>性能分析</h1>\n<blockquote>\n<p>下面的所有测试都是在ubuntu:22的docker镜像环境下测试的\n使用系统自带的工具，对于需要三方安装的工具集会标注出来</p>\n</blockquote>\n<h2>CPU</h2>\n<ul>\n<li>CPU使用率<ul>\n<li>用户CPU</li>\n<li>系统CPU</li>\n<li>IOWAIT</li>\n<li>软中断</li>\n<li>硬中断</li>\n<li>窃取CPU</li>\n<li>客户CPU</li>\n</ul>\n</li>\n<li>上下文切换<ul>\n<li>自愿上下文切换</li>\n<li>非自愿上下文切换</li>\n</ul>\n</li>\n<li>平均负载</li>\n<li>CPU缓存命中率</li>\n</ul>\n<blockquote>\n<p>systat(<code>apt update &amp;&amp; apt install sysstat</code>): 包含的命令包括iostat、mpstat、pidstat、sar、sadc、sa1、sa2、sadf、nfsiostat、cifsiostat</p>\n</blockquote>\n<img src=\"/images/blogs/CPU工具.png\" />\n\n<ul>\n<li>平均负载: 指系统处于可运行状态和不可中断状态的平均进程数, 数值高CPU使用率不一定高，有可能是由于IO导致</li>\n<li>上下文切换: 无法获取资源的自愿切换和系统强制调度时的非自愿切换。过多的切换会导致CPU时间过多消耗在寄存器、内核以及虚拟内存等数据保存和恢复上</li>\n<li>CPU使用率: 分为用户、系统、iowait(等待io的cpu使用率)、软/硬中断CPU使用率、steal cpu/ guest cpu(虚拟机占用)</li>\n<li>CPU缓存命中率: CPU缓存的复用情况,命中率越高性能越好. 其中L1/L2常用在单核,L3则用在多核中。</li>\n<li>对于僵尸问题，用pstree找到父进程，然后看源码检查子进程结束的处理逻辑</li>\n<li>软中断线程CPU使用率高的情况下, 可以借助sar和tcpdump等工具分析来源</li>\n</ul>\n<img src=\"/images/blogs/CPU工具2.png\" />\n\n<h2>优化思路</h2>\n<blockquote>\n<p>先运行几个支持指标较多的工具, 如top/vmstat/pidstat,根据它们的输出可以得出是哪种类型的性能问题. 定位到进程后再用strace/perf分析调用情况进一步分析. 如果是软中断导致用/proc/softirqs</p>\n</blockquote>\n<p>1、使用top命令分析系统的整体运行情况</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-string\">top</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">09</span><span class=\"hljs-string\">:44:56</span> <span class=\"hljs-string\">up</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-string\">days,</span> <span class=\"hljs-number\">21</span><span class=\"hljs-string\">:23,</span>  <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">user,</span>  <span class=\"hljs-attr\">load average:</span> <span class=\"hljs-number\">9.59</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">4.75</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">1.92</span>\n<span class=\"hljs-attr\">Tasks:</span> <span class=\"hljs-number\">145</span> <span class=\"hljs-string\">total,</span>   <span class=\"hljs-number\">2</span> <span class=\"hljs-string\">running,</span> <span class=\"hljs-number\">143</span> <span class=\"hljs-string\">sleeping,</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">stopped,</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">zombie</span>\n<span class=\"hljs-string\">Cpu(s):</span> <span class=\"hljs-number\">99.8</span><span class=\"hljs-string\">%us,</span>  <span class=\"hljs-number\">0.1</span><span class=\"hljs-string\">%sy,</span>  <span class=\"hljs-number\">0.0</span><span class=\"hljs-string\">%ni,</span>  <span class=\"hljs-number\">0.2</span><span class=\"hljs-string\">%id,</span>  <span class=\"hljs-number\">0.0</span><span class=\"hljs-string\">%wa,</span>  <span class=\"hljs-number\">0.0</span><span class=\"hljs-string\">%hi,</span>  <span class=\"hljs-number\">0.0</span><span class=\"hljs-string\">%si,</span>  <span class=\"hljs-number\">0.0</span><span class=\"hljs-string\">%st</span>\n<span class=\"hljs-attr\">Mem:</span>   <span class=\"hljs-string\">4147888k</span> <span class=\"hljs-string\">total,</span>  <span class=\"hljs-string\">2493092k</span> <span class=\"hljs-string\">used,</span>  <span class=\"hljs-string\">1654796k</span> <span class=\"hljs-string\">free,</span>   <span class=\"hljs-string\">158188k</span> <span class=\"hljs-string\">buffers</span>\n<span class=\"hljs-attr\">Swap:</span>  <span class=\"hljs-string\">5144568k</span> <span class=\"hljs-string\">total,</span>       <span class=\"hljs-string\">56k</span> <span class=\"hljs-string\">used,</span>  <span class=\"hljs-string\">5144512k</span> <span class=\"hljs-string\">free,</span>  <span class=\"hljs-string\">2013180k</span> <span class=\"hljs-string\">cached</span>\n</code></pre><p>上面的执行情况的含义</p>\n<ul>\n<li>当前时间为<code>9:44:56</code>, 系统运行了16天，有一个用户当前登录</li>\n<li>系统负载情况<code>9.59 4.75 1.92</code>（系统在过去 1 分钟内，5 分钟内，15 分钟内的平均负载, 在这段时间内总的进程数与处理的进程数之间的比例）</li>\n<li>总进程数145,2个正在运行，143个正在休眠，0个暂停，0个僵死进程</li>\n<li>cpu使用率<ul>\n<li>us (user): 非 nice 用户进程占用 CPU 的比率</li>\n<li>sy (system): 内核、内核进程占用 CPU 的比率</li>\n<li>ni (nice): 用户进程空间内改变过优先级的进程占用 CPU 比率</li>\n<li>id (idle): CPU 空闲比率，如果系统缓慢而这个值很高，说明系统慢的原因不是 CPU 负载高</li>\n<li>wa (iowait): CPU 等待执行 I/O 操作的时间比率，该指标可以用来排查磁盘 I/O 的问题，通常结合 wa 和 id 判断(如果内存充足，但 wa 很高，说明需要检查哪个进程占用了大量的 I/O 资源。如果内存不够就是发生了内存交换导致的)</li>\n<li>hi (Hardware IRQ): CPU 处理硬件中断所占时间的比率</li>\n<li>si (Software Interrupts): CPU 处理软件中断所占时间的比率</li>\n<li>st (steal): 流逝的时间，虚拟机中的其他任务所占 CPU 时间的比率</li>\n</ul>\n</li>\n<li>物理内存总量<code>4147888k</code>, 正在使用<code>2493092k</code>,空闲<code>1654796k</code>, 内核缓存<code>158188k</code></li>\n<li>交换区总量<code>5144568k</code>, 正在使用<code>56k</code>, 空闲<code>5144512k</code>,缓冲区的交换总量<code>2013180k</code></li>\n</ul>\n<p>根据这个运行结果判断具体的瓶颈在那再继续分析</p>\n<p>2、使用vmstat查看系统的上下文切换状态</p>\n<ul>\n<li>进程上下文切换</li>\n<li>线程上下文切换</li>\n<li>中断上下文切换</li>\n</ul>\n<p>当每秒上下文切换超过1w次，或者切换次数出现数量级的增长时，系统可能出现了性能问题。此时可以根据上下文切换类型来具体分析是I/O问题还是CPU瓶颈，或者具体哪一类中断导致的异常</p>\n<p>3、使用pidstat查看是哪个进程状态导致出现问题</p>\n<blockquote>\n<p>需要安装systat</p>\n</blockquote>\n<p>可以查看哪个进程占用了大量的cpu或者io</p>\n<pre><code class=\"hljs language-shell\">pidstat -u 5 1\n</code></pre><p>4、使用perf查看具体进程的执行情况</p>\n<p>5、使用pstree查看进程的层级状态</p>\n<h2>网络</h2>\n<ul>\n<li>应用层<ul>\n<li>QPS</li>\n<li>套接字缓冲区大小</li>\n<li>DNS解析延迟</li>\n<li>响应时间</li>\n<li>错误数</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>TCP连接数: 全连接、半连接、TIMEWAIT</li>\n<li>连接跟踪数</li>\n<li>重传数</li>\n<li>丢包数</li>\n<li>延迟</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>丢包数</li>\n<li>TTL</li>\n<li>拆包</li>\n</ul>\n</li>\n<li>链路层<ul>\n<li>PPS每秒网络帧数</li>\n<li>BPS每秒字节数</li>\n<li>丢包数</li>\n<li>错误数</li>\n</ul>\n</li>\n</ul>\n<p>比较常用的指标包括</p>\n<ul>\n<li>带宽: 最大传输速率 B/s</li>\n<li>吞吐量: 用来评估单位时间内成功传输的数据量</li>\n<li>网络使用率：吞吐量/带宽</li>\n<li>PPS：Packet Per Second（包/秒）,一般用在交换机上，评估数据包的转发能力</li>\n<li>延时：表示从网络中发出请求后，到远端响应的延迟时间</li>\n</ul>\n<img src=\"/images/blogs/网络分析工具.png\" />\n\n<h2>优化思路</h2>\n<p>网络性能优化首先要获得网络基准测试报告，然后通过相关性能工具，定位出网络性能瓶颈，再进行优化。可以从应用程序、套接字、传输层、网络层以及链路层分别来看</p>\n<p>应用层: 通过优化io模型、dns缓存、数据序列化方式等入手</p>\n<p>套接字: 调整每个套接字的缓冲区</p>\n<p>传输层: 优化TCP的TIME_WAIT状态，减少net.ipv4.tcp_fin_timeout让尽快让出资源，端口复用net.ipv4.tcp_tw_reuse。对于SYNC FLOOD问题，可以增大TCP半连接的最大数量，或者开启TCP SYN Cookies来绕开半开连接数量限制，或者减少SYN_RECV的重传SYN+ACK次数</p>\n<p><code>ulimit -n</code>能够查看当前最大的文件句柄限制</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># 参考: https://blog.csdn.net/whatday/article/details/113427085</span>\n\n<span class=\"hljs-comment\"># /etc/sysctl.d</span>\nvim /etc/sysctl.conf\n\nnet.ipv4.tcp_tw_reuse = <span class=\"hljs-number\">1</span>  \nnet.ipv4.tcp_tw_recycle = <span class=\"hljs-number\">1</span>(客户端最好不要设置这个)\n\n<span class=\"hljs-comment\"># 或者</span>\nsysctl net.ipv4.tcp_tw_reuse=<span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\"># 查看内核配置</span>\nsysctl -a | fgrep tcp\n</code></pre><p>在container中修改需要额外注意，如果docker container不是以 –net=”host” 方式启动的，那么它将有自己独立的网络堆栈。修改host的配置将会无效。在container中又无法直接修改/proc，因为docker会以只读的方式重新挂载/proc/sys。 对于这个问题，可以在container启动的时候将/proc挂载到另一可读写位置，譬如</p>\n<p><code>docker run -ti -v /proc:/writable-proc ubuntu:14.04 /bin/bash</code></p>\n<p>或者</p>\n<p><code>docker service update --sysctl-add net.ipv4.tcp_tw_reuse=1 exporterdev</code></p>\n<h2>磁盘</h2>\n<p>文件系统</p>\n<ul>\n<li>存储空间容量、使用空间及剩余空间</li>\n<li>索引节点容量、使用量及剩余量</li>\n<li>缓存<ul>\n<li>页缓存</li>\n<li>目录项缓存</li>\n<li>索引节点缓存</li>\n<li>具体文件系统缓存(例如ext4的缓存)</li>\n</ul>\n</li>\n<li>IOPS文件IO每秒io次数</li>\n<li>响应时间</li>\n<li>吞吐量</li>\n</ul>\n<p>磁盘</p>\n<ul>\n<li>使用率</li>\n<li>IOPS</li>\n<li>吞吐量</li>\n<li>响应时间</li>\n<li>缓冲区</li>\n<li>读写类型(顺序读、随机读)、读写比例、读写大小、存储类型(RAID阵列、本地还是网络)</li>\n</ul>\n<h2>性能指标</h2>\n<p>IOPS是指单位时间内系统能处理的I/O请求数量，I/O请求通常为读或写数据操作请求。随机读写频繁的应用，如OLTP(Online Transaction Processing)，IOPS是关键衡量指标。</p>\n<p>数据吞吐量(Throughput)，指单位时间内可以成功传输的数据数量。对于大量顺序读写的应用，如VOD(Video On Demand)，则更关注吞吐量指标。</p>\n<blockquote>\n<p>每秒 I/O 吞吐量＝ IOPS* 平均 I/O SIZE</p>\n</blockquote>\n<p>对于随机负载，当遇到余下情况时，我们那通常认为存在 I/O 性能问题：</p>\n<ol>\n<li>平均读时间大于 15ms\n2. 在具有写 cache 的条件下，平均写时间大于 2.5ms</li>\n</ol>\n<p>对于顺序负载，当遇到余下情况时，我们那通常认为存在 I/O 性能问题：</p>\n<ol>\n<li>在一个磁盘上有两个连续的 I/O 流</li>\n<li>吞吐量不足（即远远小于磁盘 I/O 带宽）</li>\n</ol>\n<h2>分析工具</h2>\n<img src=\"/images/blogs/io分析工具.png\" />\n\n<ul>\n<li>先用iostat发现磁盘IO性能瓶颈</li>\n<li>再借助pidstat和vmstat定位出导致瓶颈的进程</li>\n<li>随后分析进程的IO行为</li>\n<li>最后结合应用程序的原理，分析这些IO的来源</li>\n</ul>\n<h2>内存</h2>\n<ul>\n<li>系统内存指标<ul>\n<li>已用内存</li>\n<li>剩余内存</li>\n<li>可用内存</li>\n<li>缺页异常: 主缺页异常、次缺页异常</li>\n<li>缓存区: 使用量、命中率</li>\n<li>slabs</li>\n</ul>\n</li>\n<li>进程内存指标<ul>\n<li>VSS虚拟内存</li>\n<li>RSS常驻内存</li>\n<li>PSS按比例分配共享内存后的物理内存</li>\n<li>USS独占内存</li>\n<li>共享内存</li>\n<li>SWAP内存</li>\n<li>缺页异常: 主缺页异常、次缺页异常</li>\n</ul>\n</li>\n<li>SWAP<ul>\n<li>已用空间</li>\n<li>剩余空间</li>\n<li>换入速度</li>\n<li>换出速度</li>\n</ul>\n</li>\n</ul>\n<p>基础性能指标包括，物理内存(RES)、交换区(SWAP)、虚拟内存(VIRT)</p>\n<p>• VIRT 进程的虚拟内存大小\n• RES 常驻内存的大小，即进程实际使用的物理内存大小，不包括swap和共享内存\n• SHR 共享内存大小，与其他进程共享的内存，加载的动态链接库以及程序代码段\n• %MEM 进程使用物理内存占系统总内存的百分比</p>\n<blockquote>\n<p>虚拟内存 = 物理内存 + 交换区</p>\n</blockquote>\n<p>可以使用top查看各个进程大致的内存使用情况</p>\n<blockquote>\n<p>执行<strong>top</strong>命令后，通常不会显示<strong>SWAP</strong>列, 需要进入点击f进入列编辑模式，然后按p，这时swap被选中，然后按回车键就可以了</p>\n</blockquote>\n<p>除了上面这个与进程使用强相关的，还有系统整体的分析指标</p>\n<p>totoal(物理内存总大小)、used(已经使用的物理内存大小)、free(空闲的物理内存)、shared(多个进程共享内存的大小)、buffers/cached(作为缓存的内存大小，buffer用来缓存磁盘文件的元数据例如文件属性、目录结构等，cache缓存的是真正的文件内容)、swap(交换空间的使用状态)</p>\n<h2>常见问题</h2>\n<p>1、空闲空间少不一定是内存不够，linux会尽量提高内存使用率，经常会把磁盘上的内容缓存到内存，用来加速，当内存不足时，linux就会释放缓存部分，让给真正需要的程序使用</p>\n<p>2、内存真正存在问题的情形是: 持续的内存换入换出、较多的主缺页中断</p>\n<p>可以通过sar工具查看到<code>sar -B 1 3</code></p>\n<blockquote>\n<p>主缺页中断(majflt): 内存中找不到，需要到磁盘中找\n次缺页中断(fault): 在内存中可以找到目标页</p>\n</blockquote>\n<p>内存的换入换出(pgpgin/pgpgout)</p>\n<img src=\"/images/blogs/sar示例.png\" />\n\n<p>vmstat可以查看空闲的物理内存、缓存、以及换入换出之类的</p>\n<h2>常用工具</h2>\n<img src=\"/images/blogs/内存分析工具.png\" />\n\n<h1>命令概览</h1>\n<h2>top</h2>\n<p>可以查看进程状态(正在运行、睡眠、停止的)，用户空间占比，内存使用情况(物理内存总量、交换区总量等)</p>\n<p>第一行是任务队列信息：当前时间、系统运行时间、当前登录用户数，系统负载(任务队列的平均长度)</p>\n<ul>\n<li>2500 毫秒刷新一次 TOP 内容，总共 5 次，输出内容存放到 performace.txt 文件中: <code>top -b -d 2.5 -n 5 &gt; performace.txt</code></li>\n<li>TOP 默认排序为倒序，如果确实需要升序排序，可以使用大写字母按键：R</li>\n</ul>\n<h2>vmstat</h2>\n<p>可以用于查看进程(运行队列中进程数量，等待IO的进程数量)、内存、IO等系统的整体运行状态</p>\n<p>si、so为交换区与内存之间的换入换出，如果长期大于0说明经常发生内存交换，硬盘io和CPU都会消耗，这个时候需要扩大内存</p>\n<p>in: 每秒中断数包括时钟中断，cs: 每秒上下文切换数。这两个数值越大，内核消耗的CPU时间越大</p>\n<p>wa高说明IO等待比较严重，这可能是由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈(块操作)</p>\n<p>us: 用户进程执行时间百分比(user time)。us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。</p>\n<p>sy: 内核系统进程执行时间百分比。sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-string\">vmstat</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-string\">procs</span> <span class=\"hljs-string\">-----------memory----------</span> <span class=\"hljs-string\">---swap--</span> <span class=\"hljs-string\">-----io----</span> <span class=\"hljs-string\">--system--</span> <span class=\"hljs-string\">-----cpu------</span>\n <span class=\"hljs-string\">r</span>  <span class=\"hljs-string\">b</span>   <span class=\"hljs-string\">swpd</span>   <span class=\"hljs-string\">free</span>   <span class=\"hljs-string\">buff</span>  <span class=\"hljs-string\">cache</span>   <span class=\"hljs-string\">si</span>   <span class=\"hljs-string\">so</span>    <span class=\"hljs-string\">bi</span>    <span class=\"hljs-string\">bo</span>   <span class=\"hljs-string\">in</span>   <span class=\"hljs-string\">cs</span> <span class=\"hljs-string\">us</span> <span class=\"hljs-string\">sy</span> <span class=\"hljs-string\">id</span> <span class=\"hljs-string\">wa</span> <span class=\"hljs-string\">st</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167332</span> <span class=\"hljs-number\">1534368</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">4</span>     <span class=\"hljs-number\">7</span>    <span class=\"hljs-number\">1</span>    <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">99</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167332</span> <span class=\"hljs-number\">1534392</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1002   </span><span class=\"hljs-number\">39</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167336</span> <span class=\"hljs-number\">1534392</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">19</span> <span class=\"hljs-number\">1002   </span><span class=\"hljs-number\">44</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167336</span> <span class=\"hljs-number\">1534392</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1002   </span><span class=\"hljs-number\">41</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">320</span>  <span class=\"hljs-number\">42188</span> <span class=\"hljs-number\">167336</span> <span class=\"hljs-number\">1534392</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1002   </span><span class=\"hljs-number\">41</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>\n</code></pre><h2>pidstat</h2>\n<ul>\n<li>-u：默认的参数，显示各个进程的cpu使用统计</li>\n<li>-r：显示各个进程的内存使用统计</li>\n<li>-d：显示各个进程的IO使用情况</li>\n<li>-p：指定进程号</li>\n<li>-w：显示每个进程的上下文切换情况</li>\n<li>-t：显示选择任务的线程的统计信息外的额外信息</li>\n</ul>\n<p><code>pidstat -u 5 1</code>： 查看哪个进程占用了大量的CPU或者io</p>\n<p><code>pidstat -u -p ALL</code>: 查看所有进程的CPU使用情况</p>\n<p><code>pidstat -r -p [pid] [时间间隔] [收集次数]</code></p>\n<h2>lsof</h2>\n<p>lsof中<code>-P</code>是禁止将端口转成别名(例如<code>8000 -&gt; irdmi</code>, <code>8001 -&gt; vcom-tunnel</code>)</p>\n<p>1、通过端口获取pid: <code>lsof -i:[端口] -P -t</code></p>\n<p>2、通过pid获取端口占用情况<code>lsof -i -P | grep [pid]</code></p>\n","frontMatter":{"readingTime":{"text":"20 min read","minutes":19.88,"time":1192800,"words":3976},"slug":"操作系统性能分析工具","fileName":"操作系统性能分析工具.md","title":"操作系统性能分析工具","date":"2022-10-10T00:00:00.000Z","tags":["操作系统"],"draft":false,"summary":"操作系统性能分析工具"}},"prev":{"title":"表达时间的格式","date":"2022-10-10T00:00:00.000Z","tags":["操作系统"],"draft":false,"summary":"表达时间的格式","slug":"时间格式"},"next":{"title":"golang编程中常见的问题","date":"2022-10-10T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"golang编程中常见的问题","slug":"常见编码问题"}},"__N_SSG":true}