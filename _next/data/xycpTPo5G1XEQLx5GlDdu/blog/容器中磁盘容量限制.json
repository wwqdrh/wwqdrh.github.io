{"pageProps":{"post":{"mdxSource":"<h1>背景</h1>\n<p>容器与宿主机共享磁盘空间，如果不做容量限制，会存在写满宿主机的可能</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># 下面的就是在容器中查看到的，实际的空间量就是宿主机上的</span>\n$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\noverlay          49G   22G   25G  <span class=\"hljs-number\">47</span>% /\n</code></pre><p>overlay文件系统中并没有直接限制磁盘quota的功能</p>\n<p>当使用docker时限制的操作，也就是用 XFS Quota 来限制容器的 OverlayFS 大小，限制upperdir的目录大小</p>\n<blockquote>\n<p>swarm模式下不支持限制容器的磁盘quota(或者暂时不知道🤔</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># docker模式下</span>\n$docker run -it --rm --storage-opt size=10M ubuntu:<span class=\"hljs-number\">22.10</span> bash\ndocker: Error response <span class=\"hljs-keyword\">from</span> daemon: --storage-opt <span class=\"hljs-keyword\">is</span> supported only <span class=\"hljs-keyword\">for</span> overlay over xfs <span class=\"hljs-keyword\">with</span> <span class=\"hljs-string\">&#x27;pquota&#x27;</span> mount option.\n</code></pre><p>查看docker源码中会发现使用了xfs的project机制,下面是核心代码</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">// moby/quota/projectquota.go</span>\n<span class=\"hljs-comment\">// setProjectQuota - set the quota for project id on xfs block device</span>\n<span class=\"hljs-function\">func <span class=\"hljs-title\">setProjectQuota</span><span class=\"hljs-params\">(backingFsBlockDev string, projectID uint32, quota Quota)</span> error </span>{\n    var d C.<span class=\"hljs-type\">fs_disk_quota_t</span>\n    d.d_version = C.FS_DQUOT_VERSION\n    d.d_id = C.__u32(projectID)\n    d.d_flags = C.XFS_PROJ_QUOTA\n\n    d.d_fieldmask = C.FS_DQ_BHARD | C.FS_DQ_BSOFT\n    d.d_blk_hardlimit = C.__u64(quota.Size / <span class=\"hljs-number\">512</span>)\n    d.d_blk_softlimit = d.d_blk_hardlimit\n\n    var cs = C.<span class=\"hljs-built_in\">CString</span>(backingFsBlockDev)\n    defer C.<span class=\"hljs-built_in\">free</span>(unsafe.<span class=\"hljs-built_in\">Pointer</span>(cs))\n\n    _, _, errno := unix.<span class=\"hljs-built_in\">Syscall6</span>(unix.SYS_QUOTACTL, C.Q_XSETPQLIM,\n        <span class=\"hljs-built_in\">uintptr</span>(unsafe.<span class=\"hljs-built_in\">Pointer</span>(cs)), <span class=\"hljs-built_in\">uintptr</span>(d.d_id),\n        <span class=\"hljs-built_in\">uintptr</span>(unsafe.<span class=\"hljs-built_in\">Pointer</span>(&amp;d)), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">if</span> errno != <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">return</span> errors.<span class=\"hljs-built_in\">Wrapf</span>(errno, <span class=\"hljs-string\">&quot;failed to set quota limit for projid %d on %s&quot;</span>,\n            projectID, backingFsBlockDev)\n    }\n\n    <span class=\"hljs-keyword\">return</span> nil\n}\n</code></pre><h1>docker环境下实验</h1>\n<p>前面看到不做特殊处理的docker是无法使用磁盘quota限制的</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-string\">$</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">info</span>\n<span class=\"hljs-string\">...</span>\n<span class=\"hljs-attr\">Storage Driver:</span> <span class=\"hljs-string\">overlay2</span>\n  <span class=\"hljs-attr\">Backing Filesystem:</span> <span class=\"hljs-string\">extfs</span>\n  <span class=\"hljs-attr\">Supports d_type:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">Native Overlay Diff:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">userxattr:</span> <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-string\">...</span>\n</code></pre><p>目前后端的文件系统是extfs，需要切换至xfs</p>\n<pre><code class=\"hljs language-bash\">$ docker info | grep <span class=\"hljs-string\">&quot;Docker Root Dir&quot;</span>\n<span class=\"hljs-title class_\">Docker</span> <span class=\"hljs-title class_\">Root</span> <span class=\"hljs-title class_\">Dir</span>: <span class=\"hljs-regexp\">/var/</span>lib/docker\n\n$ df -T -h /<span class=\"hljs-keyword\">var</span>/lib/docker\n<span class=\"hljs-title class_\">Filesystem</span>     <span class=\"hljs-title class_\">Type</span>  <span class=\"hljs-title class_\">Size</span>  <span class=\"hljs-title class_\">Used</span> <span class=\"hljs-title class_\">Avail</span> <span class=\"hljs-title class_\">Use</span>% <span class=\"hljs-title class_\">Mounted</span> on\n/dev/sda3      ext4   49G   22G   25G  <span class=\"hljs-number\">47</span>% /\n</code></pre><blockquote>\n<p>蚌埠住了, docker直接安装在的根目录，文件系统是ext4，也就是必须重新安装docker在xfs文件系统的挂载点上</p>\n</blockquote>\n<h1>在xfs文件系统上实验</h1>\n<p>实验一下手动限制</p>\n<p>要使用 XFS Quota 特性，必须在文件系统挂载的时候加上对应的 Quota 选项，比如需要配置 Project Quota，那么这个挂载参数就是&quot;pquota&quot;。</p>\n<blockquote>\n<p>对于根目录来说，这个参数必须作为一个内核启动的参数&quot;rootflags=pquota&quot;，这样设置就可以保证根目录在启动挂载的时候，带上 XFS Quota 的特性并且支持 Project 模式。</p>\n</blockquote>\n<p>由于我的根目录是ext4文件格式，所以新创建一个分区，格式化为xfs系统，并且配置为project quota</p>\n<blockquote>\n<p>This disk is currently in use - repartitioning is probably a bad idea.\nIt&#39;s recommended to umount all file systems, and swapoff all swap\npartitions on this disk.\n为正在使用的磁盘建立分区不是一个好主意，要么新建一个磁盘，我这里由于使用的是虚拟机，就用虚拟机添加一块硬盘</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\">$ sudo apt-get install xfsprogs  <span class=\"hljs-comment\"># xfs文件系统相关工具集</span>\n\n$ fdisk -l\n\n$ fdisk /dev/sdb\nCommand (m <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): n     &lt;- 新建分区\nCommand action              &lt;- 选择要创建的分区类型\n   e   extended &lt;- 扩展分区\n   p   primary partition (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>) &lt;- 主分区\np &lt;- 输入建立主分区\nPartition number (<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">4</span>):<span class=\"hljs-number\">1</span>    &lt;- 分区编号\nFirst sector (<span class=\"hljs-number\">2048</span>-<span class=\"hljs-number\">20971519</span>, default <span class=\"hljs-number\">2048</span>): &lt;- 直接回车默认\nLast sector, +/-sectors <span class=\"hljs-keyword\">or</span> +/-size{K,M,G,T,P} (<span class=\"hljs-number\">2048</span>-<span class=\"hljs-number\">20971519</span>, default <span class=\"hljs-number\">20971519</span>):     +1G  &lt;-分区大小\nCommand (m <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): w     &lt;- 保存分区表, 完毕会退出fdisk命令\nThe partition table has been altered!\n\nCalling ioctl() to re-read partition table.\nSyncing disks.\n\n$ fdisk /dev/sdb <span class=\"hljs-comment\"># 查看分区是否创建成功</span>\nCommand (m <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">help</span>): p     &lt;- 打印当前磁盘的分区信息\n...\nDevice     Boot Start     End Sectors Size Id <span class=\"hljs-type\">Type</span>\n/dev/sdb1        <span class=\"hljs-number\">2048</span> <span class=\"hljs-number\">2099199</span> <span class=\"hljs-number\">2097152</span>   1G <span class=\"hljs-number\">83</span> Linux\n...\n\n$ mkfs.xfs /dev/sdb1 <span class=\"hljs-comment\"># 为分区格式化文件系统, 如果出现`The device apparently does not exist; did you specify it correctly?`,需要重启系统然后格式化</span>\n</code></pre><p>挂载分区，要使用Project Quota 功能，需要在挂载时指定<code>-o prjquota</code>参数，并且这个参数还不能和usrquota、grpquota一起使用，也就是说，如果开启Project Quota就无法使用针对用户和用户组的配额限制。</p>\n<pre><code class=\"hljs language-bash\">$ rm -rf /xfstest &amp;&amp; mkdir /xfstest &amp;&amp; mount -o prjquota /dev/sdb1 /xfstest\n\n$ rm -rf /xfstest &amp;&amp; mkdir /xfstest &amp;&amp; mount -o pquota /dev/sdb1 /xfstest\n\n$ df -lhT\nFilesystem     <span class=\"hljs-type\">Type</span>     Size  Used Avail Use% Mounted on\n...\n/dev/sdb1      xfs     1014M   40M  975M   <span class=\"hljs-number\">4</span>% /xfstest\n\n$ cat /proc/mounts | grep prjquota <span class=\"hljs-comment\"># 检验是否生效</span>\n/dev/sdb1 /xfstest xfs rw,relatime,attr2,inode64,logbufs=<span class=\"hljs-number\">8</span>,logbsize=32k,prjquota <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n</code></pre><p>给一个指定的目录打上一个 Project ID，对打好project id的做上资源限制</p>\n<pre><code class=\"hljs language-bash\">$ mkdir -p /xfstest/xfs_prjquota \n\n$ xfs_quota -x -c <span class=\"hljs-string\">&#x27;project -s -p /xfstest/xfs_prjquota 1&#x27;</span> <span class=\"hljs-comment\"># 为文件夹分配ProjectID 1</span>\n\n$ xfs_quota -x -c <span class=\"hljs-string\">&#x27;limit -p bhard=10m 1&#x27;</span> /xfstest  <span class=\"hljs-comment\"># 后面的/xfstest就是这个xfs文件系统的挂载点</span>\n</code></pre><p>实验一下能否完成资源限制</p>\n<pre><code class=\"hljs language-bash\">$ dd <span class=\"hljs-keyword\">if</span>=/dev/zero of=/xfstest/xfs_prjquota/test.file bs=<span class=\"hljs-number\">1024</span> count=<span class=\"hljs-number\">20000</span>  <span class=\"hljs-comment\"># 20000个1024大小的区块，20m</span>\ndd: error writing <span class=\"hljs-string\">&#x27;/xfstest/xfs_prjquota/test.file&#x27;</span>: No space left on device\n<span class=\"hljs-number\">10241</span>+<span class=\"hljs-number\">0</span> records <span class=\"hljs-keyword\">in</span>\n<span class=\"hljs-number\">10240</span>+<span class=\"hljs-number\">0</span> records out\n<span class=\"hljs-number\">10485760</span> <span class=\"hljs-built_in\">bytes</span> (<span class=\"hljs-number\">10</span> MB, <span class=\"hljs-number\">10</span> MiB) copied, <span class=\"hljs-number\">0.0514849</span> s, <span class=\"hljs-number\">204</span> MB/s\n\n$ du -h /xfstest\n10M\t/xfstest/xfs_prjquota\n10M\t/xfstest\n</code></pre><p>实验成功</p>\n<blockquote>\n<p>docker部分重新安装那代价有点大，下次有空再试😂</p>\n</blockquote>\n","frontMatter":{"readingTime":{"text":"7 min read","minutes":6.87,"time":412200,"words":1374},"slug":"容器中磁盘容量限制","fileName":"容器中磁盘容量限制.md","title":"容器中磁盘容量限制实践","date":"2022-11-02T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"容器中磁盘容量限制实践"}},"prev":{"title":"overlay文件系统","date":"2022-11-01T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"overlay文件系统实践，探索容器原理","slug":"overlay文件系统实验"},"next":{"title":"什么是进程","date":"2023-02-28T00:00:00.000Z","tags":["计算机原理"],"draft":false,"summary":"什么是进程","slug":"什么是进程"}},"__N_SSG":true}