{"pageProps":{"post":{"mdxSource":"<h2>如何查看cgroup版本</h2>\n<p>cgroupv1和v2有所区别，groupv2各项指标是混在一个group下的，而不是在具体的指标下再分组</p>\n<pre><code class=\"hljs language-bash\">$mount | grep cgroup\n\ncgroup2 on /sys/fs/cgroup <span class=\"hljs-built_in\">type</span> cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)\n</code></pre><h2>如何创建与删除cgroup</h2>\n<p>cgroupv2</p>\n<pre><code class=\"hljs language-bash\">mkdir [name]\n\nrmdir [name] <span class=\"hljs-comment\"># ! 不能rm -rf之类的</span>\n</code></pre><h2>如何查看一个容器中有哪些进程(宿主机pid)</h2>\n<p><code>cat /sys/fs/cgroup/system.slice/docker-[pid].scope/cgroup.procs</code></p>\n<h2>如何查看一个pid有哪些命名空间</h2>\n<p><code>ls /proc/[pid]/ns</code></p>\n<h2>如何进入一个命名空间</h2>\n<p>进入已经存在的进程的指定空间</p>\n<p><code>nsenter --target 58212 --mount --uts --ipc --net --pid -- env --ignore-environment -- /bin/bash</code></p>\n<p>创建并进入新的命名空间并执行命令</p>\n<p><code>unshare --mount --ipc --pid --net --mount-proc=/proc --fork /bin/bash</code></p>\n<h2>关于命名空间的函数</h2>\n<p>在每一个进程的 task_struct 里面，有一个指向 namespace 结构体的指针 nsproxy。</p>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-comment\">// 创建一个新的进程，并把它放到新的 namespace 中。</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">clone</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> (*fn)(<span class=\"hljs-type\">void</span> *), <span class=\"hljs-type\">void</span> *child_stack, <span class=\"hljs-type\">int</span> flags, <span class=\"hljs-type\">void</span> *arg)</span></span>;\n\n<span class=\"hljs-comment\">// 用于将当前进程加入到已有的 namespace 中</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">setns</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> fd, <span class=\"hljs-type\">int</span> nstype)</span></span>;\n\n<span class=\"hljs-comment\">// 它可以使当前进程退出当前的 namespace，并加入到新创建的 namespace</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">unshare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> flags)</span></span>;\n</code></pre><h1>资源限制</h1>\n<blockquote>\n<p>参考: <a href=\"https://docs.kernel.org/admin-guide/cgroup-v2.html#cpu\">https://docs.kernel.org/admin-guide/cgroup-v2.html#cpu</a></p>\n</blockquote>\n<p><code>v1与v2各个指标的变化</code></p>\n<ul>\n<li>&quot;cpu.shares&quot; =&gt; &quot;cpu.weight&quot;</li>\n<li>&quot;cpu.cfs_quota_us&quot; + &quot;cpu.cfs_period_us&quot; =&gt; &quot;cpu.max&quot;</li>\n</ul>\n<h2>加入进程到cgroup中</h2>\n<p>将进程移动到指定 cgroup：将 PID 写到相应 cgroup 的 cgroup.procs 文件即可。</p>\n<h2>如何限制容器的CPU使用</h2>\n<p>v1</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># 限制成1.5个CPU 150000(150ms,一个cfs周期可以使用的时间) / 100000(一个cfs周期的时间) = 1.5</span>\necho [pid] &gt;&gt; /sys/fs/cgroup/[group]/cgroup.procs\necho <span class=\"hljs-number\">100</span> &gt;&gt; /sys/fs/cgroup/[group]/cpu.cfs_period_us\necho <span class=\"hljs-number\">150000</span> &gt;&gt; /sys/fs/cgroup/[group]/cpu.cfs_quota_us\n</code></pre><p>v2</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># 限制成1.5个CPU 150000(150ms,一个cfs周期可以使用的时间) / 100000(一个cfs周期的时间) = 1.5</span>\necho [pid] &gt;&gt; /sys/fs/cgroup/[group]/cgroup.procs\necho <span class=\"hljs-number\">100</span> &gt;&gt; /sys/fs/cgroup/[group]/cpu.weight <span class=\"hljs-comment\"># default also 100</span>\necho <span class=\"hljs-number\">150000</span> &gt;&gt; /sys/fs/cgroup/[group]/cpu.<span class=\"hljs-built_in\">max</span> <span class=\"hljs-comment\"># default is 100000</span>\n</code></pre><h2>如何控制一个容器的最大内存使用量</h2>\n<p>假设设置上限为2g(<code>2*1024*1024*1024 = 2147483648</code>)，</p>\n<p><code>echo memory.limit_in_bytes &gt; /sys/fs/cgroup/system.slice/docker-[pid].scope/memory.limit_in_bytes</code></p>\n","frontMatter":{"readingTime":{"text":"3 min read","minutes":2.73,"time":163800,"words":546},"slug":"容器操作指南","fileName":"容器操作指南.md","title":"容器的操作指南","date":"2022-10-17T00:00:00.000Z","tags":["容器"],"draft":false,"summary":"容器的操作指南"}},"prev":{"title":"golang编译原理","date":"2022-10-10T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"golang编译原理","slug":"Go的编译原理"},"next":{"title":"docker-swarm的工作原理","date":"2022-10-26T00:00:00.000Z","tags":["云原生"],"draft":false,"summary":"docker-swarm的工作原理","slug":"swarm工作模式"}},"__N_SSG":true}