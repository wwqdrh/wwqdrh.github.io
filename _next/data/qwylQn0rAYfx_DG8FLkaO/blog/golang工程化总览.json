{"pageProps":{"post":{"mdxSource":"<h1>fmt</h1>\n<p>代码风格格式化 gofmt、go fmt标准工具</p>\n<h1>vet</h1>\n<p>捕捉可能出现的错误 标准工具 一般来说编辑器例如vscode都已经集成了这些功能，所以不需要单独检测</p>\n<p><code>go vet -all</code></p>\n<p>vet一般是检查</p>\n<pre><code class=\"hljs language-go\">package main \n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span> \n\n<span class=\"hljs-comment\">// Prints out &quot;Super Mario 3&quot; </span>\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) { \n    game_version :=<span class=\"hljs-number\">3</span> \n    fmt.<span class=\"hljs-title class_\">Printf</span>(<span class=\"hljs-string\">&quot;Super Mario %s\\n&quot;</span>,game_version) \n    <span class=\"hljs-comment\">// ./main.go:6:2: Printf format %s has arg 3 of wrong type int</span>\n}\n</code></pre><h1>lint</h1>\n<p>代码静态检查</p>\n<p>golint、golangci-lint</p>\n<h2>golangci-lint</h2>\n<blockquote>\n<p>参考: <a href=\"https://golangci-lint.run/usage/configuration/\">https://golangci-lint.run/usage/configuration/</a></p>\n</blockquote>\n<p><code>golangci-lint run</code></p>\n<p><code>.golangci.yaml</code>配置lint选项</p>\n<h3>配置项</h3>\n<p>run</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">run:</span>\n  <span class=\"hljs-attr\">concurrency:</span> <span class=\"hljs-number\">4</span>\n  <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">5m</span>\n  <span class=\"hljs-attr\">issues-exit-code:</span> <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-attr\">tests:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">build-tags:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">mytag</span>\n  <span class=\"hljs-attr\">skip-dirs:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">src/external_libs</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">autogenerated_by_my_lib</span>\n  <span class=\"hljs-attr\">skip-dirs-use-default:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">skip-files:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;.*\\\\.my\\\\.go$&quot;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">lib/bad.go</span>\n  <span class=\"hljs-attr\">modules-download-mode:</span> <span class=\"hljs-string\">readonly</span> <span class=\"hljs-comment\"># readonly|vendor|mod</span>\n  <span class=\"hljs-attr\">allow-parallel-runners:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># If false (default) - golangci-lint acquires file lock on start.</span>\n  <span class=\"hljs-attr\">go:</span> <span class=\"hljs-string\">&#x27;1.18&#x27;</span>\n</code></pre><p>output</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">output:</span>\n  <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">json</span> <span class=\"hljs-comment\"># colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions</span>\n  <span class=\"hljs-attr\">print-issued-lines:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">print-linter-name:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">uniq-by-line:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">path-prefix:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n  <span class=\"hljs-attr\">sort-results:</span> <span class=\"hljs-literal\">false</span>\n</code></pre><p>linters</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">linters:</span>\n  <span class=\"hljs-attr\">disable-all:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># Default: false</span>\n  <span class=\"hljs-comment\"># Enable specific linter</span>\n  <span class=\"hljs-comment\"># https://golangci-lint.run/usage/linters/#enabled-by-default</span>\n  <span class=\"hljs-attr\">enable:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">asasalint</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">asciicheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bidichk</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bodyclose</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">containedctx</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">contextcheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cyclop</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">deadcode</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">decorder</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">depguard</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dogsled</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dupl</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dupword</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">durationcheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">errcheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">errchkjson</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">errname</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">errorlint</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">execinquery</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">exhaustive</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">exhaustivestruct</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">exhaustruct</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">exportloopref</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">forbidigo</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">forcetypeassert</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">funlen</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gci</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gochecknoglobals</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gochecknoinits</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gocognit</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">goconst</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gocritic</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gocyclo</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">godot</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">godox</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">goerr113</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gofmt</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gofumpt</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">goheader</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">goimports</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">golint</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gomnd</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gomoddirectives</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gomodguard</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">goprintffuncname</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gosec</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gosimple</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">govet</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">grouper</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ifshort</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">importas</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ineffassign</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">interfacebloat</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">interfacer</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ireturn</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">lll</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">loggercheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">maintidx</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">makezero</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">maligned</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">misspell</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nakedret</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nestif</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nilerr</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nilnil</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nlreturn</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">noctx</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nolintlint</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nonamedreturns</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nosnakecase</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">nosprintfhostport</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">paralleltest</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">prealloc</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">predeclared</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">promlinter</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">reassign</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">revive</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">rowserrcheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">scopelint</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">sqlclosecheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">staticcheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">structcheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">stylecheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">tagliatelle</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">tenv</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">testableexamples</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">testpackage</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">thelper</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">tparallel</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">typecheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">unconvert</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">unparam</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">unused</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">usestdlibvars</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">varcheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">varnamelen</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">wastedassign</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">whitespace</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">wrapcheck</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">wsl</span>\n  <span class=\"hljs-attr\">enable-all:</span> <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\"># Default: false</span>\n  <span class=\"hljs-attr\">disable:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-comment\"># 同enable项一样</span>\n  <span class=\"hljs-comment\"># Enable presets.</span>\n  <span class=\"hljs-comment\"># https://golangci-lint.run/usage/linters</span>\n  <span class=\"hljs-attr\">presets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bugs</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">comment</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">complexity</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">error</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">format</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">import</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">metalinter</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">module</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">performance</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">sql</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">style</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">test</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">unused</span>\n  <span class=\"hljs-comment\"># Run only fast linters from enabled linters set (first run won&#x27;t be fast)</span>\n  <span class=\"hljs-comment\"># Default: false</span>\n  <span class=\"hljs-attr\">fast:</span> <span class=\"hljs-literal\">true</span>\n</code></pre><p>issues</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">issues:</span>\n  <span class=\"hljs-attr\">exclude:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">abcdef</span>\n  <span class=\"hljs-comment\"># Excluding configuration per-path, per-linter, per-text and per-source</span>\n  <span class=\"hljs-attr\">exclude-rules:</span>\n    <span class=\"hljs-comment\"># Exclude some linters from running on tests files.</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">_test\\.go</span>\n      <span class=\"hljs-attr\">linters:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gocyclo</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">errcheck</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dupl</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gosec</span>\n    <span class=\"hljs-comment\"># Exclude known linters from partially hard-vendored code,</span>\n    <span class=\"hljs-comment\"># which is impossible to exclude via `nolint` comments.</span>\n    <span class=\"hljs-comment\"># `/` will be replaced by current OS file path separator to properly work on Windows.</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">internal/hmac/</span>\n      <span class=\"hljs-attr\">text:</span> <span class=\"hljs-string\">&quot;weak cryptographic primitive&quot;</span>\n      <span class=\"hljs-attr\">linters:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">gosec</span>\n    <span class=\"hljs-comment\"># Exclude some `staticcheck` messages.</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">linters:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">staticcheck</span>\n      <span class=\"hljs-attr\">text:</span> <span class=\"hljs-string\">&quot;SA9003:&quot;</span>\n    <span class=\"hljs-comment\"># Exclude `lll` issues for long lines with `go:generate`.</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">linters:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">lll</span>\n      <span class=\"hljs-attr\">source:</span> <span class=\"hljs-string\">&quot;^//go:generate &quot;</span>\n  <span class=\"hljs-attr\">exclude-use-default:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">exclude-case-sensitive:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-comment\"># The list of ids of default excludes to include or disable.</span>\n  <span class=\"hljs-comment\"># https://golangci-lint.run/usage/false-positives/#default-exclusions</span>\n  <span class=\"hljs-comment\"># Default: []</span>\n  <span class=\"hljs-attr\">include:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0001</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0002</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0003</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0004</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0005</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0006</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0007</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0008</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0009</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0010</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0011</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0012</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0013</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0014</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">EXC0015</span>\n  <span class=\"hljs-comment\"># Maximum issues count per one linter.</span>\n  <span class=\"hljs-comment\"># Set to 0 to disable.</span>\n  <span class=\"hljs-comment\"># Default: 50</span>\n  <span class=\"hljs-attr\">max-issues-per-linter:</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-comment\"># Maximum count of issues with the same text.</span>\n  <span class=\"hljs-comment\"># Set to 0 to disable.</span>\n  <span class=\"hljs-comment\"># Default: 3</span>\n  <span class=\"hljs-attr\">max-same-issues:</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-comment\"># Show only new issues: if there are unstaged changes or untracked files,</span>\n  <span class=\"hljs-comment\"># only those changes are analyzed, else only changes in HEAD~ are analyzed.</span>\n  <span class=\"hljs-comment\"># It&#x27;s a super-useful option for integration of golangci-lint into existing large codebase.</span>\n  <span class=\"hljs-comment\"># It&#x27;s not practical to fix all existing issues at the moment of integration:</span>\n  <span class=\"hljs-comment\"># much better don&#x27;t allow issues in new code.</span>\n  <span class=\"hljs-comment\">#</span>\n  <span class=\"hljs-comment\"># Default: false.</span>\n  <span class=\"hljs-attr\">new:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-comment\"># Show only new issues created after git revision `REV`.</span>\n  <span class=\"hljs-attr\">new-from-rev:</span> <span class=\"hljs-string\">HEAD</span>\n  <span class=\"hljs-comment\"># Show only new issues created in git patch with set file path.</span>\n  <span class=\"hljs-attr\">new-from-patch:</span> <span class=\"hljs-string\">path/to/patch/file</span>\n  <span class=\"hljs-comment\"># Fix found issues (if it&#x27;s supported by the linter).</span>\n  <span class=\"hljs-attr\">fix:</span> <span class=\"hljs-literal\">true</span>\n</code></pre><p>severity</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">severity:</span>\n  <span class=\"hljs-attr\">default-severity:</span> <span class=\"hljs-string\">error</span>\n  <span class=\"hljs-attr\">case-sensitive:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">rules:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">linters:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dupl</span>\n      <span class=\"hljs-attr\">severity:</span> <span class=\"hljs-string\">info</span>\n</code></pre><h1>单元测试</h1>\n<p>在单元测试领域，关于如何替换掉外部依赖，主要有两种技术，分别是 mock 和 stub：mock 通过接口可以动态调整外部依赖的返回值，而 stub 只能在运行时静态调整外部依赖的返回值</p>\n<blockquote>\n<p>使用这些都是就是为了替换外部依赖时候使用的，只是为了单元测试覆盖率变高一点😹</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\">github.com/stretchr/testify/<span class=\"hljs-keyword\">assert</span>\n\ngithub.com/smartystreets/goconvey/convey\n\ngithub.com/golang/mock/gomock\n</code></pre><p><code>go install github.com/golang/mock/mockgen@latest</code></p>\n<h2>gotest</h2>\n<p>官方内置的工具</p>\n<ul>\n<li>性能测试</li>\n</ul>\n<p><code>go test -bench</code></p>\n<p>定义Bench开头的测试函数</p>\n<ul>\n<li>覆盖率</li>\n</ul>\n<p><code>go test -cover</code></p>\n<ul>\n<li>竞态检查</li>\n</ul>\n<p><code>go test -race</code>用于检查代码中是否存在并发安全问题</p>\n<h2>testify</h2>\n<ul>\n<li>assert</li>\n<li>require(与assert一样，不过异常会退出)</li>\n<li>mock</li>\n</ul>\n<blockquote>\n<p>在要编写一个从一个站点拉取用户列表信息的程序，拉取完成之后程序显示和分析。如果每次都去访问网络会带来极大的不确定性，甚至每次返回不同的列表，这就给测试带来了极大的困难。我们可以使用 Mock 技术。</p>\n</blockquote>\n<p>但是问题在于如果直接使用新的接口进行了替换，那么会导致有些代码分支进入不到，覆盖率降低</p>\n<ul>\n<li>suite</li>\n</ul>\n<h2>gomock</h2>\n<p><code>go mock</code></p>\n<pre><code class=\"hljs language-bash\">go get -u github.com/golang/mock/gomock go get -u github.com/golang/mock/mockgen\n</code></pre><p>要使用gomock的一个前提是模块之间务必通过接口进行依赖，而不是依赖具体实现，否则mock会非常困难。这个工具目前业界用的并不多，主要是局限性太大</p>\n<p>在实际项目中，当需要进行单元测试时，往往会有很多的依赖项，有些依赖可能还没有办法直接进行创建，例如数据库连接，文件 I/O 等。此时通过使用 go mock 可以模拟依赖项，简化测试。</p>\n<p><strong>桩</strong>，或称桩代码，是指用来代替关联代码或者未实现代码的代码。如果函数 B 用 B1 来代替，那么，B 称为原函数，B1 称为桩函数。打桩就是编写或生成桩代码。</p>\n<h2>gostub</h2>\n<p><code>go get github.com/prashantv/gostub</code></p>\n<ul>\n<li>为一个全局变量打桩</li>\n<li>为一个函数打桩</li>\n<li>为一个过程打桩</li>\n<li>由任意相同或不同的基本场景组合而成</li>\n</ul>\n<pre><code class=\"hljs language-go\">func <span class=\"hljs-title class_\">TestStubMethod</span>(t *testing.<span class=\"hljs-property\">T</span>) {\n    <span class=\"hljs-keyword\">var</span> printStr = <span class=\"hljs-title function_\">func</span>(val string) string {\n        <span class=\"hljs-keyword\">return</span> val\n    }\n\n    <span class=\"hljs-comment\">// 针对有参数有返回值的</span>\n    stubs := gostub.<span class=\"hljs-title class_\">Stub</span>(&amp;printStr, <span class=\"hljs-title function_\">func</span>(val string) string {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;hello,&quot;</span> + val\n    })\n    defer stubs.<span class=\"hljs-title class_\">Reset</span>()\n    fmt.<span class=\"hljs-title class_\">Println</span>(<span class=\"hljs-string\">&quot;After stub: &quot;</span>, <span class=\"hljs-title function_\">printStr</span>(<span class=\"hljs-string\">&quot;hhhhh&quot;</span>))\n\n    <span class=\"hljs-keyword\">var</span> printStr2 = <span class=\"hljs-title function_\">func</span>(val string) string {\n        <span class=\"hljs-keyword\">return</span> val\n    }\n    <span class=\"hljs-comment\">// StubFunc 第一个参数必须是一个函数变量的指针，该指针指向的必须是一个函数变量，第二个参数为函数 mock 的返回值</span>\n    stubs2 := gostub.<span class=\"hljs-title class_\">StubFunc</span>(&amp;printStr2, <span class=\"hljs-string\">&quot;ddddd,万生世代&quot;</span>)\n    defer stubs2.<span class=\"hljs-title class_\">Reset</span>()\n    fmt.<span class=\"hljs-title class_\">Println</span>(<span class=\"hljs-string\">&quot;After stub:&quot;</span>, <span class=\"hljs-title function_\">printStr2</span>(<span class=\"hljs-string\">&quot;lalala&quot;</span>))\n}\n</code></pre><h2>gomonkey</h2>\n<p><code>github.com/agiledragon/gomonkey/v2</code></p>\n<p>1、它违反了开闭原则。\n2、运行时必须关闭内连「go test -gcflags=all=-l」。\n3、运行时需要很高的权限，并且不同的硬件需要不同的黑科技实现</p>\n<ol>\n<li>直接在方法级别上进行 mock<br>（在运行时通过汇编语句重写可执行文件，将待打桩函数或方法的实现跳转到桩实现）<br>在编译阶段直接替换掉真的函数代码部分  </li>\n<li>非线程安全，请勿用于并发测试</li>\n</ol>\n<p>并且必须加上<code>&quot;-gcflags=all=-l&quot;</code>, 避免内联优化(短函数直接被合并不会单独作为一个函数)导致测试失败</p>\n<pre><code class=\"hljs language-go\">func DoSomething(name string, args ...string) (string, error) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, errors.New(<span class=\"hljs-string\">&quot;TODO&quot;</span>)\n}\n\nfunc TestExec(t *testing.T) {\n    patches := gomonkey.NewPatches()\n    defer patches.Reset()\n    outputExpect := <span class=\"hljs-string\">&quot;xxx-vethName100-yyy&quot;</span>\n    guard := patches.ApplyFunc(DoSomething, func(_ string, _ ...string) (string, error) {\n        <span class=\"hljs-keyword\">return</span> outputExpect, nil\n    })\n    defer guard.Reset()\n    output, err := DoSomething(<span class=\"hljs-string\">&quot;asd&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span>.Nil(t, err)\n    <span class=\"hljs-keyword\">assert</span>.Equal(t, outputExpect, output)\n}\n</code></pre><h2>http测试</h2>\n<p>在 web 项目中，大多接口是处理 http 请求（post、get 之类的），在测试环境中，是访问不到它发起的 get 请求的 url 的，此时就可以模拟 http 请求来写测试。可以利用官方自带的 http 包来进行模拟请求。</p>\n<h2>sql测试</h2>\n<p>模拟任何实现了 sql/driver 接口的 db 驱动，无需关注 db 连接。</p>\n<h1>性能调优</h1>\n<p>使用go内置的工具pprof即可分析程序运行状态的整体情况</p>\n<table>\n<thead>\n<tr>\n<th>allocs</th>\n<th>内存分配情况的采样信息</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>blocks</td>\n<td>阻塞操作情况的采样信息</td>\n</tr>\n<tr>\n<td>cmdline</td>\n<td>程序启动命令参数</td>\n</tr>\n<tr>\n<td>goroutine</td>\n<td>所有协程的堆栈信息</td>\n</tr>\n<tr>\n<td>heap</td>\n<td>堆上的内存分配情况</td>\n</tr>\n<tr>\n<td>mutex</td>\n<td>锁竞争情况的采样信息</td>\n</tr>\n<tr>\n<td>profile</td>\n<td>cpu占用情况的采样信息</td>\n</tr>\n<tr>\n<td>threadcreate</td>\n<td>系统线程创建情况的采样信息</td>\n</tr>\n<tr>\n<td>trace</td>\n<td>程序运行跟踪信息</td>\n</tr>\n</tbody></table>\n<ul>\n<li>runtim/pprof: 手动调用，一般在函数入口中</li>\n<li>net/http/pprof: 用于web系统中，不过只是对runtime/pprof的简单封装</li>\n<li>gin-contrib提供了对net/http/pprof的封装，能够在gin中使用</li>\n</ul>\n<blockquote>\n<p>需要注意的是，profile所显示的时间明显小于接口调用的时间，是因为profile只能够分析cpu的耗时，无法计算io情况(因为io不会占用cpu)</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># 下载cpu profile，默认从当前开始收集30s的cpu使用情况，需要等待30s</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/profile</span>   <span class=\"hljs-comment\"># 30-second CPU profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/profile?seconds=120</span>     <span class=\"hljs-comment\"># wait 120s</span>\n\n<span class=\"hljs-comment\"># 下载heap profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/heap</span>      <span class=\"hljs-comment\"># heap profile</span>\n\n<span class=\"hljs-comment\"># 下载goroutine profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/goroutine</span> <span class=\"hljs-comment\"># goroutine profile</span>\n\n<span class=\"hljs-comment\"># 下载block profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/block</span>     <span class=\"hljs-comment\"># goroutine blocking profile</span>\n\n<span class=\"hljs-comment\"># 下载mutex profile</span>\n<span class=\"hljs-string\">go</span> <span class=\"hljs-string\">tool</span> <span class=\"hljs-string\">pprof</span> <span class=\"hljs-string\">http://localhost:6060/debug/pprof/mutex</span>\n</code></pre><h2>trace</h2>\n<p>trace工具，用于查看整个周期内发生的事件，指定的Goroutines何时执行、执行 了多长时间、什么时候陷入了堵塞、什么时候解除了堵塞、GC如何影 响单个Goroutine的执行、STW中断花费的时间是否太长等 。</p>\n<ul>\n<li>协程的创建、开始和结束</li>\n<li>协程的堵塞-系统调用、通道、锁</li>\n<li>网络I/O相关事件</li>\n<li>系统调用事件</li>\n<li>垃圾回收相关事件</li>\n</ul>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;runtime/trace&quot;</span>\n\ntrace.<span class=\"hljs-title class_\">Start</span>(f)\n\ndefer trace.<span class=\"hljs-title class_\">Stop</span>()\n\n<span class=\"hljs-comment\">// or use net/pprof</span>\n<span class=\"hljs-comment\">// curl -o trace.out http.../debug/pprof/trace?second=20</span>\n\n<span class=\"hljs-comment\">// 然后使用go tool trace trace.out进行分析</span>\n</code></pre><p>在trace的初始阶段需要首先STW，然后获取协程的快照、状态、栈帧信息，然后开启GC重新启动所有协程。go源码中对于关键事件都加了判断是否开启了trace，开启后，触发这些事件时都会写入。</p>\n<p>关键的事件包括协程的生命周期、协程堵塞、网络I/O、系统 调用、垃圾回收等，根据事件的不同，可能保存和此事件相关的不同 数量的参数及栈追踪数据。每个逻辑处理器P都有一个缓存 (p.tracebuf)，用于存储已经被序列化为字节的事件(Event) 。每个p的tracebuf都有限度，超过之后会转移到全局链表。</p>\n<p>trace工具会新开一个协程专门用于读取全局trace上的信息， 此时全局的事件对象已经是序列化之后的字节数组，直接添加到文件 中即可。另外，访问全局trace缓存需要加锁，当没有可以访问的对象 时，读取协程会陷入休眠状态 。</p>\n<p>当指定的事件到期后结束trace任务程序再次进入STW，刷新逻辑处理器P上的tracebuf缓存</p>\n<h2>pyroscope</h2>\n<p>基于pprof数据的可视化工具，提供上报和拉取两种模式</p>\n<p>支持多种语言</p>\n<p>可以将各个服务的运行数据集中起来，更利于管理</p>\n<p>不过只能获取到当前时间点的内存分配情况、当前使用的内存情况，以及CPU耗时等</p>\n<p><del>另外，除了无法对协程数、mutex等进行分析</del>, 又错怪了😹，pyroscope支持的分析维度包括(cpu、inuse_objects、alloc_objects、inuse_space，alloc_space, goroutines、mutex_duration、block_count、block_duration，这里面除了pprof，应该还用了trace包里面的数据)</p>\n<p><del>绘制的时间曲线没有具体的数值，也无法查看具体时间点下的数据情况</del>(错怪了，时间区间选择可以用鼠标滑动选择，无法点击某个特定的柱形结构)</p>\n<h2>排查CPU占用过高</h2>\n<p>top命令确认</p>\n<p><code>go tool pprof http://localhost:6060/debug/pprof/profile</code></p>\n<p>进入交互使用top查看CPU占用较高的调用</p>\n<p>top</p>\n<p>使用list 名字 查看调用的具体位置</p>\n<p>list Eat</p>\n<p>如果安装了graphviz工具，使用web命令之后能够在web界面上看到调用链路图</p>\n<p>brew install graphviz</p>\n<img src=\"/images/blogs/cpu-web.png\" />\n\n<p>修复问题代码继续后面的操作</p>\n<h2>排查内存占用过高</h2>\n<p>修复代码中的死循环，再次使用top会发现CPU占用率下来了</p>\n<p><code>go tool pprof http://localhost:6060/debug/pprof/heap</code></p>\n<p>再次使用top、list定位到问题代码</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-attr\">Total:</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">50GB</span>\n<span class=\"hljs-string\">ROUTINE</span> <span class=\"hljs-string\">========================</span> <span class=\"hljs-string\">github.com/wolfogre/go-pprof-practice/animal/muridae/mouse.(*Mouse).Steal</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">/Users/dengronghui/Documents/Apps/public/handbook/Golang/go-pprof-practice-master/animal/muridae/mouse/mouse.go</span>\n    <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">50GB</span>     <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">50GB</span> <span class=\"hljs-string\">(flat,</span> <span class=\"hljs-string\">cum)</span> <span class=\"hljs-number\">99.90</span><span class=\"hljs-string\">%</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">Total</span>\n         <span class=\"hljs-string\">.</span>          <span class=\"hljs-string\">.</span>     <span class=\"hljs-attr\">45:</span>\n         <span class=\"hljs-string\">.</span>          <span class=\"hljs-string\">.</span>     <span class=\"hljs-number\">46</span><span class=\"hljs-string\">:func</span> <span class=\"hljs-string\">(m</span> <span class=\"hljs-string\">*Mouse)</span> <span class=\"hljs-string\">Steal()</span> {\n         <span class=\"hljs-string\">.</span>          <span class=\"hljs-string\">.</span>     <span class=\"hljs-attr\">47:</span>\t<span class=\"hljs-string\">log.Println(m.Name()</span>, <span class=\"hljs-string\">&quot;steal&quot;</span><span class=\"hljs-string\">)</span>\n         <span class=\"hljs-string\">.</span>          <span class=\"hljs-string\">.</span>     <span class=\"hljs-attr\">48:</span>\t<span class=\"hljs-string\">max</span> <span class=\"hljs-string\">:=</span> <span class=\"hljs-string\">constant.Gi</span>\n         <span class=\"hljs-string\">.</span>          <span class=\"hljs-string\">.</span>     <span class=\"hljs-attr\">49:</span>\t<span class=\"hljs-string\">for</span> <span class=\"hljs-string\">len(m.buffer)*constant.Mi</span> <span class=\"hljs-string\">&lt;</span> <span class=\"hljs-string\">max</span> {\n    <span class=\"hljs-attr\">1.50GB     1.50GB     50:</span>\t\t<span class=\"hljs-string\">m.buffer</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">append(m.buffer</span>, [<span class=\"hljs-string\">constant.Mi</span>]<span class=\"hljs-string\">byte</span>{}<span class=\"hljs-string\">)</span>\n         <span class=\"hljs-string\">.</span>          <span class=\"hljs-string\">.</span>     <span class=\"hljs-attr\">51:</span>\t}\n         <span class=\"hljs-string\">.</span>          <span class=\"hljs-string\">.</span>     <span class=\"hljs-number\">52</span><span class=\"hljs-string\">:</span>}\n</code></pre><p>同样可以使用web可视化展示</p>\n<h2>排查频繁内存回收</h2>\n<p>获取程序运行时的GC日志</p>\n<pre><code class=\"hljs language-bash\">gc 1 @0.003s 7%: 0.022+2.1+0.002 ms clock, 0.18+1.1/1.9/3.0+0.019 ms cpu, 4-&gt;4-&gt;3 MB, 5 MB goal, 8 P\ngc 2 @0.018s 3%: 0.009+1.8+0.001 ms clock, 0.073+0.096/2.2/0.16+0.013 ms cpu, 7-&gt;7-&gt;6 MB, 8 MB goal, 8 P\ngc 3 @0.089s 0%: 0.022+0.92+0.013 ms clock, 0.17+0.095/1.0/0.75+0.10 ms cpu, 16-&gt;16-&gt;14 MB, 17 MB goal, 8 P\ngc 4 @0.489s 0%: 0.023+1.5+0.014 ms clock, 0.18+0/2.4/1.1+0.11 ms cpu, 29-&gt;29-&gt;15 MB, 30 MB goal, 8 P\ngc 1 @0.003s 1%: 0.013+0.55+0.002 ms clock, 0.013+0.22/0.17/0+0.002 ms cpu, 16-&gt;16-&gt;0 MB, 17 MB goal, 1 P\ngc 2 @3.020s 0%: 0.070+0.56+0.002 ms clock, 0.070+0.17/0.20/0+0.002 ms cpu, 16-&gt;16-&gt;0 MB, 17 MB goal, 1 P\ngc 3 @6.027s 0%: 0.15+0.98+0.003 ms clock, 0.15+0.36/0.36/0+0.003 ms cpu, 16-&gt;16-&gt;0 MB, 17 MB goal, 1 P\ngc 4 @9.034s 0%: 0.10+0.63+0.002 ms clock, 0.10+0.16/0.23/0+0.002 ms cpu, 16-&gt;16-&gt;0 MB, 17 MB goal, 1 P\ngc 5 @12.040s 0%: 0.070+0.53+0.002 ms clock, 0.070+0.23/0.19/0+0.002 ms cpu, 16-&gt;16-&gt;0 MB, 17 MB goal, 1 P\ngc 6 @15.047s 0%: 0.11+0.66+0.002 ms clock, 0.11+0.23/0.27/0+0.002 ms cpu, 16-&gt;16-&gt;0 MB, 17 MB goal, 1 P\n</code></pre><img src=\"/images/blogs/gc_info.png\" />\n\n<p>每次gc都从16MB释放到0MB，说明程序在不断的声明然后释放内存</p>\n<p>接下来使用 pprof 排查时，我们在乎的不是什么地方在占用大量内存，而是什么地方在不停地申请内</p>\n<p><code>go tool pprof http://localhost:6060/debug/pprof/allocs</code></p>\n<h2>排查协程泄漏</h2>\n<p><code>go tool pprof http://localhost:6060/debug/pprof/goroutine</code></p>\n<p>同样使用top、list、web即可定位到</p>\n<h2>排查锁的争用</h2>\n<p><code>go tool pprof http://localhost:6060/debug/pprof/mutex</code></p>\n","frontMatter":{"readingTime":{"text":"21 min read","minutes":20.295,"time":1217700,"words":4059},"slug":"golang工程化总览","fileName":"golang工程化总览.md","title":"golang工程化纵览","date":"2022-07-03T00:00:00.000Z","tags":["Golang"],"draft":false,"summary":"golang工程化所用到的工具概览"}},"prev":{"title":"go-zero微服务实践","date":"2022-06-20T00:00:00.000Z","tags":["实践","云原生"],"draft":false,"summary":"微服务简介以及go-zero如何落地","slug":"go-zero微服务实践"},"next":{"title":"容器之间的网络模式","date":"2022-07-04T00:00:00.000Z","tags":["容器"],"draft":false,"summary":"容器之间的网络模式简介","slug":"容器之间的网络模式"}},"__N_SSG":true}