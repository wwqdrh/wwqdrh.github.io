{"pageProps":{"post":{"mdxSource":"<h1>容器到宿主</h1>\n<p>对于容器从自己的 Network Namespace 连接到 Host Network Namespace 的方法，一般来说就只有两类设备接口：一类是veth，另外一类是 macvlan/ipvlan。</p>\n<blockquote>\n<p>使用centos是因为centos预装了iproute2，可以使用ip命令</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\">docker run -d --name net-test --network none centos:latest sleep <span class=\"hljs-number\">36000</span>\n\ndocker <span class=\"hljs-built_in\">exec</span> -it net-test ip addr\n</code></pre><p>就在这个容器的 Network Namespace 里建立 veth</p>\n<p>通过 &quot;/proc/$pid/ns/net&quot;这个文件得到 Network Namespace 的 ID，这个 Network Namespace ID 既是这个进程的，也同时属于这个容器。</p>\n<p>在&quot;/var/run/netns/&quot;的目录下建立一个符号链接，指向这个容器的 Network Namespace。完成这步操作之后，在后面的&quot;ip netns&quot;操作里，就可以用 pid 的值作为这个容器的 Network Namesapce 的标识了。</p>\n<pre><code class=\"hljs language-bash\">pid=$(ps -ef | grep <span class=\"hljs-string\">&quot;sleep 36000&quot;</span> | grep -v grep | awk <span class=\"hljs-string\">&#x27;{print $2}&#x27;</span>)\necho $pid\nln -s /proc/$pid/ns/net /<span class=\"hljs-keyword\">var</span>/run/netns/$pid\n</code></pre><p>创建veth虚拟设备，并把其分别放在宿主和容器的命名空间</p>\n<p>veth pair设备都有一个ifindex和iflink值，，容器中的eth0设备的ifindex值跟host network namespace中的对应veth pair设备的iflink值相等，反之亦然</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Create a pair of veth interfaces</span>\n<span class=\"hljs-string\">ip</span> <span class=\"hljs-string\">link</span> <span class=\"hljs-string\">add</span> <span class=\"hljs-string\">name</span> <span class=\"hljs-string\">veth_host</span> <span class=\"hljs-string\">type</span> <span class=\"hljs-string\">veth</span> <span class=\"hljs-string\">peer</span> <span class=\"hljs-string\">name</span> <span class=\"hljs-string\">veth_container</span>\n<span class=\"hljs-comment\"># Put one of them in the new net ns</span>\n<span class=\"hljs-string\">ip</span> <span class=\"hljs-string\">link</span> <span class=\"hljs-string\">set</span> <span class=\"hljs-string\">veth_container</span> <span class=\"hljs-string\">netns</span> <span class=\"hljs-string\">$pid</span>\n\n<span class=\"hljs-comment\"># 在次查看容器中的设备会发现已经加入了一个veth</span>\n<span class=\"hljs-attr\">63:</span> <span class=\"hljs-string\">veth_container@if64:</span> <span class=\"hljs-string\">&lt;BROADCAST,MULTICAST&gt;</span> <span class=\"hljs-string\">mtu</span> <span class=\"hljs-number\">1500 </span><span class=\"hljs-string\">qdisc</span> <span class=\"hljs-string\">noop</span> <span class=\"hljs-string\">state</span> <span class=\"hljs-string\">DOWN</span> <span class=\"hljs-string\">group</span> <span class=\"hljs-string\">default</span> <span class=\"hljs-string\">qlen</span> <span class=\"hljs-number\">1000</span>\n    <span class=\"hljs-string\">link/ether</span> <span class=\"hljs-number\">82</span><span class=\"hljs-string\">:b9:bd:06:99:6b</span> <span class=\"hljs-string\">brd</span> <span class=\"hljs-string\">ff:ff:ff:ff:ff:ff</span> <span class=\"hljs-string\">link-netnsid</span> <span class=\"hljs-number\">0</span>\n</code></pre><p>查看docker0所在的网段进行配置，例如</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-number\">4</span>: <span class=\"hljs-attr\">docker0</span>: &lt;<span class=\"hljs-variable constant_\">NO</span>-<span class=\"hljs-variable constant_\">CARRIER</span>,<span class=\"hljs-variable constant_\">BROADCAST</span>,<span class=\"hljs-variable constant_\">MULTICAST</span>,<span class=\"hljs-variable constant_\">UP</span>&gt; mtu <span class=\"hljs-number\">1500</span> qdisc noqueue state <span class=\"hljs-variable constant_\">DOWN</span> group <span class=\"hljs-keyword\">default</span>\n    link/ether <span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">42</span>:<span class=\"hljs-attr\">ab</span>:<span class=\"hljs-attr\">ee</span>:1<span class=\"hljs-attr\">c</span>:db brd <span class=\"hljs-attr\">ff</span>:<span class=\"hljs-attr\">ff</span>:<span class=\"hljs-attr\">ff</span>:<span class=\"hljs-attr\">ff</span>:<span class=\"hljs-attr\">ff</span>:ff\n    inet <span class=\"hljs-number\">172.17</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>/<span class=\"hljs-number\">16</span> brd <span class=\"hljs-number\">172.17</span><span class=\"hljs-number\">.255</span><span class=\"hljs-number\">.255</span> scope <span class=\"hljs-variable language_\">global</span> docker0\n       valid_lft forever preferred_lft forever\n</code></pre><pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># In the container, setup veth_container</span>\nip netns <span class=\"hljs-built_in\">exec</span> $pid ip link <span class=\"hljs-built_in\">set</span> veth_container name eth0\nip netns <span class=\"hljs-built_in\">exec</span> $pid ip addr add <span class=\"hljs-number\">172.17</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.2</span>/<span class=\"hljs-number\">16</span> dev eth0\nip netns <span class=\"hljs-built_in\">exec</span> $pid ip link <span class=\"hljs-built_in\">set</span> eth0 up\nip netns <span class=\"hljs-built_in\">exec</span> $pid ip route add default via <span class=\"hljs-number\">172.17</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>\n\n<span class=\"hljs-comment\"># In the host, set veth_host up</span>\nip link <span class=\"hljs-built_in\">set</span> veth_host up\n</code></pre><h1>宿主到eth0</h1>\n<p>一个普通 Linux 节点上数据包转发的问题，可以用 nat 来做个转发，或者建立 Overlay 网络发送，也可以通过配置 proxy arp 加路由的方法来实现。</p>\n<p>Docker 缺省使用的是 bridge + nat 的转发方式</p>\n<p>Docker 程序在节点上安装完之后，就会自动建立了一个 docker0 的 bridge interface。所以我们只需要把第一步中建立的 veth_host 这个设备，接入到 docker0 这个 bridge 上。</p>\n<pre><code class=\"hljs language-bash\">ip link <span class=\"hljs-built_in\">set</span> veth_host master docker0\n</code></pre><p>要让子网通过宿主机上 eth0 去访问外网的话，加上iptables规则</p>\n<pre><code class=\"hljs language-bash\">iptables -P FORWARD ACCEPT\n</code></pre><p>由于涉及到docker0到主机eth0之间的转发，所以需要配置ipv4运行转发的选项</p>\n<pre><code class=\"hljs language-bash\">echo <span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-regexp\">/proc/</span>sys/net/ipv4/ip_forward\n</code></pre><p>接下来就能ping通了</p>\n<pre><code class=\"hljs language-bash\">docker <span class=\"hljs-built_in\">exec</span> -it net-test ip addr\n\ndocker <span class=\"hljs-built_in\">exec</span> -it net-test ping www.baidu.com\n</code></pre><p>清理操作</p>\n<pre><code class=\"hljs language-bash\">docker stop net-test &amp;&amp; docker rm net-test\n\nrm /var/run/netns/$pid\n\n<span class=\"hljs-comment\"># ip link delete veth_host, 删除其中一端，另外一端同样会删除，上面直接删除容器，那么这宿主机上的也是会删除的</span>\n</code></pre>","frontMatter":{"readingTime":{"text":"5 min read","minutes":4.32,"time":259200,"words":864},"slug":"从none网络实践容器的网络配置","fileName":"从none网络实践容器的网络配置.md","title":"手动建立容器网络实践","date":"2022-10-31T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"amespace-网络配置实践"}},"prev":{"title":"CPU限制实战","date":"2022-10-30T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"cgroup-cpu限制实践","slug":"CPU限制实践"},"next":{"title":"overlay文件系统","date":"2022-11-01T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"overlay文件系统实践，探索容器原理","slug":"overlay文件系统实验"}},"__N_SSG":true}