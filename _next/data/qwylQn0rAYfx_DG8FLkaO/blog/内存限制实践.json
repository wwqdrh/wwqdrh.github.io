{"pageProps":{"post":{"mdxSource":"<p>限制内存使用量的实验</p>\n<p>超过限制就会触发oom</p>\n<p>首先需要一个能够消耗指定内存大小的进程</p>\n<blockquote>\n<p>本来想挂载tmpfs来消耗指定内存(详情在文末的tmpfs与共享内存)，但是发现这个内存占用是属于shared，不能归属于某个进程，无法限制</p>\n</blockquote>\n<p>使用c的maclloc调用，消耗指定大小内存</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_help</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;&quot;Usage: unit: MB&quot;&quot;&quot;</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(sys.argv) == <span class=\"hljs-number\">2</span>:\n        s = <span class=\"hljs-string\">&#x27; &#x27;</span> * (<span class=\"hljs-built_in\">int</span>(sys.argv[<span class=\"hljs-number\">1</span>]) * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;size of s: {}&#x27;</span>.<span class=\"hljs-built_in\">format</span>(sys.getsizeof(s)))\n        time.sleep(<span class=\"hljs-number\">10000</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        print_help()\n</code></pre><p>在v1版本中，与oomkiller相关的有</p>\n<ul>\n<li>memory.limit_in_bytes</li>\n<li>memory.oom_control：是否killer，默认为0要kill，设置为1不kill</li>\n</ul>\n<p>在cgroupv2中，测试oom killer只与<code>memory.max</code>有关，设置最大的内存用量, 单位是byte，支持自己带，比如10m，会自动转换为byte格式</p>\n<p><code>ps -ef | grep [name]</code>找到进程对应的pid，加入到控制组中</p>\n<pre><code class=\"hljs language-bash\">echo <span class=\"hljs-number\">24756</span> &gt;&gt; ctest/cgroup.procs\n\n<span class=\"hljs-comment\"># 设置memory.max</span>\necho <span class=\"hljs-number\">52428800</span> &gt;&gt; memory.<span class=\"hljs-built_in\">max</span> <span class=\"hljs-comment\"># 50*1024*1024</span>\n</code></pre><p>发现并没有kill掉那个100MB的进程，另外cgroup中memory.curren也是为0，没有数据，猜测是只有加入到cgroup之后再申请的内存才会记录，以及触发oom，因此修改脚本</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">import</span> os\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_help</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;&quot;Usage: unit: MB&quot;&quot;&quot;</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(os.getpid())\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(sys.argv) == <span class=\"hljs-number\">2</span>:\n        ms = <span class=\"hljs-built_in\">int</span>(sys.argv[<span class=\"hljs-number\">1</span>])\n        s = <span class=\"hljs-string\">&#x27;&#x27;</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(ms):\n            s += <span class=\"hljs-string\">&#x27; &#x27;</span> * (<span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>)\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;size of s: {}&#x27;</span>.<span class=\"hljs-built_in\">format</span>(sys.getsizeof(s)))\n            time.sleep(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\"># 100m需要200s申请完毕,给足实验时间</span>\n        time.sleep(<span class=\"hljs-number\">100</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        print_help()\n</code></pre><p>验证有效，但是内存增长，不知为何只是会被memory.max限制住，不会oomkiller</p>\n<p>但是如果把max调很小，oomkiller又会生效</p>\n<h2>原因分析</h2>\n<p>Memory Cgroup 里都不会对内核的内存做限制（比如页表，slab 等）</p>\n<p>应用程序在申请内存的时候，比如说，调用 malloc() 来申请 100MB 的内存大小，malloc() 返回成功了，这时候系统其实只是把 100MB 的虚拟地址空间分配给了进程，但是并没有把实际的物理内存页面分配给进程。</p>\n<p>当进程对这块内存地址开始做真正读写操作的时候，系统才会把实际需要的物理内存分配给进程。而这个过程中，进程真正得到的物理内存，就是这个 RSS</p>\n<p>容器如果有部分内存是 Page Cache，如果进程需要申请新内存，page cache是可以被释放的。</p>\n<p>可以在运行时查看<code>memory.stat</code>进行分析</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-string\">anon</span> <span class=\"hljs-number\">10289152</span> <span class=\"hljs-comment\"># 匿名映射中使用的内存量 brk()、sbrk() 和 mmap</span>\n<span class=\"hljs-string\">file</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\"># 用于缓存文件系统数据的内存量，包括 tmpfs 和共享内存。</span>\n<span class=\"hljs-string\">kernel_stack</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\"># 分配给内核堆栈的内存量</span>\n<span class=\"hljs-string\">pagetables</span> <span class=\"hljs-number\">65536</span> \n<span class=\"hljs-string\">percpu</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">sock</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">shmem</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">file_mapped</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">file_dirty</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">file_writeback</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">swapcached</span> <span class=\"hljs-number\">110592</span> <span class=\"hljs-comment\"># 交换缓存量</span>\n<span class=\"hljs-string\">anon_thp</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">file_thp</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">shmem_thp</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">inactive_anon</span> <span class=\"hljs-number\">10391552</span> <span class=\"hljs-comment\"># 页回收算法使用的内部内存管理列表上的内存量</span>\n<span class=\"hljs-string\">active_anon</span> <span class=\"hljs-number\">8192</span>\n<span class=\"hljs-string\">inactive_file</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">active_file</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">unevictable</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">slab_reclaimable</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">slab_unreclaimable</span> <span class=\"hljs-number\">288</span>\n<span class=\"hljs-string\">slab</span> <span class=\"hljs-number\">288</span>\n<span class=\"hljs-string\">workingset_refault_anon</span> <span class=\"hljs-number\">28</span>\n<span class=\"hljs-string\">workingset_refault_file</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">workingset_activate_anon</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-string\">workingset_activate_file</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">workingset_restore_anon</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">workingset_restore_file</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">workingset_nodereclaim</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">pgfault</span> <span class=\"hljs-number\">44105</span>\n<span class=\"hljs-string\">pgmajfault</span> <span class=\"hljs-number\">27</span>\n<span class=\"hljs-string\">pgrefill</span> <span class=\"hljs-number\">47</span>\n<span class=\"hljs-string\">pgscan</span> <span class=\"hljs-number\">78593</span>\n<span class=\"hljs-string\">pgsteal</span> <span class=\"hljs-number\">21000</span>\n<span class=\"hljs-string\">pgactivate</span> <span class=\"hljs-number\">1237</span>\n<span class=\"hljs-string\">pgdeactivate</span> <span class=\"hljs-number\">47</span>\n<span class=\"hljs-string\">pglazyfree</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">pglazyfreed</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">thp_fault_alloc</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-string\">thp_collapse_alloc</span> <span class=\"hljs-number\">0</span>\n</code></pre><p>所以cgroup对于内存的限制并不能严格控制</p>\n<blockquote>\n<p>但是对于这个python程序，实际查看过占用的RSS就是指定的大小，但是不知为何却是无法kill，后面有空再分析吧</p>\n</blockquote>\n<h1>参考</h1>\n<h2>tmpfs与共享内存</h2>\n<p>创建虚拟内存文件系统，不断写入数据达到消耗内存的目的，需要清除内存时，删除创建的虚拟内存目录即可</p>\n<pre><code class=\"hljs language-bash\">#!/bin/bash\n\nFILE_NAME=`basename $<span class=\"hljs-number\">0</span>`\nmemsize=$<span class=\"hljs-number\">2</span>\n\nfunction <span class=\"hljs-built_in\">usage</span>()\n{\n    echo <span class=\"hljs-string\">&quot;Usage:$FILE_NAME consume memory_size|release -----the value of memory_size like 100M 2G and etc&quot;</span>\n    echo <span class=\"hljs-string\">&quot;Example: $FILE_NAME consume 1G&quot;</span>\n    echo <span class=\"hljs-string\">&quot; $FILE_NAME release&quot;</span>\n}\n\nfunction <span class=\"hljs-built_in\">consume</span>()\n{\n    <span class=\"hljs-keyword\">if</span> [ -d /tmp/memory ];then\n        echo <span class=\"hljs-string\">&quot;/tmp/memory already exists&quot;</span>\n    <span class=\"hljs-keyword\">else</span>\n        mkdir /tmp/memory\n    fi\n\n    mount -t tmpfs -o size=$<span class=\"hljs-number\">1</span> tmpfs /tmp/memory\n    dd <span class=\"hljs-keyword\">if</span>=/dev/zero of=/tmp/memory/block\n}\n\nfunction <span class=\"hljs-built_in\">release</span>()\n{\n    rm /tmp/memory/block;ret=$?\n    <span class=\"hljs-keyword\">if</span> [ $ret != <span class=\"hljs-number\">0</span> ]; then\n        echo <span class=\"hljs-string\">&quot;remove memory data failed&quot;</span>\n        <span class=\"hljs-keyword\">return</span> $ret\n    fi\n\n    umount /tmp/memory;ret=$?\n    <span class=\"hljs-keyword\">if</span> [ $ret != <span class=\"hljs-number\">0</span> ]; then\n        echo <span class=\"hljs-string\">&quot;umount memory filedir failed&quot;</span>\n        <span class=\"hljs-keyword\">return</span> $ret\n    fi\n\n    rmdir /tmp/memory;ret=$?\n    <span class=\"hljs-keyword\">if</span> [ $ret != <span class=\"hljs-number\">0</span> ]; then\n        echo <span class=\"hljs-string\">&quot;remove memory filedir failed&quot;</span>\n        <span class=\"hljs-keyword\">return</span> $ret\n    fi\n}\n\nfunction <span class=\"hljs-built_in\">main</span>()\n{\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;$1&quot;</span> in\n        consume) consume $memsize;;\n        release) release;;\n        *) usage;exit <span class=\"hljs-number\">1</span>;;\n    esac\n}\n\nmain $*\n</code></pre>","frontMatter":{"readingTime":{"text":"7 min read","minutes":6.25,"time":375000,"words":1250},"slug":"内存限制实践","fileName":"内存限制实践.md","title":"内存限制实战","date":"2022-10-30T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"cgroup-内存限制实践"}},"prev":{"title":"docker-swarm的工作原理","date":"2022-10-26T00:00:00.000Z","tags":["云原生"],"draft":false,"summary":"docker-swarm的工作原理","slug":"swarm工作模式"},"next":{"title":"CPU限制实战","date":"2022-10-30T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"cgroup-cpu限制实践","slug":"CPU限制实践"}},"__N_SSG":true}