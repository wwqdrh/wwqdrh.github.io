{"pageProps":{"post":{"mdxSource":"<h2>配置静态文件服务</h2>\n<pre><code class=\"hljs language-bash\">apt-get install nginx\n\nsystemctl start nginx\n\nsystemctl enable nginx\n</code></pre><p>配置静态文件映射</p>\n<ul>\n<li>/usr/sbin/nginx：主程序</li>\n<li>/etc/nginx：存放配置文件</li>\n<li>/usr/share/nginx：存放静态文件</li>\n<li>/var/log/nginx：存放日志</li>\n</ul>\n<p>程序启动之后默认的文件路径在<code>/var/www/html</code>下面，所以把需要映射的文件直接放在这就行</p>\n<p>如果要设置文件过期时间</p>\n<pre><code class=\"hljs language-bash\">expires 30s;\nexpires 30m;\nexpires 2h;\nexpires 30d;\n</code></pre><h2>配置basic auth</h2>\n<pre><code class=\"hljs language-bash\">sh -c <span class=\"hljs-string\">&quot;echo -n &#x27;wwqdrh:&#x27; &gt;&gt; /etc/nginx/.htpasswd&quot;</span>\n\nsh -c <span class=\"hljs-string\">&quot;openssl passwd -apr1 &gt;&gt; /etc/nginx/.htpasswd&quot;</span>\n\n<span class=\"hljs-comment\"># 查看结果</span>\ncat /etc/nginx/.htpasswd\n</code></pre><p>选择要授权的配置文件中，例如<code>/etc/nginx/sites-enabled/default</code></p>\n<pre><code>auth_basic <span class=\"hljs-string\">&quot;Restricted Content&quot;</span>;\n\nauth_basic_user_file /etc/nginx/.<span class=\"hljs-property\">htpasswd</span>;\n</code></pre><h2>配置https</h2>\n<p>使用<code>nginx -V</code>查看是否有<code>http_ssl_module</code>模块(一般安装都会有)</p>\n<p>启用 SSL Session 缓存可以大大减少 TLS 的反复验证，减少 TLS 握手的 roundtrip。<br>虽然 session 缓存会占用一定内存，但是用 1M 的内存就可以缓存 4000 个连接，可以说是非常非常划算的。(但是设置最好设置50m，1m太小了东西都加载不出来)</p>\n<pre><code class=\"hljs language-conf\">listen <span class=\"hljs-number\">443</span> ssl default_server;\n\nlisten [::]:<span class=\"hljs-number\">443</span> ssl default_server;\n\nssl_certificate /opt/certs/zerossl-certs/certificate.crt;\n\nssl_certificate_key /opt/certs/zerossl-certs//private.key;\n\n<span class=\"hljs-comment\"># ssl_session_cache为off或者none 这两种情况下 是不会启用ssl的session缓存功能的 </span>\nssl_session_cache  shared:SSL:50m;\n\nssl_session_timeout  5m;\n\n<span class=\"hljs-comment\"># 配置支持哪些加密方式，可以通过openssl查看`openssl -v`列出所有详细套件</span>\nssl_ciphers  HIGH:!aNULL:!MD5;\n\n<span class=\"hljs-comment\"># 设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件</span>\nssl_prefer_server_ciphers  on;\n</code></pre><p>想将http的流量重定向到https上，但是由于没有域名，只有ip，但是在nginx上不管使用<code>$host</code>还是<code>$server_name</code>都过不来，都只能是内网的ip，所以这个ip只能写死了</p>\n<pre><code class=\"hljs language-conf\">server {\n        listen <span class=\"hljs-number\">80</span> default_server;\n        listen [::]:<span class=\"hljs-number\">80</span> default_server;\n\n        server_name _;\n\n        <span class=\"hljs-meta\"># rewrite ^(.*) https:<span class=\"hljs-comment\">//$server_name$1 permanent;</span></span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">301</span> https:<span class=\"hljs-comment\">//43.142.26.74$request_uri;</span>\n}\n</code></pre><h2>配置限流与后端转发</h2>\n<p>ngx_http_limit_req_module模块通过漏桶原理来限制单位时间内的请求数，一旦单位时间内请求数超过限制，就会返回503错误</p>\n<pre><code class=\"hljs language-conf\"><span class=\"hljs-string\">limit_req_zone</span> <span class=\"hljs-string\">$binary_remote_addr</span> <span class=\"hljs-string\">zone=selfcardreq:10m</span> <span class=\"hljs-string\">rate=100r/s;</span> <span class=\"hljs-comment\"># 触发条件，所有访问ip 限制每秒10个请求</span>\n<span class=\"hljs-string\">limit_conn_zone</span> <span class=\"hljs-string\">$binary_remote_addr</span> <span class=\"hljs-string\">zone=selfcardconn:10m;</span> <span class=\"hljs-comment\"># 触发条件</span>\n\n<span class=\"hljs-string\">server</span> {\n  <span class=\"hljs-string\">listen</span> <span class=\"hljs-number\">8000</span><span class=\"hljs-string\">;</span>\n  <span class=\"hljs-string\">server_name</span> <span class=\"hljs-string\">~^(?&lt;user&gt;.+)\\.selfcard\\.com$;</span>\n  \n  <span class=\"hljs-string\">location</span> <span class=\"hljs-string\">/</span> {\n    <span class=\"hljs-string\">limit_req</span> <span class=\"hljs-string\">zone=selfcardreq</span> <span class=\"hljs-string\">burst=5</span> <span class=\"hljs-string\">nodelay;</span>   <span class=\"hljs-comment\"># 执行的动作,通过zone名字对应</span>\n    <span class=\"hljs-string\">limit_conn</span> <span class=\"hljs-string\">selfcardconn</span> <span class=\"hljs-number\">100</span><span class=\"hljs-string\">;</span>    <span class=\"hljs-comment\"># 限制同一时间内1个连接，超出的连接返回503</span>\n\n    <span class=\"hljs-string\">proxy_set_header</span> <span class=\"hljs-string\">Host</span> <span class=\"hljs-string\">$host;</span>\n    <span class=\"hljs-string\">proxy_set_header</span> <span class=\"hljs-string\">X-Real-IP</span> <span class=\"hljs-string\">$remote_addr;</span>\n    <span class=\"hljs-string\">proxy_set_header</span> <span class=\"hljs-string\">X-Forwarded-For</span> <span class=\"hljs-string\">$proxy_add_x_forwarded_for;</span>\n    <span class=\"hljs-string\">proxy_set_header</span> <span class=\"hljs-string\">User</span> <span class=\"hljs-string\">$user;</span>\n    <span class=\"hljs-string\">proxy_hide_header</span> <span class=\"hljs-string\">X-Application-Context;</span>\n\n    <span class=\"hljs-string\">set</span> <span class=\"hljs-string\">$is_matched</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">;</span>\n    <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">($user</span> <span class=\"hljs-type\">!=</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-string\">)</span> {\n        <span class=\"hljs-string\">set</span> <span class=\"hljs-string\">$is_matched</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">;</span>\n        <span class=\"hljs-string\">proxy_pass</span> <span class=\"hljs-string\">http://0.0.0.0:3000;</span>\n    }\n\n    <span class=\"hljs-comment\"># 没有匹配到，跳转到默认页面</span>\n    <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">($is_matched</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">)</span> {\n        <span class=\"hljs-string\">return</span> <span class=\"hljs-number\">301</span> <span class=\"hljs-string\">http://www.selfcard.com:8000;</span>\n    }\n  }\n}\n</code></pre>","frontMatter":{"readingTime":{"text":"4 min read","minutes":3.755,"time":225300,"words":751},"slug":"nginx网关配置","fileName":"nginx网关配置.md","title":"nginx网关的常用配置","date":"2022-10-08T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"nginx网关的常用配置"}},"prev":{"title":"ssh环境配置","date":"2022-10-08T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"ssh环境配置","slug":"ssh环境配置"},"next":{"title":"git环境搭建","date":"2022-10-08T00:00:00.000Z","tags":["实践"],"draft":false,"summary":"私人git服务搭建","slug":"git服务器搭建"}},"__N_SSG":true}